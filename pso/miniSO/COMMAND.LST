Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 1
command.ASM



      1				     $comm   macro   name,dist,size,count
      2					     comm    dist name[size]:BYTE:count
      3					     endm
      4					     ?debug  V 300h
      5					     ?debug  S "command.c"
      6					     ?debug  C E95C50854709636F6D6D616E642E63
      7					     ?debug  C E927A07947086D696E69534F2E68
      8					     ?debug  C E902A07C4709636F6D6D616E642E68
      9					     ?debug  C E9789C7947056C69622E68
     10	0000			     _TEXT   segment byte public 'CODE'
     11	0000			     _TEXT   ends
     12				     DGROUP  group   _DATA,_BSS
     13					     assume  cs:_TEXT,ds:DGROUP
     14	0000			     _DATA   segment word public 'DATA'
     15	0000			     d@	     label   byte
     16	0000			     d@w     label   word
     17	0000			     _DATA   ends
     18	0000			     _BSS    segment word public 'BSS'
     19	0000			     b@	     label   byte
     20	0000			     b@w     label   word
     21	0000			     _BSS    ends
     22	0000			     _DATA   segment word public 'DATA'
     23	0000			     num_var label   word
     24	0000  00			     db	     0
     25	0001  00			     db	     0
     26	0002			     commands	     label   word
     27	0002  00B2r			     dw	     DGROUP:s@
     28	0004  00B4r			     dw	     DGROUP:s@+2
     29	0006  07EDr			     dw	     _cmd_help
     30	0008  00DFr			     dw	     DGROUP:s@+45
     31	000A  00E4r			     dw	     DGROUP:s@+50
     32	000C  07EDr			     dw	     _cmd_help
     33	000E  010Cr			     dw	     DGROUP:s@+90
     34	0010  0110r			     dw	     DGROUP:s@+94
     35	0012  0996r			     dw	     _cmd_ver
     36	0014  0138r			     dw	     DGROUP:s@+134
     37	0016  013Dr			     dw	     DGROUP:s@+139
     38	0018  0845r			     dw	     _cmd_date
     39	001A  015Br			     dw	     DGROUP:s@+169
     40	001C  0160r			     dw	     DGROUP:s@+174
     41	001E  08E0r			     dw	     _cmd_time
     42	0020  017Er			     dw	     DGROUP:s@+204
     43	0022  0182r			     dw	     DGROUP:s@+208
     44	0024  0980r			     dw	     _cmd_cls
     45	0026  01A0r			     dw	     DGROUP:s@+238
     46	0028  01A6r			     dw	     DGROUP:s@+244
     47	002A  0980r			     dw	     _cmd_cls
     48	002C  01C2r			     dw	     DGROUP:s@+272
     49	002E  01C9r			     dw	     DGROUP:s@+279
     50	0030  07C2r			     dw	     _cmd_reboot
     51	0032  01EEr			     dw	     DGROUP:s@+316
     52	0034  01F3r			     dw	     DGROUP:s@+321
     53	0036  07D8r			     dw	     _cmd_exit
     54	0038  0216r			     dw	     DGROUP:s@+356
     55	003A  021Br			     dw	     DGROUP:s@+361
     56	003C  07D8r			     dw	     _cmd_exit
     57	003E  023Er			     dw	     DGROUP:s@+396
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 2
command.ASM



     58	0040  0241r			     dw	     DGROUP:s@+399
     59	0042  09C5r			     dw	     _cmd_ps
     60	0044  0277r			     dw	     DGROUP:s@+453
     61	0046  027Cr			     dw	     DGROUP:s@+458
     62	0048  0C21r			     dw	     _cmd_kill
     63	004A  02A7r			     dw	     DGROUP:s@+501
     64	004C  02ACr			     dw	     DGROUP:s@+506
     65	004E  0F9Ar			     dw	     _cmd_demo
     66	0050  02E5r			     dw	     DGROUP:s@+563
     67	0052  02E9r			     dw	     DGROUP:s@+567
     68	0054  0C69r			     dw	     _cmd_set
     69	0056  0328r			     dw	     DGROUP:s@+630
     70	0058  032Er			     dw	     DGROUP:s@+636
     71	005A  0D02r			     dw	     _cmd_unset
     72	005C  034Er			     dw	     DGROUP:s@+668
     73	005E  0353r			     dw	     DGROUP:s@+673
     74	0060  0D42r			     dw	     _cmd_echo
     75	0062  0376r			     dw	     DGROUP:s@+708
     76	0064  037Er			     dw	     DGROUP:s@+716
     77	0066  0FEEr			     dw	     _cmd_waitpid
     78	0068  03AFr			     dw	     DGROUP:s@+765
     79	006A  03B4r			     dw	     DGROUP:s@+770
     80	006C  107Dr			     dw	     _cmd_wait
     81	006E  03E1r			     dw	     DGROUP:s@+815
     82	0070  03E7r			     dw	     DGROUP:s@+821
     83	0072  10F5r			     dw	     _cmd_semls
     84	0074  0410r			     dw	     DGROUP:s@+862
     85	0076  041Ar			     dw	     DGROUP:s@+872
     86	0078  11EBr			     dw	     _cmd_semcreate
     87	007A  0436r			     dw	     DGROUP:s@+900
     88	007C  043Er			     dw	     DGROUP:s@+908
     89	007E  1383r			     dw	     _cmd_semtest
     90	0080  046Dr			     dw	     DGROUP:s@+955
     91	0082  0473r			     dw	     DGROUP:s@+961
     92	0084  13D7r			     dw	     _cmd_semup
     93	0086  04A4r			     dw	     DGROUP:s@+1010
     94	0088  04AFr			     dw	     DGROUP:s@+1021
     95	008A  1410r			     dw	     _cmd_semdestroy
     96	008C  04CDr			     dw	     DGROUP:s@+1051
     97	008E  04D2r			     dw	     DGROUP:s@+1056
     98	0090  1449r			     dw	     _cmd_stop
     99	0092  04FEr			     dw	     DGROUP:s@+1100
    100	0094  0505r			     dw	     DGROUP:s@+1107
    101	0096  1491r			     dw	     _cmd_resume
    102	0098  052Fr			     dw	     DGROUP:s@+1149
    103	009A  053Br			     dw	     DGROUP:s@+1161
    104	009C  14D9r			     dw	     _cmd_start_barber
    105	009E  0557r			     dw	     DGROUP:s@+1189
    106	00A0  0562r			     dw	     DGROUP:s@+1200
    107	00A2  154Er			     dw	     _cmd_stop_barber
    108	00A4  0581r			     dw	     DGROUP:s@+1231
    109	00A6  0592r			     dw	     DGROUP:s@+1248
    110	00A8  158Fr			     dw	     _cmd_add_cliente_barber
    111	00AA			     _DATA   ends
    112	0000			     _TEXT   segment byte public 'CODE'
    113					;
    114					;    void command()
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 3
command.ASM



    115					;
    116					     assume  cs:_TEXT
    117	0000			     _command	     proc    near
    118	0000  55			     push    bp
    119	0001  8B EC			     mov     bp,sp
    120	0003  83 EC 22			     sub     sp,34
    121	0006  56			     push    si
    122	0007  57			     push    di
    123					;
    124					;    {
    125					;      char car,str[10];
    126					;      int numcar;
    127					;      int i,achou,pos;
    128					;      int novalinha,res,argc;
    129					;      char far	*ptrline,far *var;
    130					;
    131					;      /* InicializaÁıes... */
    132					;      numcar =	0;
    133					;
    134	0008  33 F6			     xor     si,si
    135					;
    136					;      end_command = 0;
    137					;
    138	000A  C7 06 062Br 0000		     mov     word ptr DGROUP:end_command,0
    139					;
    140					;      history_ini = 0;
    141					;
    142	0010  C7 06 0214r 0000		     mov     word ptr DGROUP:history_ini,0
    143					;
    144					;      history_nxt = 0;
    145					;
    146	0016  C7 06 0212r 0000		     mov     word ptr DGROUP:history_nxt,0
    147					;
    148					;      history_pos = -1;
    149					;
    150	001C  C7 06 0210r FFFF		     mov     word ptr DGROUP:history_pos,-1
    151					;
    152					;      /* Mensagem inicial */
    153					;      setcolor(7);
    154					;
    155	0022  B8 0007			     mov     ax,7
    156	0025  50			     push    ax
    157	0026  E8 0000e			     call    near ptr _setcolor
    158	0029  59			     pop     cx
    159					;
    160					;      clrscr();
    161					;
    162	002A  E8 0000e			     call    near ptr _clrscr
    163					;
    164					;      setcolor(LOGOCOLOR);
    165					;
    166	002D  B8 0001			     mov     ax,1
    167	0030  50			     push    ax
    168	0031  E8 0000e			     call    near ptr _setcolor
    169	0034  59			     pop     cx
    170					;
    171					;      putstr("			 ‹‹‹‹‹‹‹  ‹‹‹‹‹‹\n");
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 4
command.ASM



    172					;
    173	0035  1E			     push    ds
    174	0036  B8 05AAr			     mov     ax,offset DGROUP:s@+1272
    175	0039  50			     push    ax
    176	003A  E8 0000e			     call    near ptr _putstr
    177	003D  59			     pop     cx
    178	003E  59			     pop     cx
    179					;
    180					;      putstr("	‹‹‹‹‹  ‹  ‹‹‹  ‹ €€   ﬂﬂ  €€  €€  "); setcolor(7); putstr("MinisSistema	    +
    181				     Operacional\n"); setcolor(LOGOCOLOR);
    182					;
    183	003F  1E			     push    ds
    184	0040  B8 05CDr			     mov     ax,offset DGROUP:s@+1307
    185	0043  50			     push    ax
    186	0044  E8 0000e			     call    near ptr _putstr
    187	0047  59			     pop     cx
    188	0048  59			     pop     cx
    189	0049  B8 0007			     mov     ax,7
    190	004C  50			     push    ax
    191	004D  E8 0000e			     call    near ptr _setcolor
    192	0050  59			     pop     cx
    193	0051  1E			     push    ds
    194	0052  B8 05F1r			     mov     ax,offset DGROUP:s@+1343
    195	0055  50			     push    ax
    196	0056  E8 0000e			     call    near ptr _putstr
    197	0059  59			     pop     cx
    198	005A  59			     pop     cx
    199	005B  B8 0001			     mov     ax,1
    200	005E  50			     push    ax
    201	005F  E8 0000e			     call    near ptr _setcolor
    202	0062  59			     pop     cx
    203					;
    204					;      putstr("‹€ € € ‹€ ‹€ € ‹€ ﬂﬂﬂﬂ€€€ €€€  €€  "); setcolor(7); putstr("Vs "); putstr    +
    205				     (miniSO_VERSION); putstr("\n"); setcolor(LOGO
    206					;
    207	0063  1E			     push    ds
    208	0064  B8 060Br			     mov     ax,offset DGROUP:s@+1369
    209	0067  50			     push    ax
    210	0068  E8 0000e			     call    near ptr _putstr
    211	006B  59			     pop     cx
    212	006C  59			     pop     cx
    213	006D  B8 0007			     mov     ax,7
    214	0070  50			     push    ax
    215	0071  E8 0000e			     call    near ptr _setcolor
    216	0074  59			     pop     cx
    217	0075  1E			     push    ds
    218	0076  B8 062Fr			     mov     ax,offset DGROUP:s@+1405
    219	0079  50			     push    ax
    220	007A  E8 0000e			     call    near ptr _putstr
    221	007D  59			     pop     cx
    222	007E  59			     pop     cx
    223	007F  1E			     push    ds
    224	0080  B8 0633r			     mov     ax,offset DGROUP:s@+1409
    225	0083  50			     push    ax
    226	0084  E8 0000e			     call    near ptr _putstr
    227	0087  59			     pop     cx
    228	0088  59			     pop     cx
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 5
command.ASM



    229	0089  1E			     push    ds
    230	008A  B8 0638r			     mov     ax,offset DGROUP:s@+1414
    231	008D  50			     push    ax
    232	008E  E8 0000e			     call    near ptr _putstr
    233	0091  59			     pop     cx
    234	0092  59			     pop     cx
    235	0093  B8 0001			     mov     ax,1
    236	0096  50			     push    ax
    237	0097  E8 0000e			     call    near ptr _setcolor
    238	009A  59			     pop     cx
    239					;
    240					;      putstr("€€ € € €€ €€ € €€ €€‹‹€€€ €€€‹‹€€  "); setcolor(7); putstr("por Roland	    +
    241				     Teodorowitsch\n");
    242					;
    243	009B  1E			     push    ds
    244	009C  B8 063Ar			     mov     ax,offset DGROUP:s@+1416
    245	009F  50			     push    ax
    246	00A0  E8 0000e			     call    near ptr _putstr
    247	00A3  59			     pop     cx
    248	00A4  59			     pop     cx
    249	00A5  B8 0007			     mov     ax,7
    250	00A8  50			     push    ax
    251	00A9  E8 0000e			     call    near ptr _setcolor
    252	00AC  59			     pop     cx
    253	00AD  1E			     push    ds
    254	00AE  B8 065Er			     mov     ax,offset DGROUP:s@+1452
    255	00B1  50			     push    ax
    256	00B2  E8 0000e			     call    near ptr _putstr
    257	00B5  59			     pop     cx
    258	00B6  59			     pop     cx
    259					;
    260					;
    261					;      putstr("\nDigite	'help' ou '?' para ajuda...\n\n");
    262					;
    263	00B7  1E			     push    ds
    264	00B8  B8 0678r			     mov     ax,offset DGROUP:s@+1478
    265	00BB  50			     push    ax
    266	00BC  E8 0000e			     call    near ptr _putstr
    267	00BF  59			     pop     cx
    268	00C0  59			     pop     cx
    269					;
    270					;      /* Inicializa vari·veis de ambiente */
    271					;      command_var_init();
    272					;
    273	00C1  E8 04F7			     call    near ptr command_var_init
    274					;
    275					;      command_var_set("PROMPT","miniSO>");
    276					;
    277	00C4  1E			     push    ds
    278	00C5  B8 06A5r			     mov     ax,offset DGROUP:s@+1523
    279	00C8  50			     push    ax
    280	00C9  1E			     push    ds
    281	00CA  B8 069Er			     mov     ax,offset DGROUP:s@+1516
    282	00CD  50			     push    ax
    283	00CE  E8 066B			     call    near ptr command_var_set
    284	00D1  83 C4 08			     add     sp,8
    285					;
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 6
command.ASM



    286					;      command_var_set("ERRORLEVEL","0");
    287					;
    288	00D4  1E			     push    ds
    289	00D5  B8 06B8r			     mov     ax,offset DGROUP:s@+1542
    290	00D8  50			     push    ax
    291	00D9  1E			     push    ds
    292	00DA  B8 06ADr			     mov     ax,offset DGROUP:s@+1531
    293	00DD  50			     push    ax
    294	00DE  E8 065B			     call    near ptr command_var_set
    295	00E1  83 C4 08			     add     sp,8
    296					;
    297					;      /* Imprime sinal	de pronto */
    298					;      command_showprompt();
    299					;
    300	00E4  E8 0488			     call    near ptr command_showprompt
    301	00E7  E9 0427			     jmp     @1@3362
    302	00EA			     @1@58:
    303					;
    304					;      /* LaÁo para interpretaÁ„o de comandos */
    305					;      while ( !end_command )  {
    306					;	     car=getch();
    307					;
    308	00EA  E8 0000e			     call    near ptr _getch
    309	00ED  88 46 FF			     mov     byte ptr [bp-1],al
    310					;
    311					;	     switch (car)  {
    312					;
    313	00F0  8A 46 FF			     mov     al,byte ptr [bp-1]
    314	00F3  98			     cbw
    315	00F4  89 46 E0			     mov     word ptr [bp-32],ax
    316	00F7  B9 0005			     mov     cx,5
    317	00FA  BB 0531r			     mov     bx,offset @1@C3234
    318	00FD			     @1@142:
    319	00FD  2E: 8B 07			     mov     ax,word ptr cs:[bx]
    320	0100  3B 46 E0			     cmp     ax,word ptr [bp-32]
    321	0103  74 08			     je	     short @1@226
    322	0105  83 C3 02			     add     bx,2
    323	0108  E2 F3			     loop    short @1@142
    324	010A  E9 03EE			     jmp     @1@3306
    325	010D			     @1@226:
    326	010D  2E: FF 67	0A		     jmp     word ptr cs:[bx+10]
    327	0111			     @1@254:
    328					;
    329					;		    case 9:
    330					;			 break;
    331					;
    332	0111  E9 03FD			     jmp     @1@3362
    333	0114			     @1@282:
    334					;
    335					;		    case 8:
    336					;			 if (numcar>0)	{
    337					;
    338	0114  0B F6			     or	     si,si
    339	0116  7E 04			     jle     short @1@338
    340					;
    341					;			    --numcar;
    342					;
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 7
command.ASM



    343	0118  4E			     dec     si
    344					;
    345					;			    command_backspace();
    346					;
    347	0119  E8 0429			     call    near ptr command_backspace
    348	011C			     @1@338:
    349					;
    350					;			 }
    351					;			 break;
    352					;
    353	011C  E9 03F2			     jmp     @1@3362
    354	011F			     @1@366:
    355	011F  EB 04			     jmp     short @1@422
    356	0121			     @1@394:
    357					;
    358					;		    case 27:
    359					;			 /* Limpa a linha de comandos */
    360					;			 while (numcar>0)  {
    361					;			       --numcar;
    362					;
    363	0121  4E			     dec     si
    364					;
    365					;			       command_backspace();
    366					;
    367	0122  E8 0420			     call    near ptr command_backspace
    368	0125			     @1@422:
    369	0125  0B F6			     or	     si,si
    370	0127  7F F8			     jg	     short @1@394
    371					;
    372					;			 }
    373					;			 break;
    374					;
    375	0129  E9 03E5			     jmp     @1@3362
    376	012C			     @1@478:
    377					;
    378					;		    case 0:
    379					;			 car=getch();
    380					;
    381	012C  E8 0000e			     call    near ptr _getch
    382	012F  88 46 FF			     mov     byte ptr [bp-1],al
    383					;
    384					;			 switch	(car)  {
    385					;
    386	0132  8A 46 FF			     mov     al,byte ptr [bp-1]
    387	0135  98			     cbw
    388	0136  89 46 DE			     mov     word ptr [bp-34],ax
    389	0139  B9 0004			     mov     cx,4
    390	013C  BB 0521r			     mov     bx,offset @1@C3330
    391	013F			     @1@562:
    392	013F  2E: 8B 07			     mov     ax,word ptr cs:[bx]
    393	0142  3B 46 DE			     cmp     ax,word ptr [bp-34]
    394	0145  74 08			     je	     short @1@646
    395	0147  83 C3 02			     add     bx,2
    396	014A  E2 F3			     loop    short @1@562
    397	014C  E9 01C0			     jmp     @1@2102
    398	014F			     @1@646:
    399	014F  2E: FF 67	08		     jmp     word ptr cs:[bx+8]
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 8
command.ASM



    400	0153			     @1@674:
    401					;
    402					;				case 65: /* F7 */
    403					;				     history_pos = -1;
    404					;
    405	0153  C7 06 0210r FFFF		     mov     word ptr DGROUP:history_pos,-1
    406	0159  EB 04			     jmp     short @1@730
    407	015B			     @1@702:
    408					;
    409					;				     /*	Limpa a	linha de comandos */
    410					;				     while (numcar>0)  {
    411					;					   --numcar;
    412					;
    413	015B  4E			     dec     si
    414					;
    415					;					   command_backspace();
    416					;
    417	015C  E8 03E6			     call    near ptr command_backspace
    418	015F			     @1@730:
    419	015F  0B F6			     or	     si,si
    420	0161  7F F8			     jg	     short @1@702
    421					;
    422					;				     }
    423					;				     putch('\n');
    424					;
    425	0163  B8 000A			     mov     ax,10
    426	0166  50			     push    ax
    427	0167  E8 0000e			     call    near ptr _putch
    428	016A  59			     pop     cx
    429					;
    430					;				     /*	Imprime	o histÛrico */
    431					;				     for (i=0;i<history_len;++i)  {
    432					;
    433	016B  33 FF			     xor     di,di
    434	016D  EB 25			     jmp     short @1@842
    435	016F			     @1@786:
    436					;
    437					;					 putstr(history[(history_ini+i)%MAXHISTORY]);
    438					;
    439	016F  1E			     push    ds
    440	0170  A1 0214r			     mov     ax,word ptr DGROUP:history_ini
    441	0173  03 C7			     add     ax,di
    442	0175  BB 000A			     mov     bx,10
    443	0178  99			     cwd
    444	0179  F7 FB			     idiv    bx
    445	017B  BB 001F			     mov     bx,31
    446	017E  8B C2			     mov     ax,dx
    447	0180  F7 EB			     imul    bx
    448	0182  05 0218r			     add     ax,offset DGROUP:history
    449	0185  50			     push    ax
    450	0186  E8 0000e			     call    near ptr _putstr
    451	0189  59			     pop     cx
    452	018A  59			     pop     cx
    453					;
    454					;					 putch('\n');
    455					;
    456	018B  B8 000A			     mov     ax,10
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 9
command.ASM



    457	018E  50			     push    ax
    458	018F  E8 0000e			     call    near ptr _putch
    459	0192  59			     pop     cx
    460	0193  47			     inc     di
    461	0194			     @1@842:
    462	0194  3B 3E 0216r		     cmp     di,word ptr DGROUP:history_len
    463	0198  7C D5			     jl	     short @1@786
    464					;
    465					;				     }
    466					;				     command_showprompt();
    467					;
    468	019A  E8 03D2			     call    near ptr command_showprompt
    469					;
    470					;				     break;
    471					;
    472	019D  E9 016F			     jmp     @1@2102
    473	01A0			     @1@898:
    474					;
    475					;				case 75: /* Seta para esquerda */
    476					;				     if	(numcar>0)  {
    477					;
    478	01A0  0B F6			     or	     si,si
    479	01A2  7E 04			     jle     short @1@954
    480					;
    481					;					--numcar;
    482					;
    483	01A4  4E			     dec     si
    484					;
    485					;					command_backspace();
    486					;
    487	01A5  E8 039D			     call    near ptr command_backspace
    488	01A8			     @1@954:
    489					;
    490					;				     }
    491					;				     break;
    492					;
    493	01A8  E9 0164			     jmp     @1@2102
    494	01AB			     @1@982:
    495					;
    496					;				case 72: /* Seta para cima */
    497					;				     if	(history_len>0)	 {
    498					;
    499	01AB  83 3E 0216r 00		     cmp     word ptr DGROUP:history_len,0
    500	01B0  7F 03			     jg	     @@0
    501	01B2  E9 00C3			     jmp     @1@1598
    502	01B5			     @@0:
    503					;
    504					;					novalinha=0;
    505					;
    506	01B5  C7 46 EE 0000		     mov     word ptr [bp-18],0
    507					;
    508					;					if (history_len<MAXHISTORY)  {
    509					;
    510	01BA  83 3E 0216r 0A		     cmp     word ptr DGROUP:history_len,10
    511	01BF  7D 27			     jge     short @1@1178
    512					;
    513					;					   if (history_pos==-1)	 {
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 10
command.ASM



    514					;
    515	01C1  83 3E 0210r FF		     cmp     word ptr DGROUP:history_pos,-1
    516	01C6  75 0E			     jne     short @1@1094
    517					;
    518					;					      history_pos=history_nxt-1;
    519					;
    520	01C8  A1 0212r			     mov     ax,word ptr DGROUP:history_nxt
    521	01CB  48			     dec     ax
    522	01CC  A3 0210r			     mov     word ptr DGROUP:history_pos,ax
    523					;
    524					;					      novalinha=1;
    525					;
    526	01CF  C7 46 EE 0001		     mov     word ptr [bp-18],1
    527					;
    528					;					   }
    529					;
    530	01D4  EB 10			     jmp     short @1@1150
    531	01D6			     @1@1094:
    532					;
    533					;					   else	 {
    534					;					      if (history_pos>0)  {
    535					;
    536	01D6  83 3E 0210r 00		     cmp     word ptr DGROUP:history_pos,0
    537	01DB  7E 09			     jle     short @1@1150
    538					;
    539					;						 history_pos--;
    540					;
    541	01DD  FF 0E 0210r		     dec     word ptr DGROUP:history_pos
    542					;
    543					;						 novalinha=1;
    544					;
    545	01E1  C7 46 EE 0001		     mov     word ptr [bp-18],1
    546	01E6			     @1@1150:
    547					;
    548					;					      }
    549					;					   }
    550					;					}
    551					;
    552	01E6  EB 52			     jmp     short @1@1458
    553	01E8			     @1@1178:
    554					;
    555					;					else  {
    556					;					   if (history_pos==-1)	 {
    557					;
    558	01E8  83 3E 0210r FF		     cmp     word ptr DGROUP:history_pos,-1
    559	01ED  75 1B			     jne     short @1@1290
    560					;
    561					;					      history_pos=history_nxt-1;
    562					;
    563	01EF  A1 0212r			     mov     ax,word ptr DGROUP:history_nxt
    564	01F2  48			     dec     ax
    565	01F3  A3 0210r			     mov     word ptr DGROUP:history_pos,ax
    566					;
    567					;					      if (history_pos<0)
    568					;
    569	01F6  83 3E 0210r 00		     cmp     word ptr DGROUP:history_pos,0
    570	01FB  7D 06			     jge     short @1@1262
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 11
command.ASM



    571					;
    572					;						 history_pos=MAXHISTORY-1;
    573					;
    574	01FD  C7 06 0210r 0009		     mov     word ptr DGROUP:history_pos,9
    575	0203			     @1@1262:
    576					;
    577					;					      novalinha=1;
    578					;
    579	0203  C7 46 EE 0001		     mov     word ptr [bp-18],1
    580					;
    581					;					   }
    582					;
    583	0208  EB 30			     jmp     short @1@1458
    584	020A			     @1@1290:
    585					;
    586					;					   else	 {
    587					;					      if (history_pos!=history_ini)  {
    588					;
    589	020A  A1 0210r			     mov     ax,word ptr DGROUP:history_pos
    590	020D  3B 06 0214r		     cmp     ax,word ptr DGROUP:history_ini
    591	0211  74 27			     je	     short @1@1458
    592					;
    593					;						 novalinha=1;
    594					;
    595	0213  C7 46 EE 0001		     mov     word ptr [bp-18],1
    596					;
    597					;						 if (history_pos>history_ini)
    598					;
    599	0218  A1 0210r			     mov     ax,word ptr DGROUP:history_pos
    600	021B  3B 06 0214r		     cmp     ax,word ptr DGROUP:history_ini
    601	021F  7E 06			     jle     short @1@1374
    602					;
    603					;						    --history_pos;
    604					;
    605	0221  FF 0E 0210r		     dec     word ptr DGROUP:history_pos
    606	0225  EB 13			     jmp     short @1@1458
    607	0227			     @1@1374:
    608					;
    609					;						 else  {  /* history_pos<history_ini */
    610					;						    if (history_pos>0)
    611					;
    612	0227  83 3E 0210r 00		     cmp     word ptr DGROUP:history_pos,0
    613	022C  7E 06			     jle     short @1@1430
    614					;
    615					;						       history_pos--;
    616					;
    617	022E  FF 0E 0210r		     dec     word ptr DGROUP:history_pos
    618	0232  EB 06			     jmp     short @1@1458
    619	0234			     @1@1430:
    620					;
    621					;						    else
    622					;						       history_pos=MAXHISTORY-1;
    623					;
    624	0234  C7 06 0210r 0009		     mov     word ptr DGROUP:history_pos,9
    625	023A			     @1@1458:
    626					;
    627					;						  }
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 12
command.ASM



    628					;					      }
    629					;					   }
    630					;					}
    631					;					if (novalinha)	{
    632					;
    633	023A  83 7E EE 00		     cmp     word ptr [bp-18],0
    634	023E  74 38			     je	     short @1@1598
    635	0240  EB 04			     jmp     short @1@1542
    636	0242			     @1@1514:
    637					;
    638					;					   /* Limpa a linha de comandos	*/
    639					;					   while (numcar>0)  {
    640					;						 --numcar;
    641					;
    642	0242  4E			     dec     si
    643					;
    644					;						 command_backspace();
    645					;
    646	0243  E8 02FF			     call    near ptr command_backspace
    647	0246			     @1@1542:
    648	0246  0B F6			     or	     si,si
    649	0248  7F F8			     jg	     short @1@1514
    650					;
    651					;					   }
    652					;					   strcpy(cmdline,history[history_pos]);
    653					;
    654	024A  1E			     push    ds
    655	024B  A1 0210r			     mov     ax,word ptr DGROUP:history_pos
    656	024E  BA 001F			     mov     dx,31
    657	0251  F7 EA			     imul    dx
    658	0253  05 0218r			     add     ax,offset DGROUP:history
    659	0256  50			     push    ax
    660	0257  1E			     push    ds
    661	0258  B8 060Cr			     mov     ax,offset DGROUP:cmdline
    662	025B  50			     push    ax
    663	025C  E8 0000e			     call    near ptr _strcpy
    664	025F  83 C4 08			     add     sp,8
    665					;
    666					;					   putstr(cmdline);
    667					;
    668	0262  1E			     push    ds
    669	0263  B8 060Cr			     mov     ax,offset DGROUP:cmdline
    670	0266  50			     push    ax
    671	0267  E8 0000e			     call    near ptr _putstr
    672	026A  59			     pop     cx
    673	026B  59			     pop     cx
    674					;
    675					;					   numcar=strlen(cmdline);
    676					;
    677	026C  1E			     push    ds
    678	026D  B8 060Cr			     mov     ax,offset DGROUP:cmdline
    679	0270  50			     push    ax
    680	0271  E8 0000e			     call    near ptr _strlen
    681	0274  59			     pop     cx
    682	0275  59			     pop     cx
    683	0276  8B F0			     mov     si,ax
    684	0278			     @1@1598:
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 13
command.ASM



    685					;
    686					;					}
    687					;				     }
    688					;				     break;
    689					;
    690	0278  E9 0094			     jmp     @1@2102
    691	027B			     @1@1626:
    692					;
    693					;				case 80: /* Seta para baixo */
    694					;				     if	(history_len>0 && history_pos!=-1)  {
    695					;
    696	027B  83 3E 0216r 00		     cmp     word ptr DGROUP:history_len,0
    697	0280  7F 03			     jg	     @@1
    698	0282  E9 0088			     jmp     @1@2074
    699	0285			     @@1:
    700	0285  83 3E 0210r FF		     cmp     word ptr DGROUP:history_pos,-1
    701	028A  75 03			     jne     @@2
    702	028C  EB 7F 90			     jmp     @1@2074
    703	028F			     @@2:
    704					;
    705					;					if (history_len<MAXHISTORY)  {
    706					;
    707	028F  83 3E 0216r 0A		     cmp     word ptr DGROUP:history_len,10
    708	0294  7D 18			     jge     short @1@1822
    709					;
    710					;					   if (history_pos<history_len-1)
    711					;
    712	0296  A1 0216r			     mov     ax,word ptr DGROUP:history_len
    713	0299  48			     dec     ax
    714	029A  3B 06 0210r		     cmp     ax,word ptr DGROUP:history_pos
    715	029E  7E 06			     jle     short @1@1766
    716					;
    717					;					      history_pos++;
    718					;
    719	02A0  FF 06 0210r		     inc     word ptr DGROUP:history_pos
    720	02A4  EB 06			     jmp     short @1@1794
    721	02A6			     @1@1766:
    722					;
    723					;					   else
    724					;					      history_pos = -1;
    725					;
    726	02A6  C7 06 0210r FFFF		     mov     word ptr DGROUP:history_pos,-1
    727	02AC			     @1@1794:
    728					;
    729					;					}
    730					;
    731	02AC  EB 20			     jmp     short @1@1934
    732	02AE			     @1@1822:
    733					;
    734					;					else  {
    735					;					   history_pos++;
    736					;
    737	02AE  FF 06 0210r		     inc     word ptr DGROUP:history_pos
    738					;
    739					;					   if (history_pos>=MAXHISTORY)
    740					;
    741	02B2  83 3E 0210r 0A		     cmp     word ptr DGROUP:history_pos,10
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 14
command.ASM



    742	02B7  7C 06			     jl	     short @1@1878
    743					;
    744					;					      history_pos = 0;
    745					;
    746	02B9  C7 06 0210r 0000		     mov     word ptr DGROUP:history_pos,0
    747	02BF			     @1@1878:
    748					;
    749					;					   if (history_pos==history_nxt)
    750					;
    751	02BF  A1 0210r			     mov     ax,word ptr DGROUP:history_pos
    752	02C2  3B 06 0212r		     cmp     ax,word ptr DGROUP:history_nxt
    753	02C6  75 06			     jne     short @1@1934
    754					;
    755					;					      history_pos = -1;
    756					;
    757	02C8  C7 06 0210r FFFF		     mov     word ptr DGROUP:history_pos,-1
    758	02CE			     @1@1934:
    759	02CE  EB 04			     jmp     short @1@1990
    760	02D0			     @1@1962:
    761					;
    762					;					}
    763					;					/* Limpa a linha de comandos */
    764					;					while (numcar>0)  {
    765					;					      --numcar;
    766					;
    767	02D0  4E			     dec     si
    768					;
    769					;					      command_backspace();
    770					;
    771	02D1  E8 0271			     call    near ptr command_backspace
    772	02D4			     @1@1990:
    773	02D4  0B F6			     or	     si,si
    774	02D6  7F F8			     jg	     short @1@1962
    775					;
    776					;					}
    777					;					if (history_pos!=-1)  {
    778					;
    779	02D8  83 3E 0210r FF		     cmp     word ptr DGROUP:history_pos,-1
    780	02DD  74 2E			     je	     short @1@2074
    781					;
    782					;					   strcpy(cmdline,history[history_pos]);
    783					;
    784	02DF  1E			     push    ds
    785	02E0  A1 0210r			     mov     ax,word ptr DGROUP:history_pos
    786	02E3  BA 001F			     mov     dx,31
    787	02E6  F7 EA			     imul    dx
    788	02E8  05 0218r			     add     ax,offset DGROUP:history
    789	02EB  50			     push    ax
    790	02EC  1E			     push    ds
    791	02ED  B8 060Cr			     mov     ax,offset DGROUP:cmdline
    792	02F0  50			     push    ax
    793	02F1  E8 0000e			     call    near ptr _strcpy
    794	02F4  83 C4 08			     add     sp,8
    795					;
    796					;					   putstr(cmdline);
    797					;
    798	02F7  1E			     push    ds
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 15
command.ASM



    799	02F8  B8 060Cr			     mov     ax,offset DGROUP:cmdline
    800	02FB  50			     push    ax
    801	02FC  E8 0000e			     call    near ptr _putstr
    802	02FF  59			     pop     cx
    803	0300  59			     pop     cx
    804					;
    805					;					   numcar=strlen(cmdline);
    806					;
    807	0301  1E			     push    ds
    808	0302  B8 060Cr			     mov     ax,offset DGROUP:cmdline
    809	0305  50			     push    ax
    810	0306  E8 0000e			     call    near ptr _strlen
    811	0309  59			     pop     cx
    812	030A  59			     pop     cx
    813	030B  8B F0			     mov     si,ax
    814	030D			     @1@2074:
    815					;
    816					;					}
    817					;				     }
    818					;				     break;
    819					;
    820	030D  EB 00			     jmp     short @1@2102
    821	030F			     @1@2102:
    822					;
    823					;			 }
    824					;			 break;
    825					;
    826	030F  E9 01FF			     jmp     @1@3362
    827	0312			     @1@2130:
    828					;
    829					;		    case 13:
    830					;			 history_pos = -1;
    831					;
    832	0312  C7 06 0210r FFFF		     mov     word ptr DGROUP:history_pos,-1
    833					;
    834					;			 putch('\n');
    835					;
    836	0318  B8 000A			     mov     ax,10
    837	031B  50			     push    ax
    838	031C  E8 0000e			     call    near ptr _putch
    839	031F  59			     pop     cx
    840					;
    841					;			 cmdline[numcar]='\0';
    842					;
    843	0320  C6 84 060Cr 00		     mov     byte ptr DGROUP:cmdline[si],0
    844					;
    845					;			 /* Divide a linha de comandos em comando e opÁıes */
    846					;			 ptrline = cmdline;
    847					;
    848	0325  8C 5E E8			     mov     word ptr [bp-24],ds
    849	0328  C7 46 E6 060Cr		     mov     word ptr [bp-26],offset DGROUP:cmdline
    850					;
    851					;			 argc =	0;
    852					;
    853	032D  C7 46 EA 0000		     mov     word ptr [bp-22],0
    854					;
    855					;			 pos = 0;
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 16
command.ASM



    856					;
    857	0332  C7 46 F0 0000		     mov     word ptr [bp-16],0
    858	0337			     @1@2158:
    859	0337  EB 03			     jmp     short @1@2214
    860	0339			     @1@2186:
    861					;
    862					;			 while (1) {
    863					;			       while (*ptrline!='\0' &&	(*ptrline==' ' || *ptrline=='\t'))
    864					;				     ++ptrline;
    865					;
    866	0339  FF 46 E6			     inc     word ptr [bp-26]
    867	033C			     @1@2214:
    868	033C  C4 5E E6			     les     bx,dword ptr [bp-26]
    869	033F  26: 80 3F	00		     cmp     byte ptr es:[bx],0
    870	0343  74 12			     je	     short @1@2298
    871	0345  C4 5E E6			     les     bx,dword ptr [bp-26]
    872	0348  26: 80 3F	20		     cmp     byte ptr es:[bx],32
    873	034C  74 EB			     je	     short @1@2186
    874	034E  C4 5E E6			     les     bx,dword ptr [bp-26]
    875	0351  26: 80 3F	09		     cmp     byte ptr es:[bx],9
    876	0355  74 E2			     je	     short @1@2186
    877	0357			     @1@2298:
    878					;
    879					;			       if (*ptrline=='\0')
    880					;
    881	0357  C4 5E E6			     les     bx,dword ptr [bp-26]
    882	035A  26: 80 3F	00		     cmp     byte ptr es:[bx],0
    883	035E  75 03			     jne     short @1@2354
    884					;
    885					;				  break;
    886					;
    887	0360  E9 00B4			     jmp     @1@2718
    888	0363			     @1@2354:
    889					;
    890					;			       i = 0;
    891					;
    892	0363  33 FF			     xor     di,di
    893	0365  EB 0E			     jmp     short @1@2410
    894	0367			     @1@2382:
    895					;
    896					;			       while (*ptrline!='\0' &&	*ptrline!=' ' && *ptrline!='\t')  {
    897					;				     palavra[i++] = *ptrline;
    898					;
    899	0367  C4 5E E6			     les     bx,dword ptr [bp-26]
    900	036A  26: 8A 07			     mov     al,byte ptr es:[bx]
    901	036D  88 85 05EDr		     mov     byte ptr DGROUP:palavra[di],al
    902	0371  47			     inc     di
    903					;
    904					;				     ++ptrline;
    905					;
    906	0372  FF 46 E6			     inc     word ptr [bp-26]
    907	0375			     @1@2410:
    908	0375  C4 5E E6			     les     bx,dword ptr [bp-26]
    909	0378  26: 80 3F	00		     cmp     byte ptr es:[bx],0
    910	037C  74 12			     je	     short @1@2494
    911	037E  C4 5E E6			     les     bx,dword ptr [bp-26]
    912	0381  26: 80 3F	20		     cmp     byte ptr es:[bx],32
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 17
command.ASM



    913	0385  74 09			     je	     short @1@2494
    914	0387  C4 5E E6			     les     bx,dword ptr [bp-26]
    915	038A  26: 80 3F	09		     cmp     byte ptr es:[bx],9
    916	038E  75 D7			     jne     short @1@2382
    917	0390			     @1@2494:
    918					;
    919					;			       }
    920					;			       palavra[i] = '\0';
    921					;
    922	0390  C6 85 05EDr 00		     mov     byte ptr DGROUP:palavra[di],0
    923					;
    924					;			       if (palavra[0]=='$')  {
    925					;
    926	0395  80 3E 05EDr 24		     cmp     byte ptr DGROUP:palavra,36
    927	039A  75 39			     jne     short @1@2606
    928					;
    929					;				  var =	command_var_value(&palavra[1]);
    930					;
    931	039C  1E			     push    ds
    932	039D  B8 05EEr			     mov     ax,offset DGROUP:palavra+1
    933	03A0  50			     push    ax
    934	03A1  E8 036B			     call    near ptr command_var_value
    935	03A4  59			     pop     cx
    936	03A5  59			     pop     cx
    937	03A6  89 56 E4			     mov     word ptr [bp-28],dx
    938	03A9  89 46 E2			     mov     word ptr [bp-30],ax
    939					;
    940					;				  if (var!=NULL)  {
    941					;
    942	03AC  8B 46 E2			     mov     ax,word ptr [bp-30]
    943	03AF  0B 46 E4			     or	     ax,word ptr [bp-28]
    944	03B2  74 1F			     je	     short @1@2578
    945					;
    946					;				     strcpy(palavra,var);
    947					;
    948	03B4  FF 76 E4			     push    word ptr [bp-28]
    949	03B7  FF 76 E2			     push    word ptr [bp-30]
    950	03BA  1E			     push    ds
    951	03BB  B8 05EDr			     mov     ax,offset DGROUP:palavra
    952	03BE  50			     push    ax
    953	03BF  E8 0000e			     call    near ptr _strcpy
    954	03C2  83 C4 08			     add     sp,8
    955					;
    956					;				     i = strlen(palavra);
    957					;
    958	03C5  1E			     push    ds
    959	03C6  B8 05EDr			     mov     ax,offset DGROUP:palavra
    960	03C9  50			     push    ax
    961	03CA  E8 0000e			     call    near ptr _strlen
    962	03CD  59			     pop     cx
    963	03CE  59			     pop     cx
    964	03CF  8B F8			     mov     di,ax
    965					;
    966					;				  }
    967					;
    968	03D1  EB 02			     jmp     short @1@2606
    969	03D3			     @1@2578:
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 18
command.ASM



    970					;
    971					;				  else
    972					;				     continue;
    973					;
    974	03D3  EB 3F			     jmp     short @1@2690
    975	03D5			     @1@2606:
    976					;
    977					;
    978					;			       }
    979					;			       strcpy(&argline[pos],palavra);
    980					;
    981	03D5  1E			     push    ds
    982	03D6  B8 05EDr			     mov     ax,offset DGROUP:palavra
    983	03D9  50			     push    ax
    984	03DA  1E			     push    ds
    985	03DB  8B 46 F0			     mov     ax,word ptr [bp-16]
    986	03DE  05 038Er			     add     ax,offset DGROUP:argline
    987	03E1  50			     push    ax
    988	03E2  E8 0000e			     call    near ptr _strcpy
    989	03E5  83 C4 08			     add     sp,8
    990					;
    991					;			       argv[argc++] = &argline[pos];
    992					;
    993	03E8  8B 46 F0			     mov     ax,word ptr [bp-16]
    994	03EB  05 038Er			     add     ax,offset DGROUP:argline
    995	03EE  8B 5E EA			     mov     bx,word ptr [bp-22]
    996	03F1  B1 02			     mov     cl,2
    997	03F3  D3 E3			     shl     bx,cl
    998	03F5  8C 9F 0350r		     mov     word ptr DGROUP:argv[bx+2],ds
    999	03F9  89 87 034Er		     mov     word ptr DGROUP:argv[bx],ax
   1000	03FD  FF 46 EA			     inc     word ptr [bp-22]
   1001					;
   1002					;			       pos+= (i+1);
   1003					;
   1004	0400  8B C7			     mov     ax,di
   1005	0402  40			     inc     ax
   1006	0403  01 46 F0			     add     word ptr [bp-16],ax
   1007					;
   1008					;			       if (*ptrline=='\0')
   1009					;
   1010	0406  C4 5E E6			     les     bx,dword ptr [bp-26]
   1011	0409  26: 80 3F	00		     cmp     byte ptr es:[bx],0
   1012	040D  75 02			     jne     short @1@2662
   1013					;
   1014					;				  break;
   1015					;
   1016	040F  EB 06			     jmp     short @1@2718
   1017	0411			     @1@2662:
   1018					;
   1019					;			       ++ptrline;
   1020					;
   1021	0411  FF 46 E6			     inc     word ptr [bp-26]
   1022	0414			     @1@2690:
   1023	0414  E9 FF20			     jmp     @1@2158
   1024	0417			     @1@2718:
   1025					;
   1026					;			 }
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 19
command.ASM



   1027					;			 /* Se È comando vazio n„o faz nada */
   1028					;			 if (argc==0)  {
   1029					;
   1030	0417  83 7E EA 00		     cmp     word ptr [bp-22],0
   1031	041B  75 06			     jne     short @1@2774
   1032					;
   1033					;			    command_showprompt();
   1034					;
   1035	041D  E8 014F			     call    near ptr command_showprompt
   1036					;
   1037					;			    break;
   1038					;
   1039	0420  E9 00EE			     jmp     @1@3362
   1040	0423			     @1@2774:
   1041					;
   1042					;			 }
   1043					;			 /* Salva linha	de comando no histÛrico	*/
   1044					;			 strcpy	(history[history_nxt],cmdline);
   1045					;
   1046	0423  1E			     push    ds
   1047	0424  B8 060Cr			     mov     ax,offset DGROUP:cmdline
   1048	0427  50			     push    ax
   1049	0428  1E			     push    ds
   1050	0429  A1 0212r			     mov     ax,word ptr DGROUP:history_nxt
   1051	042C  BA 001F			     mov     dx,31
   1052	042F  F7 EA			     imul    dx
   1053	0431  05 0218r			     add     ax,offset DGROUP:history
   1054	0434  50			     push    ax
   1055	0435  E8 0000e			     call    near ptr _strcpy
   1056	0438  83 C4 08			     add     sp,8
   1057					;
   1058					;			 if (history_len<MAXHISTORY)
   1059					;
   1060	043B  83 3E 0216r 0A		     cmp     word ptr DGROUP:history_len,10
   1061	0440  7D 06			     jge     short @1@2830
   1062					;
   1063					;			    ++history_len;
   1064					;
   1065	0442  FF 06 0216r		     inc     word ptr DGROUP:history_len
   1066	0446  EB 13			     jmp     short @1@2914
   1067	0448			     @1@2830:
   1068					;
   1069					;			 else  {
   1070					;			    if (history_ini==MAXHISTORY-1)
   1071					;
   1072	0448  83 3E 0214r 09		     cmp     word ptr DGROUP:history_ini,9
   1073	044D  75 08			     jne     short @1@2886
   1074					;
   1075					;			       history_ini = 0;
   1076					;
   1077	044F  C7 06 0214r 0000		     mov     word ptr DGROUP:history_ini,0
   1078	0455  EB 04			     jmp     short @1@2914
   1079	0457			     @1@2886:
   1080					;
   1081					;			    else
   1082					;			       ++history_ini;
   1083					;
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 20
command.ASM



   1084	0457  FF 06 0214r		     inc     word ptr DGROUP:history_ini
   1085	045B			     @1@2914:
   1086					;
   1087					;			 }
   1088					;			 if (history_nxt==MAXHISTORY-1)
   1089					;
   1090	045B  83 3E 0212r 09		     cmp     word ptr DGROUP:history_nxt,9
   1091	0460  75 08			     jne     short @1@2970
   1092					;
   1093					;			    history_nxt	= 0;
   1094					;
   1095	0462  C7 06 0212r 0000		     mov     word ptr DGROUP:history_nxt,0
   1096	0468  EB 04			     jmp     short @1@2998
   1097	046A			     @1@2970:
   1098					;
   1099					;			 else
   1100					;			    ++history_nxt;
   1101					;
   1102	046A  FF 06 0212r		     inc     word ptr DGROUP:history_nxt
   1103	046E			     @1@2998:
   1104					;
   1105					;			 /* Verifica qual È o comando ... */
   1106					;			 achou = 0;
   1107					;
   1108	046E  C7 46 F2 0000		     mov     word ptr [bp-14],0
   1109					;
   1110					;			 for (i=0;i<MAXCOMMANDS;++i)  {
   1111					;
   1112	0473  33 FF			     xor     di,di
   1113	0475  EB 28			     jmp     short @1@3110
   1114	0477			     @1@3026:
   1115					;
   1116					;			     if	(strcmp(argv[0],commands[i].name)==0)  {
   1117					;
   1118	0477  1E			     push    ds
   1119	0478  8B C7			     mov     ax,di
   1120	047A  BA 0006			     mov     dx,6
   1121	047D  F7 EA			     imul    dx
   1122	047F  8B D8			     mov     bx,ax
   1123	0481  FF B7 0002r		     push    word ptr DGROUP:commands[bx]
   1124	0485  FF 36 0350r		     push    word ptr DGROUP:argv+2
   1125	0489  FF 36 034Er		     push    word ptr DGROUP:argv
   1126	048D  E8 0000e			     call    near ptr _strcmp
   1127	0490  83 C4 08			     add     sp,8
   1128	0493  0B C0			     or	     ax,ax
   1129	0495  75 07			     jne     short @1@3082
   1130					;
   1131					;				achou=1;
   1132					;
   1133	0497  C7 46 F2 0001		     mov     word ptr [bp-14],1
   1134					;
   1135					;				break;
   1136					;
   1137	049C  EB 06			     jmp     short @1@3138
   1138	049E			     @1@3082:
   1139	049E  47			     inc     di
   1140	049F			     @1@3110:
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 21
command.ASM



   1141	049F  83 FF 1C			     cmp     di,28
   1142	04A2  7C D3			     jl	     short @1@3026
   1143	04A4			     @1@3138:
   1144					;
   1145					;			     }
   1146					;			 }
   1147					;
   1148					;			 /* Executa o comando */
   1149					;			 if (achou)  {
   1150					;
   1151	04A4  83 7E F2 00		     cmp     word ptr [bp-14],0
   1152	04A8  74 39			     je	     short @1@3194
   1153					;
   1154					;			    res	= commands[i].code(argc,argv);
   1155					;
   1156	04AA  B8 034Er			     mov     ax,offset DGROUP:argv
   1157	04AD  50			     push    ax
   1158	04AE  FF 76 EA			     push    word ptr [bp-22]
   1159	04B1  8B C7			     mov     ax,di
   1160	04B3  BA 0006			     mov     dx,6
   1161	04B6  F7 EA			     imul    dx
   1162	04B8  8B D8			     mov     bx,ax
   1163	04BA  FF 97 0006r		     call    word ptr DGROUP:commands[bx+4]
   1164	04BE  59			     pop     cx
   1165	04BF  59			     pop     cx
   1166	04C0  89 46 EC			     mov     word ptr [bp-20],ax
   1167					;
   1168					;			    inttostr(str,res);
   1169					;
   1170	04C3  FF 76 EC			     push    word ptr [bp-20]
   1171	04C6  16			     push    ss
   1172	04C7  8D 46 F4			     lea     ax,word ptr [bp-12]
   1173	04CA  50			     push    ax
   1174	04CB  E8 0000e			     call    near ptr _inttostr
   1175	04CE  83 C4 06			     add     sp,6
   1176					;
   1177					;			    command_var_set("ERRORLEVEL",str);
   1178					;
   1179	04D1  16			     push    ss
   1180	04D2  8D 46 F4			     lea     ax,word ptr [bp-12]
   1181	04D5  50			     push    ax
   1182	04D6  1E			     push    ds
   1183	04D7  B8 06BAr			     mov     ax,offset DGROUP:s@+1544
   1184	04DA  50			     push    ax
   1185	04DB  E8 025E			     call    near ptr command_var_set
   1186	04DE  83 C4 08			     add     sp,8
   1187					;
   1188					;			 }
   1189					;
   1190	04E1  EB 0A			     jmp     short @1@3222
   1191	04E3			     @1@3194:
   1192					;
   1193					;			 else
   1194					;			    putstr("Erro: comando desconhecido!\n");
   1195					;
   1196	04E3  1E			     push    ds
   1197	04E4  B8 06C5r			     mov     ax,offset DGROUP:s@+1555
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 22
command.ASM



   1198	04E7  50			     push    ax
   1199	04E8  E8 0000e			     call    near ptr _putstr
   1200	04EB  59			     pop     cx
   1201	04EC  59			     pop     cx
   1202	04ED			     @1@3222:
   1203					;
   1204					;
   1205					;			 if (!end_command)
   1206					;
   1207	04ED  83 3E 062Br 00		     cmp     word ptr DGROUP:end_command,0
   1208	04F2  75 03			     jne     short @1@3278
   1209					;
   1210					;			    command_showprompt();
   1211					;
   1212	04F4  E8 0078			     call    near ptr command_showprompt
   1213	04F7			     @1@3278:
   1214					;
   1215					;
   1216					;			 numcar=0;
   1217					;
   1218	04F7  33 F6			     xor     si,si
   1219					;
   1220					;			 break;
   1221					;
   1222	04F9  EB 16			     jmp     short @1@3362
   1223	04FB			     @1@3306:
   1224					;
   1225					;		    default:
   1226					;			 if (numcar<MAXLINE)  {
   1227					;
   1228	04FB  83 FE 1E			     cmp     si,30
   1229	04FE  7D 11			     jge     short @1@3362
   1230					;
   1231					;			    putch(car);
   1232					;
   1233	0500  8A 46 FF			     mov     al,byte ptr [bp-1]
   1234	0503  98			     cbw
   1235	0504  50			     push    ax
   1236	0505  E8 0000e			     call    near ptr _putch
   1237	0508  59			     pop     cx
   1238					;
   1239					;			    cmdline[numcar++]=car;
   1240					;
   1241	0509  8A 46 FF			     mov     al,byte ptr [bp-1]
   1242	050C  88 84 060Cr		     mov     byte ptr DGROUP:cmdline[si],al
   1243	0510  46			     inc     si
   1244	0511			     @1@3362:
   1245	0511  83 3E 062Br 00		     cmp     word ptr DGROUP:end_command,0
   1246	0516  75 03			     jne     @@3
   1247	0518  E9 FBCF			     jmp     @1@58
   1248	051B			     @@3:
   1249					;
   1250					;			 }
   1251					;	     }
   1252					;      }
   1253					;
   1254					;    }
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 23
command.ASM



   1255					;
   1256	051B  5F			     pop     di
   1257	051C  5E			     pop     si
   1258	051D  8B E5			     mov     sp,bp
   1259	051F  5D			     pop     bp
   1260	0520  C3			     ret
   1261	0521			     _command	     endp
   1262	0521			     @1@C3330	     label   word
   1263	0521  41			     db	     65
   1264	0522  00			     db	     0
   1265	0523  48			     db	     72
   1266	0524  00			     db	     0
   1267	0525  4B			     db	     75
   1268	0526  00			     db	     0
   1269	0527  50			     db	     80
   1270	0528  00			     db	     0
   1271	0529  0153r			     dw	     @1@674
   1272	052B  01ABr			     dw	     @1@982
   1273	052D  01A0r			     dw	     @1@898
   1274	052F  027Br			     dw	     @1@1626
   1275	0531			     @1@C3234	     label   word
   1276	0531  00			     db	     0
   1277	0532  00			     db	     0
   1278	0533  08			     db	     8
   1279	0534  00			     db	     0
   1280	0535  09			     db	     9
   1281	0536  00			     db	     0
   1282	0537  0D			     db	     13
   1283	0538  00			     db	     0
   1284	0539  1B			     db	     27
   1285	053A  00			     db	     0
   1286	053B  012Cr			     dw	     @1@478
   1287	053D  0114r			     dw	     @1@282
   1288	053F  0111r			     dw	     @1@254
   1289	0541  0312r			     dw	     @1@2130
   1290	0543  011Fr			     dw	     @1@366
   1291					;
   1292					;    static void command_backspace()
   1293					;
   1294					     assume  cs:_TEXT
   1295	0545			     command_backspace	     proc    near
   1296	0545  55			     push    bp
   1297	0546  8B EC			     mov     bp,sp
   1298	0548  56			     push    si
   1299	0549  57			     push    di
   1300					;
   1301					;    {
   1302					;      int x,y;
   1303					;
   1304					;      x = wherex();
   1305					;
   1306	054A  E8 0000e			     call    near ptr _wherex
   1307	054D  8B F0			     mov     si,ax
   1308					;
   1309					;      y = wherey();
   1310					;
   1311	054F  E8 0000e			     call    near ptr _wherey
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 24
command.ASM



   1312	0552  8B F8			     mov     di,ax
   1313					;
   1314					;      --x;
   1315					;
   1316	0554  4E			     dec     si
   1317					;
   1318					;      gotoxy(x,y);
   1319					;
   1320	0555  57			     push    di
   1321	0556  56			     push    si
   1322	0557  E8 0000e			     call    near ptr _gotoxy
   1323	055A  59			     pop     cx
   1324	055B  59			     pop     cx
   1325					;
   1326					;      putch(' ');
   1327					;
   1328	055C  B8 0020			     mov     ax,32
   1329	055F  50			     push    ax
   1330	0560  E8 0000e			     call    near ptr _putch
   1331	0563  59			     pop     cx
   1332					;
   1333					;      gotoxy(x,y);
   1334					;
   1335	0564  57			     push    di
   1336	0565  56			     push    si
   1337	0566  E8 0000e			     call    near ptr _gotoxy
   1338	0569  59			     pop     cx
   1339	056A  59			     pop     cx
   1340					;
   1341					;    }
   1342					;
   1343	056B  5F			     pop     di
   1344	056C  5E			     pop     si
   1345	056D  5D			     pop     bp
   1346	056E  C3			     ret
   1347	056F			     command_backspace	     endp
   1348					;
   1349					;    static void command_showprompt()
   1350					;
   1351					     assume  cs:_TEXT
   1352	056F			     command_showprompt	     proc    near
   1353	056F  55			     push    bp
   1354	0570  8B EC			     mov     bp,sp
   1355	0572  83 EC 06			     sub     sp,6
   1356					;
   1357					;    {
   1358					;      char cor;
   1359					;      char far	*prompt;
   1360					;
   1361					;      prompt =	command_var_value("PROMPT");
   1362					;
   1363	0575  1E			     push    ds
   1364	0576  B8 06E2r			     mov     ax,offset DGROUP:s@+1584
   1365	0579  50			     push    ax
   1366	057A  E8 0192			     call    near ptr command_var_value
   1367	057D  59			     pop     cx
   1368	057E  59			     pop     cx
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 25
command.ASM



   1369	057F  89 56 FC			     mov     word ptr [bp-4],dx
   1370	0582  89 46 FA			     mov     word ptr [bp-6],ax
   1371					;
   1372					;      if (prompt!=NULL)  {
   1373					;
   1374	0585  8B 46 FA			     mov     ax,word ptr [bp-6]
   1375	0588  0B 46 FC			     or	     ax,word ptr [bp-4]
   1376	058B  74 22			     je	     short @3@86
   1377					;
   1378					;	  cor =	getcolor();
   1379					;
   1380	058D  E8 0000e			     call    near ptr _getcolor
   1381	0590  88 46 FF			     mov     byte ptr [bp-1],al
   1382					;
   1383					;	  setcolor(PROMPTCOLOR);
   1384					;
   1385	0593  B8 0009			     mov     ax,9
   1386	0596  50			     push    ax
   1387	0597  E8 0000e			     call    near ptr _setcolor
   1388	059A  59			     pop     cx
   1389					;
   1390					;	  putstr(prompt);
   1391					;
   1392	059B  FF 76 FC			     push    word ptr [bp-4]
   1393	059E  FF 76 FA			     push    word ptr [bp-6]
   1394	05A1  E8 0000e			     call    near ptr _putstr
   1395	05A4  59			     pop     cx
   1396	05A5  59			     pop     cx
   1397					;
   1398					;	  setcolor(cor);
   1399					;
   1400	05A6  8A 46 FF			     mov     al,byte ptr [bp-1]
   1401	05A9  98			     cbw
   1402	05AA  50			     push    ax
   1403	05AB  E8 0000e			     call    near ptr _setcolor
   1404	05AE  59			     pop     cx
   1405	05AF			     @3@86:
   1406					;
   1407					;      }
   1408					;      putch(' ');
   1409					;
   1410	05AF  B8 0020			     mov     ax,32
   1411	05B2  50			     push    ax
   1412	05B3  E8 0000e			     call    near ptr _putch
   1413	05B6  59			     pop     cx
   1414					;
   1415					;    }
   1416					;
   1417	05B7  8B E5			     mov     sp,bp
   1418	05B9  5D			     pop     bp
   1419	05BA  C3			     ret
   1420	05BB			     command_showprompt	     endp
   1421					;
   1422					;    static void command_var_init()
   1423					;
   1424					     assume  cs:_TEXT
   1425	05BB			     command_var_init	     proc    near
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 26
command.ASM



   1426	05BB  55			     push    bp
   1427	05BC  8B EC			     mov     bp,sp
   1428					;
   1429					;    {
   1430					;      int i;
   1431					;
   1432					;      for (i=0;i<VAR_MAX;++i)	{
   1433					;
   1434	05BE  33 C9			     xor     cx,cx
   1435	05C0  EB 1D			     jmp     short @4@114
   1436	05C2			     @4@58:
   1437					;
   1438					;	   var[i].name[0]='\0';
   1439					;
   1440	05C2  8B C1			     mov     ax,cx
   1441	05C4  BA 0032			     mov     dx,50
   1442	05C7  F7 EA			     imul    dx
   1443	05C9  8B D8			     mov     bx,ax
   1444	05CB  C6 87 001Cr 00		     mov     byte ptr DGROUP:var[bx],0
   1445					;
   1446					;	   var[i].value[0]='\0';
   1447					;
   1448	05D0  8B C1			     mov     ax,cx
   1449	05D2  BA 0032			     mov     dx,50
   1450	05D5  F7 EA			     imul    dx
   1451	05D7  8B D8			     mov     bx,ax
   1452	05D9  C6 87 0029r 00		     mov     byte ptr DGROUP:var[bx+13],0
   1453	05DE  41			     inc     cx
   1454	05DF			     @4@114:
   1455	05DF  83 F9 0A			     cmp     cx,10
   1456	05E2  7C DE			     jl	     short @4@58
   1457					;
   1458					;      }
   1459					;      num_var = 0;
   1460					;
   1461	05E4  C7 06 0000r 0000		     mov     word ptr DGROUP:num_var,0
   1462					;
   1463					;    }
   1464					;
   1465	05EA  5D			     pop     bp
   1466	05EB  C3			     ret
   1467	05EC			     command_var_init	     endp
   1468					;
   1469					;    static int	command_var_nextfree()
   1470					;
   1471					     assume  cs:_TEXT
   1472	05EC			     command_var_nextfree    proc    near
   1473	05EC  55			     push    bp
   1474	05ED  8B EC			     mov     bp,sp
   1475					;
   1476					;    {
   1477					;      int i;
   1478					;
   1479					;      if (num_var>=VAR_MAX)
   1480					;
   1481	05EF  83 3E 0000r 0A		     cmp     word ptr DGROUP:num_var,10
   1482	05F4  7C 05			     jl	     short @5@114
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 27
command.ASM



   1483	05F6			     @5@58:
   1484					;
   1485					;	  return -1;
   1486					;
   1487	05F6  B8 FFFF			     mov     ax,-1
   1488	05F9			     @5@86:
   1489	05F9  EB 20			     jmp     short @5@282
   1490	05FB			     @5@114:
   1491					;
   1492					;      for (i=0;i<VAR_MAX;++i)
   1493					;
   1494	05FB  33 C9			     xor     cx,cx
   1495	05FD  EB 15			     jmp     short @5@226
   1496	05FF			     @5@142:
   1497					;
   1498					;	   if (var[i].name[0]=='\0')
   1499					;
   1500	05FF  8B C1			     mov     ax,cx
   1501	0601  BA 0032			     mov     dx,50
   1502	0604  F7 EA			     imul    dx
   1503	0606  8B D8			     mov     bx,ax
   1504	0608  80 BF 001Cr 00		     cmp     byte ptr DGROUP:var[bx],0
   1505	060D  75 04			     jne     short @5@198
   1506					;
   1507					;	      return i;
   1508					;
   1509	060F  8B C1			     mov     ax,cx
   1510	0611  EB E6			     jmp     short @5@86
   1511	0613			     @5@198:
   1512	0613  41			     inc     cx
   1513	0614			     @5@226:
   1514	0614  83 F9 0A			     cmp     cx,10
   1515	0617  7C E6			     jl	     short @5@142
   1516	0619  EB DB			     jmp     short @5@58
   1517	061B			     @5@282:
   1518					;
   1519					;      return -1;
   1520					;    }
   1521					;
   1522	061B  5D			     pop     bp
   1523	061C  C3			     ret
   1524	061D			     command_var_nextfree    endp
   1525					;
   1526					;    static void command_var_list()
   1527					;
   1528					     assume  cs:_TEXT
   1529	061D			     command_var_list	     proc    near
   1530	061D  55			     push    bp
   1531	061E  8B EC			     mov     bp,sp
   1532	0620  83 EC 02			     sub     sp,2
   1533	0623  56			     push    si
   1534					;
   1535					;    {
   1536					;      int i;
   1537					;      char cor;
   1538					;
   1539					;      cor = getcolor();
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 28
command.ASM



   1540					;
   1541	0624  E8 0000e			     call    near ptr _getcolor
   1542	0627  88 46 FF			     mov     byte ptr [bp-1],al
   1543					;
   1544					;      for (i=0;i<VAR_MAX;++i)	{
   1545					;
   1546	062A  33 F6			     xor     si,si
   1547	062C  EB 54			     jmp     short @6@142
   1548	062E			     @6@58:
   1549					;
   1550					;	   if (var[i].name[0]!='\0')  {
   1551					;
   1552	062E  8B C6			     mov     ax,si
   1553	0630  BA 0032			     mov     dx,50
   1554	0633  F7 EA			     imul    dx
   1555	0635  8B D8			     mov     bx,ax
   1556	0637  80 BF 001Cr 00		     cmp     byte ptr DGROUP:var[bx],0
   1557	063C  74 43			     je	     short @6@114
   1558					;
   1559					;	      putstr(var[i].name);
   1560					;
   1561	063E  1E			     push    ds
   1562	063F  8B C6			     mov     ax,si
   1563	0641  BA 0032			     mov     dx,50
   1564	0644  F7 EA			     imul    dx
   1565	0646  05 001Cr			     add     ax,offset DGROUP:var
   1566	0649  50			     push    ax
   1567	064A  E8 0000e			     call    near ptr _putstr
   1568	064D  59			     pop     cx
   1569	064E  59			     pop     cx
   1570					;
   1571					;	      putch('=');
   1572					;
   1573	064F  B8 003D			     mov     ax,61
   1574	0652  50			     push    ax
   1575	0653  E8 0000e			     call    near ptr _putch
   1576	0656  59			     pop     cx
   1577					;
   1578					;	      setcolor(VARCOLOR);
   1579					;
   1580	0657  B8 000E			     mov     ax,14
   1581	065A  50			     push    ax
   1582	065B  E8 0000e			     call    near ptr _setcolor
   1583	065E  59			     pop     cx
   1584					;
   1585					;	      putstr(var[i].value);
   1586					;
   1587	065F  1E			     push    ds
   1588	0660  8B C6			     mov     ax,si
   1589	0662  BA 0032			     mov     dx,50
   1590	0665  F7 EA			     imul    dx
   1591	0667  05 0029r			     add     ax,offset DGROUP:var+13
   1592	066A  50			     push    ax
   1593	066B  E8 0000e			     call    near ptr _putstr
   1594	066E  59			     pop     cx
   1595	066F  59			     pop     cx
   1596					;
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 29
command.ASM



   1597					;	      setcolor(cor);
   1598					;
   1599	0670  8A 46 FF			     mov     al,byte ptr [bp-1]
   1600	0673  98			     cbw
   1601	0674  50			     push    ax
   1602	0675  E8 0000e			     call    near ptr _setcolor
   1603	0678  59			     pop     cx
   1604					;
   1605					;	      putch('\n');
   1606					;
   1607	0679  B8 000A			     mov     ax,10
   1608	067C  50			     push    ax
   1609	067D  E8 0000e			     call    near ptr _putch
   1610	0680  59			     pop     cx
   1611	0681			     @6@114:
   1612	0681  46			     inc     si
   1613	0682			     @6@142:
   1614	0682  83 FE 0A			     cmp     si,10
   1615	0685  7C A7			     jl	     short @6@58
   1616					;
   1617					;	   }
   1618					;      }
   1619					;    }
   1620					;
   1621	0687  5E			     pop     si
   1622	0688  8B E5			     mov     sp,bp
   1623	068A  5D			     pop     bp
   1624	068B  C3			     ret
   1625	068C			     command_var_list	     endp
   1626					;
   1627					;    static int	 command_var_search(char far *nome)
   1628					;
   1629					     assume  cs:_TEXT
   1630	068C			     command_var_search	     proc    near
   1631	068C  55			     push    bp
   1632	068D  8B EC			     mov     bp,sp
   1633	068F  56			     push    si
   1634					;
   1635					;    {
   1636					;      int i;
   1637					;
   1638					;      if (nome[0] == '\0')
   1639					;
   1640	0690  C4 5E 04			     les     bx,dword ptr [bp+4]
   1641	0693  26: 80 3F	00		     cmp     byte ptr es:[bx],0
   1642	0697  75 05			     jne     short @7@114
   1643	0699			     @7@58:
   1644					;
   1645					;	  return -1;
   1646					;
   1647	0699  B8 FFFF			     mov     ax,-1
   1648	069C			     @7@86:
   1649	069C  EB 2C			     jmp     short @7@282
   1650	069E			     @7@114:
   1651					;
   1652					;      for (i=0;i<VAR_MAX;++i)	{
   1653					;
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 30
command.ASM



   1654	069E  33 F6			     xor     si,si
   1655	06A0  EB 21			     jmp     short @7@226
   1656	06A2			     @7@142:
   1657					;
   1658					;	   if (strcmp(nome,var[i].name)==0)
   1659					;
   1660	06A2  1E			     push    ds
   1661	06A3  8B C6			     mov     ax,si
   1662	06A5  BA 0032			     mov     dx,50
   1663	06A8  F7 EA			     imul    dx
   1664	06AA  05 001Cr			     add     ax,offset DGROUP:var
   1665	06AD  50			     push    ax
   1666	06AE  FF 76 06			     push    word ptr [bp+6]
   1667	06B1  FF 76 04			     push    word ptr [bp+4]
   1668	06B4  E8 0000e			     call    near ptr _strcmp
   1669	06B7  83 C4 08			     add     sp,8
   1670	06BA  0B C0			     or	     ax,ax
   1671	06BC  75 04			     jne     short @7@198
   1672					;
   1673					;	      return i;
   1674					;
   1675	06BE  8B C6			     mov     ax,si
   1676	06C0  EB DA			     jmp     short @7@86
   1677	06C2			     @7@198:
   1678	06C2  46			     inc     si
   1679	06C3			     @7@226:
   1680	06C3  83 FE 0A			     cmp     si,10
   1681	06C6  7C DA			     jl	     short @7@142
   1682	06C8  EB CF			     jmp     short @7@58
   1683	06CA			     @7@282:
   1684					;
   1685					;      }
   1686					;      return -1;
   1687					;    }
   1688					;
   1689	06CA  5E			     pop     si
   1690	06CB  5D			     pop     bp
   1691	06CC  C3			     ret
   1692	06CD			     command_var_search	     endp
   1693					;
   1694					;    static int	 command_var_unset(char	far *nome)
   1695					;
   1696					     assume  cs:_TEXT
   1697	06CD			     command_var_unset	     proc    near
   1698	06CD  55			     push    bp
   1699	06CE  8B EC			     mov     bp,sp
   1700	06D0  56			     push    si
   1701					;
   1702					;    {
   1703					;      int i;
   1704					;
   1705					;      i = command_var_search(nome);
   1706					;
   1707	06D1  FF 76 06			     push    word ptr [bp+6]
   1708	06D4  FF 76 04			     push    word ptr [bp+4]
   1709	06D7  E8 FFB2			     call    near ptr command_var_search
   1710	06DA  59			     pop     cx
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 31
command.ASM



   1711	06DB  59			     pop     cx
   1712	06DC  8B F0			     mov     si,ax
   1713					;
   1714					;      if (i==-1)
   1715					;
   1716	06DE  83 FE FF			     cmp     si,-1
   1717	06E1  75 05			     jne     short @8@114
   1718					;
   1719					;	  return -1;
   1720					;
   1721	06E3  B8 FFFF			     mov     ax,-1
   1722	06E6			     @8@86:
   1723	06E6  EB 24			     jmp     short @8@142
   1724	06E8			     @8@114:
   1725					;
   1726					;      var[i].name[0]='\0';
   1727					;
   1728	06E8  8B C6			     mov     ax,si
   1729	06EA  BA 0032			     mov     dx,50
   1730	06ED  F7 EA			     imul    dx
   1731	06EF  8B D8			     mov     bx,ax
   1732	06F1  C6 87 001Cr 00		     mov     byte ptr DGROUP:var[bx],0
   1733					;
   1734					;      var[i].value[0]='\0';
   1735					;
   1736	06F6  8B C6			     mov     ax,si
   1737	06F8  BA 0032			     mov     dx,50
   1738	06FB  F7 EA			     imul    dx
   1739	06FD  8B D8			     mov     bx,ax
   1740	06FF  C6 87 0029r 00		     mov     byte ptr DGROUP:var[bx+13],0
   1741					;
   1742					;      --num_var;
   1743					;
   1744	0704  FF 0E 0000r		     dec     word ptr DGROUP:num_var
   1745					;
   1746					;      return 0;
   1747					;
   1748	0708  33 C0			     xor     ax,ax
   1749	070A  EB DA			     jmp     short @8@86
   1750	070C			     @8@142:
   1751					;
   1752					;    }
   1753					;
   1754	070C  5E			     pop     si
   1755	070D  5D			     pop     bp
   1756	070E  C3			     ret
   1757	070F			     command_var_unset	     endp
   1758					;
   1759					;    static char far *command_var_value(char far *nome)
   1760					;
   1761					     assume  cs:_TEXT
   1762	070F			     command_var_value	     proc    near
   1763	070F  55			     push    bp
   1764	0710  8B EC			     mov     bp,sp
   1765	0712  56			     push    si
   1766					;
   1767					;    {
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 32
command.ASM



   1768					;      int i;
   1769					;
   1770					;      i = command_var_search(nome);
   1771					;
   1772	0713  FF 76 06			     push    word ptr [bp+6]
   1773	0716  FF 76 04			     push    word ptr [bp+4]
   1774	0719  E8 FF70			     call    near ptr command_var_search
   1775	071C  59			     pop     cx
   1776	071D  59			     pop     cx
   1777	071E  8B F0			     mov     si,ax
   1778					;
   1779					;      if (i==-1)
   1780					;
   1781	0720  83 FE FF			     cmp     si,-1
   1782	0723  75 06			     jne     short @9@114
   1783					;
   1784					;	  return NULL;
   1785					;
   1786	0725  33 D2			     xor     dx,dx
   1787	0727  33 C0			     xor     ax,ax
   1788	0729			     @9@86:
   1789	0729  EB 0E			     jmp     short @9@142
   1790	072B			     @9@114:
   1791					;
   1792					;      return var[i].value;
   1793					;
   1794	072B  8B C6			     mov     ax,si
   1795	072D  BA 0032			     mov     dx,50
   1796	0730  F7 EA			     imul    dx
   1797	0732  05 0029r			     add     ax,offset DGROUP:var+13
   1798	0735  8C DA			     mov     dx,ds
   1799	0737  EB F0			     jmp     short @9@86
   1800	0739			     @9@142:
   1801					;
   1802					;    }
   1803					;
   1804	0739  5E			     pop     si
   1805	073A  5D			     pop     bp
   1806	073B  C3			     ret
   1807	073C			     command_var_value	     endp
   1808					;
   1809					;    static int	command_var_set(char far *nome,char far	*valor)
   1810					;
   1811					     assume  cs:_TEXT
   1812	073C			     command_var_set proc    near
   1813	073C  55			     push    bp
   1814	073D  8B EC			     mov     bp,sp
   1815	073F  56			     push    si
   1816					;
   1817					;    {
   1818					;      int i;
   1819					;
   1820					;      if (strlen(nome)>VAR_NOME_TAM)
   1821					;
   1822	0740  FF 76 06			     push    word ptr [bp+6]
   1823	0743  FF 76 04			     push    word ptr [bp+4]
   1824	0746  E8 0000e			     call    near ptr _strlen
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 33
command.ASM



   1825	0749  59			     pop     cx
   1826	074A  59			     pop     cx
   1827	074B  3D 000C			     cmp     ax,12
   1828	074E  76 05			     jbe     short @10@114
   1829					;
   1830					;	  return -3;
   1831					;
   1832	0750  B8 FFFD			     mov     ax,-3
   1833	0753			     @10@86:
   1834	0753  EB 6A			     jmp     short @10@310
   1835	0755			     @10@114:
   1836					;
   1837					;      if (strlen(valor)>VAR_VALOR_TAM)
   1838					;
   1839	0755  FF 76 0A			     push    word ptr [bp+10]
   1840	0758  FF 76 08			     push    word ptr [bp+8]
   1841	075B  E8 0000e			     call    near ptr _strlen
   1842	075E  59			     pop     cx
   1843	075F  59			     pop     cx
   1844	0760  3D 0024			     cmp     ax,36
   1845	0763  76 05			     jbe     short @10@170
   1846					;
   1847					;	  return -4;
   1848					;
   1849	0765  B8 FFFC			     mov     ax,-4
   1850	0768  EB E9			     jmp     short @10@86
   1851	076A			     @10@170:
   1852					;
   1853					;      i = command_var_search(nome);
   1854					;
   1855	076A  FF 76 06			     push    word ptr [bp+6]
   1856	076D  FF 76 04			     push    word ptr [bp+4]
   1857	0770  E8 FF19			     call    near ptr command_var_search
   1858	0773  59			     pop     cx
   1859	0774  59			     pop     cx
   1860	0775  8B F0			     mov     si,ax
   1861					;
   1862					;      if (i==-1)  {
   1863					;
   1864	0777  83 FE FF			     cmp     si,-1
   1865	077A  75 27			     jne     short @10@282
   1866					;
   1867					;	  i = command_var_nextfree();
   1868					;
   1869	077C  E8 FE6D			     call    near ptr command_var_nextfree
   1870	077F  8B F0			     mov     si,ax
   1871					;
   1872					;	  if (i==-1)
   1873					;
   1874	0781  83 FE FF			     cmp     si,-1
   1875	0784  75 05			     jne     short @10@254
   1876					;
   1877					;	     return -2;
   1878					;
   1879	0786  B8 FFFE			     mov     ax,-2
   1880	0789  EB C8			     jmp     short @10@86
   1881	078B			     @10@254:
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 34
command.ASM



   1882					;
   1883					;	  strcpy(var[i].name,nome);
   1884					;
   1885	078B  FF 76 06			     push    word ptr [bp+6]
   1886	078E  FF 76 04			     push    word ptr [bp+4]
   1887	0791  1E			     push    ds
   1888	0792  8B C6			     mov     ax,si
   1889	0794  BA 0032			     mov     dx,50
   1890	0797  F7 EA			     imul    dx
   1891	0799  05 001Cr			     add     ax,offset DGROUP:var
   1892	079C  50			     push    ax
   1893	079D  E8 0000e			     call    near ptr _strcpy
   1894	07A0  83 C4 08			     add     sp,8
   1895	07A3			     @10@282:
   1896					;
   1897					;      }
   1898					;      strcpy(var[i].value,valor);
   1899					;
   1900	07A3  FF 76 0A			     push    word ptr [bp+10]
   1901	07A6  FF 76 08			     push    word ptr [bp+8]
   1902	07A9  1E			     push    ds
   1903	07AA  8B C6			     mov     ax,si
   1904	07AC  BA 0032			     mov     dx,50
   1905	07AF  F7 EA			     imul    dx
   1906	07B1  05 0029r			     add     ax,offset DGROUP:var+13
   1907	07B4  50			     push    ax
   1908	07B5  E8 0000e			     call    near ptr _strcpy
   1909	07B8  83 C4 08			     add     sp,8
   1910					;
   1911					;      return 0;
   1912					;
   1913	07BB  33 C0			     xor     ax,ax
   1914	07BD  EB 94			     jmp     short @10@86
   1915	07BF			     @10@310:
   1916					;
   1917					;    }
   1918					;
   1919	07BF  5E			     pop     si
   1920	07C0  5D			     pop     bp
   1921	07C1  C3			     ret
   1922	07C2			     command_var_set endp
   1923					;
   1924					;    int cmd_reboot(int	argc, char far *argv[])
   1925					;
   1926					     assume  cs:_TEXT
   1927	07C2			     _cmd_reboot     proc    near
   1928	07C2  55			     push    bp
   1929	07C3  8B EC			     mov     bp,sp
   1930	07C5  56			     push    si
   1931	07C6  57			     push    di
   1932	07C7  8B 76 04			     mov     si,word ptr [bp+4]
   1933	07CA  8B 7E 06			     mov     di,word ptr [bp+6]
   1934					;
   1935					;    {
   1936					;      argc=argc;
   1937					;
   1938					;
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 35
command.ASM



   1939					;      argv=argv;
   1940					;
   1941					;
   1942					;      reboot();
   1943					;
   1944	07CD  E8 0000e			     call    near ptr _reboot
   1945					;
   1946					;      return 0;
   1947					;
   1948	07D0  33 C0			     xor     ax,ax
   1949	07D2  EB 00			     jmp     short @11@58
   1950	07D4			     @11@58:
   1951					;
   1952					;    }
   1953					;
   1954	07D4  5F			     pop     di
   1955	07D5  5E			     pop     si
   1956	07D6  5D			     pop     bp
   1957	07D7  C3			     ret
   1958	07D8			     _cmd_reboot     endp
   1959					;
   1960					;    int cmd_exit(int argc, char far *argv[])
   1961					;
   1962					     assume  cs:_TEXT
   1963	07D8			     _cmd_exit	     proc    near
   1964	07D8  55			     push    bp
   1965	07D9  8B EC			     mov     bp,sp
   1966	07DB  8B 56 04			     mov     dx,word ptr [bp+4]
   1967	07DE  8B 5E 06			     mov     bx,word ptr [bp+6]
   1968					;
   1969					;    {
   1970					;      argc=argc;
   1971					;
   1972					;
   1973					;      argv=argv;
   1974					;
   1975					;
   1976					;      end_command = 1;
   1977					;
   1978	07E1  C7 06 062Br 0001		     mov     word ptr DGROUP:end_command,1
   1979					;
   1980					;      return 0;
   1981					;
   1982	07E7  33 C0			     xor     ax,ax
   1983	07E9  EB 00			     jmp     short @12@58
   1984	07EB			     @12@58:
   1985					;
   1986					;    }
   1987					;
   1988	07EB  5D			     pop     bp
   1989	07EC  C3			     ret
   1990	07ED			     _cmd_exit	     endp
   1991					;
   1992					;    int cmd_help(int argc, char far *argv[])
   1993					;
   1994					     assume  cs:_TEXT
   1995	07ED			     _cmd_help	     proc    near
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 36
command.ASM



   1996	07ED  55			     push    bp
   1997	07EE  8B EC			     mov     bp,sp
   1998	07F0  56			     push    si
   1999	07F1  57			     push    di
   2000	07F2  8B 7E 04			     mov     di,word ptr [bp+4]
   2001					;
   2002					;    {
   2003					;      int i;
   2004					;
   2005					;      argc=argc;
   2006					;
   2007					;
   2008					;      argv=argv;
   2009					;
   2010	07F5  8B 46 06			     mov     ax,word ptr [bp+6]
   2011	07F8  89 46 06			     mov     word ptr [bp+6],ax
   2012					;
   2013					;      putstr("Comandos	do minisSistema	Operacional:\n");
   2014					;
   2015	07FB  1E			     push    ds
   2016	07FC  B8 06E9r			     mov     ax,offset DGROUP:s@+1591
   2017	07FF  50			     push    ax
   2018	0800  E8 0000e			     call    near ptr _putstr
   2019	0803  59			     pop     cx
   2020	0804  59			     pop     cx
   2021					;
   2022					;      for (i=0;i<MAXCOMMANDS;++i)  {
   2023					;
   2024	0805  33 F6			     xor     si,si
   2025	0807  EB 2F			     jmp     short @13@114
   2026	0809			     @13@58:
   2027					;
   2028					;	   putstr(commands[i].name);
   2029					;
   2030	0809  1E			     push    ds
   2031	080A  8B C6			     mov     ax,si
   2032	080C  BA 0006			     mov     dx,6
   2033	080F  F7 EA			     imul    dx
   2034	0811  8B D8			     mov     bx,ax
   2035	0813  FF B7 0002r		     push    word ptr DGROUP:commands[bx]
   2036	0817  E8 0000e			     call    near ptr _putstr
   2037	081A  59			     pop     cx
   2038	081B  59			     pop     cx
   2039					;
   2040					;	   putstr(commands[i].help);
   2041					;
   2042	081C  1E			     push    ds
   2043	081D  8B C6			     mov     ax,si
   2044	081F  BA 0006			     mov     dx,6
   2045	0822  F7 EA			     imul    dx
   2046	0824  8B D8			     mov     bx,ax
   2047	0826  FF B7 0004r		     push    word ptr DGROUP:commands[bx+2]
   2048	082A  E8 0000e			     call    near ptr _putstr
   2049	082D  59			     pop     cx
   2050	082E  59			     pop     cx
   2051					;
   2052					;	   putch('\n');
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 37
command.ASM



   2053					;
   2054	082F  B8 000A			     mov     ax,10
   2055	0832  50			     push    ax
   2056	0833  E8 0000e			     call    near ptr _putch
   2057	0836  59			     pop     cx
   2058	0837  46			     inc     si
   2059	0838			     @13@114:
   2060	0838  83 FE 1C			     cmp     si,28
   2061	083B  7C CC			     jl	     short @13@58
   2062					;
   2063					;      }
   2064					;      return 0;
   2065					;
   2066	083D  33 C0			     xor     ax,ax
   2067	083F  EB 00			     jmp     short @13@170
   2068	0841			     @13@170:
   2069					;
   2070					;    }
   2071					;
   2072	0841  5F			     pop     di
   2073	0842  5E			     pop     si
   2074	0843  5D			     pop     bp
   2075	0844  C3			     ret
   2076	0845			     _cmd_help	     endp
   2077					;
   2078					;    int cmd_date(int argc, char far *argv[])
   2079					;
   2080					     assume  cs:_TEXT
   2081	0845			     _cmd_date	     proc    near
   2082	0845  55			     push    bp
   2083	0846  8B EC			     mov     bp,sp
   2084	0848  83 EC 18			     sub     sp,24
   2085	084B  56			     push    si
   2086	084C  57			     push    di
   2087	084D  8B 76 04			     mov     si,word ptr [bp+4]
   2088	0850  8B 7E 06			     mov     di,word ptr [bp+6]
   2089					;
   2090					;    {
   2091					;      struct date d;
   2092					;      char str[20];
   2093					;
   2094					;      argc=argc;
   2095					;
   2096					;
   2097					;      argv=argv;
   2098					;
   2099					;
   2100					;
   2101					;
   2102					;
   2103					;      getdate(&d);
   2104					;
   2105	0853  16			     push    ss
   2106	0854  8D 46 FC			     lea     ax,word ptr [bp-4]
   2107	0857  50			     push    ax
   2108	0858  E8 0000e			     call    near ptr _getdate
   2109	085B  59			     pop     cx
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 38
command.ASM



   2110	085C  59			     pop     cx
   2111					;
   2112					;      unsignedtostr(str,d.da_day,2,'0');
   2113					;
   2114	085D  B0 30			     mov     al,48
   2115	085F  50			     push    ax
   2116	0860  B8 0002			     mov     ax,2
   2117	0863  50			     push    ax
   2118	0864  8A 46 FE			     mov     al,byte ptr [bp-2]
   2119	0867  98			     cbw
   2120	0868  50			     push    ax
   2121	0869  16			     push    ss
   2122	086A  8D 46 E8			     lea     ax,word ptr [bp-24]
   2123	086D  50			     push    ax
   2124	086E  E8 0000e			     call    near ptr _unsignedtostr
   2125	0871  83 C4 0A			     add     sp,10
   2126					;
   2127					;      putstr(str);
   2128					;
   2129	0874  16			     push    ss
   2130	0875  8D 46 E8			     lea     ax,word ptr [bp-24]
   2131	0878  50			     push    ax
   2132	0879  E8 0000e			     call    near ptr _putstr
   2133	087C  59			     pop     cx
   2134	087D  59			     pop     cx
   2135					;
   2136					;      putch('/');
   2137					;
   2138	087E  B8 002F			     mov     ax,47
   2139	0881  50			     push    ax
   2140	0882  E8 0000e			     call    near ptr _putch
   2141	0885  59			     pop     cx
   2142					;
   2143					;      unsignedtostr(str,d.da_mon,2,'0');
   2144					;
   2145	0886  B0 30			     mov     al,48
   2146	0888  50			     push    ax
   2147	0889  B8 0002			     mov     ax,2
   2148	088C  50			     push    ax
   2149	088D  8A 46 FF			     mov     al,byte ptr [bp-1]
   2150	0890  98			     cbw
   2151	0891  50			     push    ax
   2152	0892  16			     push    ss
   2153	0893  8D 46 E8			     lea     ax,word ptr [bp-24]
   2154	0896  50			     push    ax
   2155	0897  E8 0000e			     call    near ptr _unsignedtostr
   2156	089A  83 C4 0A			     add     sp,10
   2157					;
   2158					;      putstr(str);
   2159					;
   2160	089D  16			     push    ss
   2161	089E  8D 46 E8			     lea     ax,word ptr [bp-24]
   2162	08A1  50			     push    ax
   2163	08A2  E8 0000e			     call    near ptr _putstr
   2164	08A5  59			     pop     cx
   2165	08A6  59			     pop     cx
   2166					;
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 39
command.ASM



   2167					;      putch('/');
   2168					;
   2169	08A7  B8 002F			     mov     ax,47
   2170	08AA  50			     push    ax
   2171	08AB  E8 0000e			     call    near ptr _putch
   2172	08AE  59			     pop     cx
   2173					;
   2174					;      unsignedtostr(str,d.da_year,4,'0');
   2175					;
   2176	08AF  B0 30			     mov     al,48
   2177	08B1  50			     push    ax
   2178	08B2  B8 0004			     mov     ax,4
   2179	08B5  50			     push    ax
   2180	08B6  FF 76 FC			     push    word ptr [bp-4]
   2181	08B9  16			     push    ss
   2182	08BA  8D 46 E8			     lea     ax,word ptr [bp-24]
   2183	08BD  50			     push    ax
   2184	08BE  E8 0000e			     call    near ptr _unsignedtostr
   2185	08C1  83 C4 0A			     add     sp,10
   2186					;
   2187					;      putstr(str);
   2188					;
   2189	08C4  16			     push    ss
   2190	08C5  8D 46 E8			     lea     ax,word ptr [bp-24]
   2191	08C8  50			     push    ax
   2192	08C9  E8 0000e			     call    near ptr _putstr
   2193	08CC  59			     pop     cx
   2194	08CD  59			     pop     cx
   2195					;
   2196					;      putch('\n');
   2197					;
   2198	08CE  B8 000A			     mov     ax,10
   2199	08D1  50			     push    ax
   2200	08D2  E8 0000e			     call    near ptr _putch
   2201	08D5  59			     pop     cx
   2202					;
   2203					;      return 0;
   2204					;
   2205	08D6  33 C0			     xor     ax,ax
   2206	08D8  EB 00			     jmp     short @14@58
   2207	08DA			     @14@58:
   2208					;
   2209					;    }
   2210					;
   2211	08DA  5F			     pop     di
   2212	08DB  5E			     pop     si
   2213	08DC  8B E5			     mov     sp,bp
   2214	08DE  5D			     pop     bp
   2215	08DF  C3			     ret
   2216	08E0			     _cmd_date	     endp
   2217					;
   2218					;    int cmd_time(int argc, char far *argv[])
   2219					;
   2220					     assume  cs:_TEXT
   2221	08E0			     _cmd_time	     proc    near
   2222	08E0  55			     push    bp
   2223	08E1  8B EC			     mov     bp,sp
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 40
command.ASM



   2224	08E3  83 EC 18			     sub     sp,24
   2225	08E6  56			     push    si
   2226	08E7  57			     push    di
   2227	08E8  8B 76 04			     mov     si,word ptr [bp+4]
   2228	08EB  8B 7E 06			     mov     di,word ptr [bp+6]
   2229					;
   2230					;    {
   2231					;      struct time t;
   2232					;      char str[20];
   2233					;
   2234					;      argc=argc;
   2235					;
   2236					;
   2237					;      argv=argv;
   2238					;
   2239					;
   2240					;      gettime(&t);
   2241					;
   2242	08EE  16			     push    ss
   2243	08EF  8D 46 FC			     lea     ax,word ptr [bp-4]
   2244	08F2  50			     push    ax
   2245	08F3  E8 0000e			     call    near ptr _gettime
   2246	08F6  59			     pop     cx
   2247	08F7  59			     pop     cx
   2248					;
   2249					;      unsignedtostr(str,t.ti_hour,2,'0');
   2250					;
   2251	08F8  B0 30			     mov     al,48
   2252	08FA  50			     push    ax
   2253	08FB  B8 0002			     mov     ax,2
   2254	08FE  50			     push    ax
   2255	08FF  8A 46 FD			     mov     al,byte ptr [bp-3]
   2256	0902  B4 00			     mov     ah,0
   2257	0904  50			     push    ax
   2258	0905  16			     push    ss
   2259	0906  8D 46 E8			     lea     ax,word ptr [bp-24]
   2260	0909  50			     push    ax
   2261	090A  E8 0000e			     call    near ptr _unsignedtostr
   2262	090D  83 C4 0A			     add     sp,10
   2263					;
   2264					;      putstr(str);
   2265					;
   2266	0910  16			     push    ss
   2267	0911  8D 46 E8			     lea     ax,word ptr [bp-24]
   2268	0914  50			     push    ax
   2269	0915  E8 0000e			     call    near ptr _putstr
   2270	0918  59			     pop     cx
   2271	0919  59			     pop     cx
   2272					;
   2273					;      putch(':');
   2274					;
   2275	091A  B8 003A			     mov     ax,58
   2276	091D  50			     push    ax
   2277	091E  E8 0000e			     call    near ptr _putch
   2278	0921  59			     pop     cx
   2279					;
   2280					;
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 41
command.ASM



   2281					;
   2282					;      unsignedtostr(str,t.ti_min,2,'0');
   2283					;
   2284	0922  B0 30			     mov     al,48
   2285	0924  50			     push    ax
   2286	0925  B8 0002			     mov     ax,2
   2287	0928  50			     push    ax
   2288	0929  8A 46 FC			     mov     al,byte ptr [bp-4]
   2289	092C  B4 00			     mov     ah,0
   2290	092E  50			     push    ax
   2291	092F  16			     push    ss
   2292	0930  8D 46 E8			     lea     ax,word ptr [bp-24]
   2293	0933  50			     push    ax
   2294	0934  E8 0000e			     call    near ptr _unsignedtostr
   2295	0937  83 C4 0A			     add     sp,10
   2296					;
   2297					;      putstr(str);
   2298					;
   2299	093A  16			     push    ss
   2300	093B  8D 46 E8			     lea     ax,word ptr [bp-24]
   2301	093E  50			     push    ax
   2302	093F  E8 0000e			     call    near ptr _putstr
   2303	0942  59			     pop     cx
   2304	0943  59			     pop     cx
   2305					;
   2306					;      putch(':');
   2307					;
   2308	0944  B8 003A			     mov     ax,58
   2309	0947  50			     push    ax
   2310	0948  E8 0000e			     call    near ptr _putch
   2311	094B  59			     pop     cx
   2312					;
   2313					;      unsignedtostr(str,t.ti_sec,2,'0');
   2314					;
   2315	094C  B0 30			     mov     al,48
   2316	094E  50			     push    ax
   2317	094F  B8 0002			     mov     ax,2
   2318	0952  50			     push    ax
   2319	0953  8A 46 FF			     mov     al,byte ptr [bp-1]
   2320	0956  B4 00			     mov     ah,0
   2321	0958  50			     push    ax
   2322	0959  16			     push    ss
   2323	095A  8D 46 E8			     lea     ax,word ptr [bp-24]
   2324	095D  50			     push    ax
   2325	095E  E8 0000e			     call    near ptr _unsignedtostr
   2326	0961  83 C4 0A			     add     sp,10
   2327					;
   2328					;      putstr(str);
   2329					;
   2330	0964  16			     push    ss
   2331	0965  8D 46 E8			     lea     ax,word ptr [bp-24]
   2332	0968  50			     push    ax
   2333	0969  E8 0000e			     call    near ptr _putstr
   2334	096C  59			     pop     cx
   2335	096D  59			     pop     cx
   2336					;
   2337					;      putch('\n');
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 42
command.ASM



   2338					;
   2339	096E  B8 000A			     mov     ax,10
   2340	0971  50			     push    ax
   2341	0972  E8 0000e			     call    near ptr _putch
   2342	0975  59			     pop     cx
   2343					;
   2344					;      return 0;
   2345					;
   2346	0976  33 C0			     xor     ax,ax
   2347	0978  EB 00			     jmp     short @15@58
   2348	097A			     @15@58:
   2349					;
   2350					;    }
   2351					;
   2352	097A  5F			     pop     di
   2353	097B  5E			     pop     si
   2354	097C  8B E5			     mov     sp,bp
   2355	097E  5D			     pop     bp
   2356	097F  C3			     ret
   2357	0980			     _cmd_time	     endp
   2358					;
   2359					;    int cmd_cls(int argc, char	far *argv[])
   2360					;
   2361					     assume  cs:_TEXT
   2362	0980			     _cmd_cls	     proc    near
   2363	0980  55			     push    bp
   2364	0981  8B EC			     mov     bp,sp
   2365	0983  56			     push    si
   2366	0984  57			     push    di
   2367	0985  8B 76 04			     mov     si,word ptr [bp+4]
   2368	0988  8B 7E 06			     mov     di,word ptr [bp+6]
   2369					;
   2370					;    {
   2371					;      argc=argc;
   2372					;
   2373					;
   2374					;      argv=argv;
   2375					;
   2376					;
   2377					;      clrscr();
   2378					;
   2379	098B  E8 0000e			     call    near ptr _clrscr
   2380					;
   2381					;      return 0;
   2382					;
   2383	098E  33 C0			     xor     ax,ax
   2384	0990  EB 00			     jmp     short @16@58
   2385	0992			     @16@58:
   2386					;
   2387					;    }
   2388					;
   2389	0992  5F			     pop     di
   2390	0993  5E			     pop     si
   2391	0994  5D			     pop     bp
   2392	0995  C3			     ret
   2393	0996			     _cmd_cls	     endp
   2394					;
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 43
command.ASM



   2395					;    int cmd_ver(int argc, char	far *argv[])
   2396					;
   2397					     assume  cs:_TEXT
   2398	0996			     _cmd_ver	     proc    near
   2399	0996  55			     push    bp
   2400	0997  8B EC			     mov     bp,sp
   2401	0999  56			     push    si
   2402	099A  57			     push    di
   2403	099B  8B 76 04			     mov     si,word ptr [bp+4]
   2404	099E  8B 7E 06			     mov     di,word ptr [bp+6]
   2405					;
   2406					;    {
   2407					;      argc=argc;
   2408					;
   2409					;
   2410					;      argv=argv;
   2411					;
   2412					;
   2413					;      putstr("minisSistema Operacional	- Vs ");
   2414					;
   2415	09A1  1E			     push    ds
   2416	09A2  B8 0710r			     mov     ax,offset DGROUP:s@+1630
   2417	09A5  50			     push    ax
   2418	09A6  E8 0000e			     call    near ptr _putstr
   2419	09A9  59			     pop     cx
   2420	09AA  59			     pop     cx
   2421					;
   2422					;      putstr(miniSO_VERSION);
   2423					;
   2424	09AB  1E			     push    ds
   2425	09AC  B8 072Fr			     mov     ax,offset DGROUP:s@+1661
   2426	09AF  50			     push    ax
   2427	09B0  E8 0000e			     call    near ptr _putstr
   2428	09B3  59			     pop     cx
   2429	09B4  59			     pop     cx
   2430					;
   2431					;      putch('\n');
   2432					;
   2433	09B5  B8 000A			     mov     ax,10
   2434	09B8  50			     push    ax
   2435	09B9  E8 0000e			     call    near ptr _putch
   2436	09BC  59			     pop     cx
   2437					;
   2438					;      return 0;
   2439					;
   2440	09BD  33 C0			     xor     ax,ax
   2441	09BF  EB 00			     jmp     short @17@58
   2442	09C1			     @17@58:
   2443					;
   2444					;    }
   2445					;
   2446	09C1  5F			     pop     di
   2447	09C2  5E			     pop     si
   2448	09C3  5D			     pop     bp
   2449	09C4  C3			     ret
   2450	09C5			     _cmd_ver	     endp
   2451	09C5			     _TEXT   ends
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 44
command.ASM



   2452	0000			     _BSS    segment word public 'BSS'
   2453	0000  14*(??)			     db	     20	dup (?)
   2454	0014			     _BSS    ends
   2455	09C5			     _TEXT   segment byte public 'CODE'
   2456					;
   2457					;    int cmd_ps(int argc, char far *argv[])
   2458					;
   2459					     assume  cs:_TEXT
   2460	09C5			     _cmd_ps proc    near
   2461	09C5  55			     push    bp
   2462	09C6  8B EC			     mov     bp,sp
   2463	09C8  56			     push    si
   2464	09C9  57			     push    di
   2465					;
   2466					;    {
   2467					;      int i,l;
   2468					;      static char str[20];
   2469					;      extern miniSO_PCB miniSO_thread[];
   2470					;
   2471					;      argc=argc;
   2472					;
   2473	09CA  8B 46 04			     mov     ax,word ptr [bp+4]
   2474	09CD  89 46 04			     mov     word ptr [bp+4],ax
   2475					;
   2476					;      argv=argv;
   2477					;
   2478	09D0  8B 46 06			     mov     ax,word ptr [bp+6]
   2479	09D3  89 46 06			     mov     word ptr [bp+6],ax
   2480					;
   2481					;      putstr("	BCP   PID   PPID  STATUS   ZLIST  PREV	 NEXT\n");
   2482					;
   2483	09D6  1E			     push    ds
   2484	09D7  B8 0734r			     mov     ax,offset DGROUP:s@+1666
   2485	09DA  50			     push    ax
   2486	09DB  E8 0000e			     call    near ptr _putstr
   2487	09DE  59			     pop     cx
   2488	09DF  59			     pop     cx
   2489					;
   2490					;      for (i=0;i<miniSO_MAXTHREADS;++i)  {
   2491					;
   2492	09E0  33 FF			     xor     di,di
   2493	09E2  E9 021C			     jmp     @18@1010
   2494	09E5			     @18@58:
   2495					;
   2496					;	   if (miniSO_thread[i].status!=FREE)  {
   2497					;
   2498	09E5  8B C7			     mov     ax,di
   2499	09E7  BA 001A			     mov     dx,26
   2500	09EA  F7 EA			     imul    dx
   2501	09EC  8B D8			     mov     bx,ax
   2502	09EE  83 BF 0004e FF		     cmp     word ptr DGROUP:_miniSO_thread[bx+4],-1
   2503	09F3  75 03			     jne     @@4
   2504	09F5  E9 0208			     jmp     @18@982
   2505	09F8			     @@4:
   2506					;
   2507					;	      inttostr(str,i);
   2508					;
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 45
command.ASM



   2509	09F8  57			     push    di
   2510	09F9  1E			     push    ds
   2511	09FA  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2512	09FD  50			     push    ax
   2513	09FE  E8 0000e			     call    near ptr _inttostr
   2514	0A01  83 C4 06			     add     sp,6
   2515					;
   2516					;	      l=strlen(str);
   2517					;
   2518	0A04  1E			     push    ds
   2519	0A05  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2520	0A08  50			     push    ax
   2521	0A09  E8 0000e			     call    near ptr _strlen
   2522	0A0C  59			     pop     cx
   2523	0A0D  59			     pop     cx
   2524	0A0E  8B F0			     mov     si,ax
   2525	0A10  EB 08			     jmp     short @18@142
   2526	0A12			     @18@114:
   2527					;
   2528					;	      while (l++<3)
   2529					;		    putch(' ');
   2530					;
   2531	0A12  B8 0020			     mov     ax,32
   2532	0A15  50			     push    ax
   2533	0A16  E8 0000e			     call    near ptr _putch
   2534	0A19  59			     pop     cx
   2535	0A1A			     @18@142:
   2536	0A1A  8B C6			     mov     ax,si
   2537	0A1C  46			     inc     si
   2538	0A1D  3D 0003			     cmp     ax,3
   2539	0A20  7C F0			     jl	     short @18@114
   2540					;
   2541					;	      putstr(str);
   2542					;
   2543	0A22  1E			     push    ds
   2544	0A23  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2545	0A26  50			     push    ax
   2546	0A27  E8 0000e			     call    near ptr _putstr
   2547	0A2A  59			     pop     cx
   2548	0A2B  59			     pop     cx
   2549					;
   2550					;	      putstr("	");
   2551					;
   2552	0A2C  1E			     push    ds
   2553	0A2D  B8 0764r			     mov     ax,offset DGROUP:s@+1714
   2554	0A30  50			     push    ax
   2555	0A31  E8 0000e			     call    near ptr _putstr
   2556	0A34  59			     pop     cx
   2557	0A35  59			     pop     cx
   2558					;
   2559					;	      inttostr(str,miniSO_thread[i].pid);
   2560					;
   2561	0A36  8B C7			     mov     ax,di
   2562	0A38  BA 001A			     mov     dx,26
   2563	0A3B  F7 EA			     imul    dx
   2564	0A3D  8B D8			     mov     bx,ax
   2565	0A3F  FF B7 0000e		     push    word ptr DGROUP:_miniSO_thread[bx]
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 46
command.ASM



   2566	0A43  1E			     push    ds
   2567	0A44  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2568	0A47  50			     push    ax
   2569	0A48  E8 0000e			     call    near ptr _inttostr
   2570	0A4B  83 C4 06			     add     sp,6
   2571					;
   2572					;	      l=strlen(str);
   2573					;
   2574	0A4E  1E			     push    ds
   2575	0A4F  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2576	0A52  50			     push    ax
   2577	0A53  E8 0000e			     call    near ptr _strlen
   2578	0A56  59			     pop     cx
   2579	0A57  59			     pop     cx
   2580	0A58  8B F0			     mov     si,ax
   2581	0A5A  EB 08			     jmp     short @18@226
   2582	0A5C			     @18@198:
   2583					;
   2584					;	      while (l++<5)
   2585					;		    putch(' ');
   2586					;
   2587	0A5C  B8 0020			     mov     ax,32
   2588	0A5F  50			     push    ax
   2589	0A60  E8 0000e			     call    near ptr _putch
   2590	0A63  59			     pop     cx
   2591	0A64			     @18@226:
   2592	0A64  8B C6			     mov     ax,si
   2593	0A66  46			     inc     si
   2594	0A67  3D 0005			     cmp     ax,5
   2595	0A6A  7C F0			     jl	     short @18@198
   2596					;
   2597					;	      putstr(str);
   2598					;
   2599	0A6C  1E			     push    ds
   2600	0A6D  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2601	0A70  50			     push    ax
   2602	0A71  E8 0000e			     call    near ptr _putstr
   2603	0A74  59			     pop     cx
   2604	0A75  59			     pop     cx
   2605					;
   2606					;	      putstr("	");
   2607					;
   2608	0A76  1E			     push    ds
   2609	0A77  B8 0767r			     mov     ax,offset DGROUP:s@+1717
   2610	0A7A  50			     push    ax
   2611	0A7B  E8 0000e			     call    near ptr _putstr
   2612	0A7E  59			     pop     cx
   2613	0A7F  59			     pop     cx
   2614					;
   2615					;	      inttostr(str,miniSO_thread[i].ppid);
   2616					;
   2617	0A80  8B C7			     mov     ax,di
   2618	0A82  BA 001A			     mov     dx,26
   2619	0A85  F7 EA			     imul    dx
   2620	0A87  8B D8			     mov     bx,ax
   2621	0A89  FF B7 0002e		     push    word ptr DGROUP:_miniSO_thread[bx+2]
   2622	0A8D  1E			     push    ds
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 47
command.ASM



   2623	0A8E  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2624	0A91  50			     push    ax
   2625	0A92  E8 0000e			     call    near ptr _inttostr
   2626	0A95  83 C4 06			     add     sp,6
   2627					;
   2628					;	      l=strlen(str);
   2629					;
   2630	0A98  1E			     push    ds
   2631	0A99  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2632	0A9C  50			     push    ax
   2633	0A9D  E8 0000e			     call    near ptr _strlen
   2634	0AA0  59			     pop     cx
   2635	0AA1  59			     pop     cx
   2636	0AA2  8B F0			     mov     si,ax
   2637	0AA4  EB 08			     jmp     short @18@310
   2638	0AA6			     @18@282:
   2639					;
   2640					;	      while (l++<5)
   2641					;		    putch(' ');
   2642					;
   2643	0AA6  B8 0020			     mov     ax,32
   2644	0AA9  50			     push    ax
   2645	0AAA  E8 0000e			     call    near ptr _putch
   2646	0AAD  59			     pop     cx
   2647	0AAE			     @18@310:
   2648	0AAE  8B C6			     mov     ax,si
   2649	0AB0  46			     inc     si
   2650	0AB1  3D 0005			     cmp     ax,5
   2651	0AB4  7C F0			     jl	     short @18@282
   2652					;
   2653					;	      putstr(str);
   2654					;
   2655	0AB6  1E			     push    ds
   2656	0AB7  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2657	0ABA  50			     push    ax
   2658	0ABB  E8 0000e			     call    near ptr _putstr
   2659	0ABE  59			     pop     cx
   2660	0ABF  59			     pop     cx
   2661					;
   2662					;	      putstr("	");
   2663					;
   2664	0AC0  1E			     push    ds
   2665	0AC1  B8 076Ar			     mov     ax,offset DGROUP:s@+1720
   2666	0AC4  50			     push    ax
   2667	0AC5  E8 0000e			     call    near ptr _putstr
   2668	0AC8  59			     pop     cx
   2669	0AC9  59			     pop     cx
   2670					;
   2671					;	      switch(miniSO_thread[i].status)  {
   2672					;
   2673	0ACA  8B C7			     mov     ax,di
   2674	0ACC  BA 001A			     mov     dx,26
   2675	0ACF  F7 EA			     imul    dx
   2676	0AD1  8B D8			     mov     bx,ax
   2677	0AD3  8B 9F 0004e		     mov     bx,word ptr DGROUP:_miniSO_thread[bx+4]
   2678	0AD7  43			     inc     bx
   2679	0AD8  83 FB 07			     cmp     bx,7
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 48
command.ASM



   2680	0ADB  77 3D			     ja	     short @18@702
   2681	0ADD  D1 E3			     shl     bx,1
   2682	0ADF  2E: FF A7	0C11r		     jmp     word ptr cs:@18@C1170[bx]
   2683	0AE4			     @18@450:
   2684					;
   2685					;		    case FREE:	  putstr(strFREE);    break;
   2686					;
   2687	0AE4  1E			     push    ds
   2688	0AE5  B8 076Dr			     mov     ax,offset DGROUP:s@+1723
   2689	0AE8			     @18@478:
   2690	0AE8  50			     push    ax
   2691	0AE9  E8 0000e			     call    near ptr _putstr
   2692	0AEC  59			     pop     cx
   2693	0AED  59			     pop     cx
   2694	0AEE  EB 2A			     jmp     short @18@702
   2695	0AF0			     @18@506:
   2696					;
   2697					;		    case READY:	  putstr(strREADY);   break;
   2698					;
   2699	0AF0  1E			     push    ds
   2700	0AF1  B8 0775r			     mov     ax,offset DGROUP:s@+1731
   2701	0AF4  EB F2			     jmp     short @18@478
   2702	0AF6			     @18@534:
   2703					;
   2704					;		    case RUNNING: putstr(strRUNNING); break;
   2705					;
   2706	0AF6  1E			     push    ds
   2707	0AF7  B8 077Dr			     mov     ax,offset DGROUP:s@+1739
   2708	0AFA  EB EC			     jmp     short @18@478
   2709	0AFC			     @18@562:
   2710					;
   2711					;		    case ZOMBIE:  putstr(strZOMBIE);  break;
   2712					;
   2713	0AFC  1E			     push    ds
   2714	0AFD  B8 0785r			     mov     ax,offset DGROUP:s@+1747
   2715	0B00  EB E6			     jmp     short @18@478
   2716	0B02			     @18@590:
   2717					;
   2718					;		    case WAIT:	  putstr(strWAIT);    break;
   2719					;
   2720	0B02  1E			     push    ds
   2721	0B03  B8 078Dr			     mov     ax,offset DGROUP:s@+1755
   2722	0B06  EB E0			     jmp     short @18@478
   2723	0B08			     @18@618:
   2724					;
   2725					;		    case WAITSIG: putstr(strWAITSIG); break;
   2726					;
   2727	0B08  1E			     push    ds
   2728	0B09  B8 0795r			     mov     ax,offset DGROUP:s@+1763
   2729	0B0C  EB DA			     jmp     short @18@478
   2730	0B0E			     @18@646:
   2731					;
   2732					;		    case WAITSEM: putstr(strWAITSEM); break;
   2733					;
   2734	0B0E  1E			     push    ds
   2735	0B0F  B8 079Dr			     mov     ax,offset DGROUP:s@+1771
   2736	0B12  EB D4			     jmp     short @18@478
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 49
command.ASM



   2737	0B14			     @18@674:
   2738					;
   2739					;		    case STOPPED: putstr(strSTOPPED); break;
   2740					;
   2741	0B14  1E			     push    ds
   2742	0B15  B8 07A5r			     mov     ax,offset DGROUP:s@+1779
   2743	0B18  EB CE			     jmp     short @18@478
   2744	0B1A			     @18@702:
   2745					;
   2746					;	      }
   2747					;	      putstr("	");
   2748					;
   2749	0B1A  1E			     push    ds
   2750	0B1B  B8 07ADr			     mov     ax,offset DGROUP:s@+1787
   2751	0B1E  50			     push    ax
   2752	0B1F  E8 0000e			     call    near ptr _putstr
   2753	0B22  59			     pop     cx
   2754	0B23  59			     pop     cx
   2755					;
   2756					;	      inttostr(str,miniSO_thread[i].zombies);
   2757					;
   2758	0B24  8B C7			     mov     ax,di
   2759	0B26  BA 001A			     mov     dx,26
   2760	0B29  F7 EA			     imul    dx
   2761	0B2B  8B D8			     mov     bx,ax
   2762	0B2D  FF B7 0014e		     push    word ptr DGROUP:_miniSO_thread[bx+20]
   2763	0B31  1E			     push    ds
   2764	0B32  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2765	0B35  50			     push    ax
   2766	0B36  E8 0000e			     call    near ptr _inttostr
   2767	0B39  83 C4 06			     add     sp,6
   2768					;
   2769					;	      l=strlen(str);
   2770					;
   2771	0B3C  1E			     push    ds
   2772	0B3D  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2773	0B40  50			     push    ax
   2774	0B41  E8 0000e			     call    near ptr _strlen
   2775	0B44  59			     pop     cx
   2776	0B45  59			     pop     cx
   2777	0B46  8B F0			     mov     si,ax
   2778	0B48  EB 08			     jmp     short @18@758
   2779	0B4A			     @18@730:
   2780					;
   2781					;	      while (l++<5)
   2782					;		    putch(' ');
   2783					;
   2784	0B4A  B8 0020			     mov     ax,32
   2785	0B4D  50			     push    ax
   2786	0B4E  E8 0000e			     call    near ptr _putch
   2787	0B51  59			     pop     cx
   2788	0B52			     @18@758:
   2789	0B52  8B C6			     mov     ax,si
   2790	0B54  46			     inc     si
   2791	0B55  3D 0005			     cmp     ax,5
   2792	0B58  7C F0			     jl	     short @18@730
   2793					;
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 50
command.ASM



   2794					;	      putstr(str);
   2795					;
   2796	0B5A  1E			     push    ds
   2797	0B5B  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2798	0B5E  50			     push    ax
   2799	0B5F  E8 0000e			     call    near ptr _putstr
   2800	0B62  59			     pop     cx
   2801	0B63  59			     pop     cx
   2802					;
   2803					;
   2804					;	      putstr(" ");
   2805					;
   2806	0B64  1E			     push    ds
   2807	0B65  B8 07B0r			     mov     ax,offset DGROUP:s@+1790
   2808	0B68  50			     push    ax
   2809	0B69  E8 0000e			     call    near ptr _putstr
   2810	0B6C  59			     pop     cx
   2811	0B6D  59			     pop     cx
   2812					;
   2813					;	      inttostr(str,miniSO_thread[i].prev);
   2814					;
   2815	0B6E  8B C7			     mov     ax,di
   2816	0B70  BA 001A			     mov     dx,26
   2817	0B73  F7 EA			     imul    dx
   2818	0B75  8B D8			     mov     bx,ax
   2819	0B77  FF B7 0016e		     push    word ptr DGROUP:_miniSO_thread[bx+22]
   2820	0B7B  1E			     push    ds
   2821	0B7C  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2822	0B7F  50			     push    ax
   2823	0B80  E8 0000e			     call    near ptr _inttostr
   2824	0B83  83 C4 06			     add     sp,6
   2825					;
   2826					;	      l=strlen(str);
   2827					;
   2828	0B86  1E			     push    ds
   2829	0B87  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2830	0B8A  50			     push    ax
   2831	0B8B  E8 0000e			     call    near ptr _strlen
   2832	0B8E  59			     pop     cx
   2833	0B8F  59			     pop     cx
   2834	0B90  8B F0			     mov     si,ax
   2835	0B92  EB 08			     jmp     short @18@842
   2836	0B94			     @18@814:
   2837					;
   2838					;	      while (l++<5)
   2839					;		    putch(' ');
   2840					;
   2841	0B94  B8 0020			     mov     ax,32
   2842	0B97  50			     push    ax
   2843	0B98  E8 0000e			     call    near ptr _putch
   2844	0B9B  59			     pop     cx
   2845	0B9C			     @18@842:
   2846	0B9C  8B C6			     mov     ax,si
   2847	0B9E  46			     inc     si
   2848	0B9F  3D 0005			     cmp     ax,5
   2849	0BA2  7C F0			     jl	     short @18@814
   2850					;
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 51
command.ASM



   2851					;	      putstr(str);
   2852					;
   2853	0BA4  1E			     push    ds
   2854	0BA5  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2855	0BA8  50			     push    ax
   2856	0BA9  E8 0000e			     call    near ptr _putstr
   2857	0BAC  59			     pop     cx
   2858	0BAD  59			     pop     cx
   2859					;
   2860					;
   2861					;	      putstr("	");
   2862					;
   2863	0BAE  1E			     push    ds
   2864	0BAF  B8 07B2r			     mov     ax,offset DGROUP:s@+1792
   2865	0BB2  50			     push    ax
   2866	0BB3  E8 0000e			     call    near ptr _putstr
   2867	0BB6  59			     pop     cx
   2868	0BB7  59			     pop     cx
   2869					;
   2870					;	      inttostr(str,miniSO_thread[i].next);
   2871					;
   2872	0BB8  8B C7			     mov     ax,di
   2873	0BBA  BA 001A			     mov     dx,26
   2874	0BBD  F7 EA			     imul    dx
   2875	0BBF  8B D8			     mov     bx,ax
   2876	0BC1  FF B7 0018e		     push    word ptr DGROUP:_miniSO_thread[bx+24]
   2877	0BC5  1E			     push    ds
   2878	0BC6  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2879	0BC9  50			     push    ax
   2880	0BCA  E8 0000e			     call    near ptr _inttostr
   2881	0BCD  83 C4 06			     add     sp,6
   2882					;
   2883					;	      l=strlen(str);
   2884					;
   2885	0BD0  1E			     push    ds
   2886	0BD1  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2887	0BD4  50			     push    ax
   2888	0BD5  E8 0000e			     call    near ptr _strlen
   2889	0BD8  59			     pop     cx
   2890	0BD9  59			     pop     cx
   2891	0BDA  8B F0			     mov     si,ax
   2892	0BDC  EB 08			     jmp     short @18@926
   2893	0BDE			     @18@898:
   2894					;
   2895					;	      while (l++<5)
   2896					;		    putch(' ');
   2897					;
   2898	0BDE  B8 0020			     mov     ax,32
   2899	0BE1  50			     push    ax
   2900	0BE2  E8 0000e			     call    near ptr _putch
   2901	0BE5  59			     pop     cx
   2902	0BE6			     @18@926:
   2903	0BE6  8B C6			     mov     ax,si
   2904	0BE8  46			     inc     si
   2905	0BE9  3D 0005			     cmp     ax,5
   2906	0BEC  7C F0			     jl	     short @18@898
   2907					;
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 52
command.ASM



   2908					;	      putstr(str);
   2909					;
   2910	0BEE  1E			     push    ds
   2911	0BEF  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2912	0BF2  50			     push    ax
   2913	0BF3  E8 0000e			     call    near ptr _putstr
   2914	0BF6  59			     pop     cx
   2915	0BF7  59			     pop     cx
   2916					;
   2917					;	      putch('\n');
   2918					;
   2919	0BF8  B8 000A			     mov     ax,10
   2920	0BFB  50			     push    ax
   2921	0BFC  E8 0000e			     call    near ptr _putch
   2922	0BFF  59			     pop     cx
   2923	0C00			     @18@982:
   2924	0C00  47			     inc     di
   2925	0C01			     @18@1010:
   2926	0C01  83 FF 10			     cmp     di,16
   2927	0C04  7D 03			     jge     @@5
   2928	0C06  E9 FDDC			     jmp     @18@58
   2929	0C09			     @@5:
   2930					;
   2931					;	   }
   2932					;      }
   2933					;      return 0;
   2934					;
   2935	0C09  33 C0			     xor     ax,ax
   2936	0C0B  EB 00			     jmp     short @18@1066
   2937	0C0D			     @18@1066:
   2938					;
   2939					;    }
   2940					;
   2941	0C0D  5F			     pop     di
   2942	0C0E  5E			     pop     si
   2943	0C0F  5D			     pop     bp
   2944	0C10  C3			     ret
   2945	0C11			     _cmd_ps endp
   2946	0C11			     @18@C1170	     label   word
   2947	0C11  0AE4r			     dw	     @18@450
   2948	0C13  0AF0r			     dw	     @18@506
   2949	0C15  0AF6r			     dw	     @18@534
   2950	0C17  0AFCr			     dw	     @18@562
   2951	0C19  0B02r			     dw	     @18@590
   2952	0C1B  0B08r			     dw	     @18@618
   2953	0C1D  0B0Er			     dw	     @18@646
   2954	0C1F  0B14r			     dw	     @18@674
   2955					;
   2956					;    int cmd_kill(int argc, char far *argv[])
   2957					;
   2958					     assume  cs:_TEXT
   2959	0C21			     _cmd_kill	     proc    near
   2960	0C21  55			     push    bp
   2961	0C22  8B EC			     mov     bp,sp
   2962	0C24  56			     push    si
   2963	0C25  57			     push    di
   2964					;
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 53
command.ASM



   2965					;    {
   2966					;      int t=0;
   2967					;
   2968	0C26  33 F6			     xor     si,si
   2969					;
   2970					;      pid_t pid=0;
   2971					;
   2972	0C28  33 FF			     xor     di,di
   2973					;
   2974					;      char str[10];
   2975					;
   2976					;      if (argc<=1)  {
   2977					;
   2978	0C2A  83 7E 04 01		     cmp     word ptr [bp+4],1
   2979	0C2E  7F 0F			     jg	     short @19@142
   2980					;
   2981					;	  putstr("Erro em kill:	parametro nao fornecido!\n");
   2982					;
   2983	0C30  1E			     push    ds
   2984	0C31  B8 07B5r			     mov     ax,offset DGROUP:s@+1795
   2985	0C34			     @19@86:
   2986	0C34  50			     push    ax
   2987	0C35  E8 0000e			     call    near ptr _putstr
   2988	0C38  59			     pop     cx
   2989	0C39  59			     pop     cx
   2990					;
   2991					;	  return 1;
   2992					;
   2993	0C3A  B8 0001			     mov     ax,1
   2994	0C3D			     @19@114:
   2995	0C3D  EB 26			     jmp     short @19@226
   2996	0C3F			     @19@142:
   2997					;
   2998					;      }
   2999					;      pid = atoi(argv[1]);
   3000					;
   3001	0C3F  8B 5E 06			     mov     bx,word ptr [bp+6]
   3002	0C42  FF 77 06			     push    word ptr [bx+6]
   3003	0C45  FF 77 04			     push    word ptr [bx+4]
   3004	0C48  E8 0000e			     call    near ptr _atoi
   3005	0C4B  59			     pop     cx
   3006	0C4C  59			     pop     cx
   3007	0C4D  8B F8			     mov     di,ax
   3008					;
   3009					;      t = kill(pid);
   3010					;
   3011	0C4F  57			     push    di
   3012	0C50  E8 0000e			     call    near ptr _kill
   3013	0C53  59			     pop     cx
   3014	0C54  8B F0			     mov     si,ax
   3015					;
   3016					;      if (t==miniSO_ERROR)  {
   3017					;
   3018	0C56  83 FE FF			     cmp     si,-1
   3019	0C59  75 06			     jne     short @19@198
   3020					;
   3021					;	  putstr("kill:	impossivel matar o processo/thread\n");
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 54
command.ASM



   3022					;
   3023	0C5B  1E			     push    ds
   3024	0C5C  B8 07DDr			     mov     ax,offset DGROUP:s@+1835
   3025	0C5F  EB D3			     jmp     short @19@86
   3026	0C61			     @19@198:
   3027					;
   3028					;	  return 1;
   3029					;      }
   3030					;      return 0;
   3031					;
   3032	0C61  33 C0			     xor     ax,ax
   3033	0C63  EB D8			     jmp     short @19@114
   3034	0C65			     @19@226:
   3035					;
   3036					;    }
   3037					;
   3038	0C65  5F			     pop     di
   3039	0C66  5E			     pop     si
   3040	0C67  5D			     pop     bp
   3041	0C68  C3			     ret
   3042	0C69			     _cmd_kill	     endp
   3043					;
   3044					;    int cmd_set(int argc, char	far *argv[])
   3045					;
   3046					     assume  cs:_TEXT
   3047	0C69			     _cmd_set	     proc    near
   3048	0C69  55			     push    bp
   3049	0C6A  8B EC			     mov     bp,sp
   3050	0C6C  83 EC 02			     sub     sp,2
   3051	0C6F  56			     push    si
   3052	0C70  57			     push    di
   3053	0C71  8B 76 04			     mov     si,word ptr [bp+4]
   3054	0C74  8B 7E 06			     mov     di,word ptr [bp+6]
   3055					;
   3056					;    {
   3057					;      int res;
   3058					;
   3059					;      if (argc	== 1)  {
   3060					;
   3061	0C77  83 FE 01			     cmp     si,1
   3062	0C7A  75 07			     jne     short @20@142
   3063					;
   3064					;	  command_var_list();
   3065					;
   3066	0C7C  E8 F99E			     call    near ptr command_var_list
   3067					;
   3068					;	  return 0;
   3069					;
   3070	0C7F			     @20@86:
   3071	0C7F  33 C0			     xor     ax,ax
   3072	0C81			     @20@114:
   3073	0C81  EB 71			     jmp     short @20@534
   3074	0C83			     @20@142:
   3075					;
   3076					;      }
   3077					;      if (argc	== 2)
   3078					;
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 55
command.ASM



   3079	0C83  83 FE 02			     cmp     si,2
   3080	0C86  75 16			     jne     short @20@198
   3081					;
   3082					;	  res =	command_var_set(argv[1],"");
   3083					;
   3084	0C88  1E			     push    ds
   3085	0C89  B8 0807r			     mov     ax,offset DGROUP:s@+1877
   3086	0C8C  50			     push    ax
   3087	0C8D  FF 75 06			     push    word ptr [di+6]
   3088	0C90  FF 75 04			     push    word ptr [di+4]
   3089	0C93  E8 FAA6			     call    near ptr command_var_set
   3090	0C96  83 C4 08			     add     sp,8
   3091	0C99  89 46 FE			     mov     word ptr [bp-2],ax
   3092	0C9C  EB 21			     jmp     short @20@282
   3093	0C9E			     @20@198:
   3094					;
   3095					;      else if (argc ==	3)
   3096					;
   3097	0C9E  83 FE 03			     cmp     si,3
   3098	0CA1  75 17			     jne     short @20@254
   3099					;
   3100					;	    res	= command_var_set(argv[1],argv[2]);
   3101					;
   3102	0CA3  FF 75 0A			     push    word ptr [di+10]
   3103	0CA6  FF 75 08			     push    word ptr [di+8]
   3104	0CA9  FF 75 06			     push    word ptr [di+6]
   3105	0CAC  FF 75 04			     push    word ptr [di+4]
   3106	0CAF  E8 FA8A			     call    near ptr command_var_set
   3107	0CB2  83 C4 08			     add     sp,8
   3108	0CB5  89 46 FE			     mov     word ptr [bp-2],ax
   3109	0CB8  EB 05			     jmp     short @20@282
   3110	0CBA			     @20@254:
   3111					;
   3112					;      else
   3113					;	  res =	-5;
   3114					;
   3115	0CBA  C7 46 FE FFFB		     mov     word ptr [bp-2],-5
   3116	0CBF			     @20@282:
   3117					;
   3118					;      switch (res)  {
   3119					;
   3120	0CBF  8B 5E FE			     mov     bx,word ptr [bp-2]
   3121	0CC2  83 EB FB			     sub     bx,-5
   3122	0CC5  83 FB 03			     cmp     bx,3
   3123	0CC8  77 28			     ja	     short @20@506
   3124	0CCA  D1 E3			     shl     bx,1
   3125	0CCC  2E: FF A7	0CFAr		     jmp     word ptr cs:@20@C482[bx]
   3126	0CD1			     @20@366:
   3127					;
   3128					;	      case -2:
   3129					;		   putstr("Erro	em set:	nao ha espaco para novas variaveis!\n");
   3130					;
   3131	0CD1  1E			     push    ds
   3132	0CD2  B8 0808r			     mov     ax,offset DGROUP:s@+1878
   3133	0CD5  EB 10			     jmp     short @20@478
   3134	0CD7			     @20@394:
   3135					;
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 56
command.ASM



   3136					;		   return 1;
   3137					;	      case -3:
   3138					;		   putstr("Erro	em set:	o tamanho do nome da variavel e	muito grande!\n");
   3139					;
   3140	0CD7  1E			     push    ds
   3141	0CD8  B8 083Ar			     mov     ax,offset DGROUP:s@+1928
   3142	0CDB  EB 0A			     jmp     short @20@478
   3143	0CDD			     @20@422:
   3144					;
   3145					;		   return 1;
   3146					;	      case -4:
   3147					;		   putstr("Erro	em set:	o tamanho do conteudo da variavel e muito	    +
   3148				     grande!\n");
   3149					;
   3150	0CDD  1E			     push    ds
   3151	0CDE  B8 0876r			     mov     ax,offset DGROUP:s@+1988
   3152	0CE1  EB 04			     jmp     short @20@478
   3153	0CE3			     @20@450:
   3154					;
   3155					;		   return 1;
   3156					;	      case -5:
   3157					;		   putstr("Erro	em set:	argumentos demais na linha de comando!\n");
   3158					;
   3159	0CE3  1E			     push    ds
   3160	0CE4  B8 08B6r			     mov     ax,offset DGROUP:s@+2052
   3161	0CE7			     @20@478:
   3162	0CE7  50			     push    ax
   3163	0CE8  E8 0000e			     call    near ptr _putstr
   3164	0CEB  59			     pop     cx
   3165	0CEC  59			     pop     cx
   3166					;
   3167					;		   return 1;
   3168					;
   3169	0CED  B8 0001			     mov     ax,1
   3170	0CF0  EB 8F			     jmp     short @20@114
   3171	0CF2			     @20@506:
   3172	0CF2  EB 8B			     jmp     short @20@86
   3173	0CF4			     @20@534:
   3174					;
   3175					;      }
   3176					;      return 0;
   3177					;    }
   3178					;
   3179	0CF4  5F			     pop     di
   3180	0CF5  5E			     pop     si
   3181	0CF6  8B E5			     mov     sp,bp
   3182	0CF8  5D			     pop     bp
   3183	0CF9  C3			     ret
   3184	0CFA			     _cmd_set	     endp
   3185	0CFA			     @20@C482	     label   word
   3186	0CFA  0CE3r			     dw	     @20@450
   3187	0CFC  0CDDr			     dw	     @20@422
   3188	0CFE  0CD7r			     dw	     @20@394
   3189	0D00  0CD1r			     dw	     @20@366
   3190					;
   3191					;    int cmd_unset(int argc, char far *argv[])
   3192					;
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 57
command.ASM



   3193					     assume  cs:_TEXT
   3194	0D02			     _cmd_unset	     proc    near
   3195	0D02  55			     push    bp
   3196	0D03  8B EC			     mov     bp,sp
   3197	0D05  83 EC 02			     sub     sp,2
   3198					;
   3199					;    {
   3200					;      int res;
   3201					;
   3202					;      if (argc	!= 2)  {
   3203					;
   3204	0D08  83 7E 04 02		     cmp     word ptr [bp+4],2
   3205	0D0C  74 0F			     je	     short @21@142
   3206					;
   3207					;	  putstr("Erro em unset: numero	invalido de argumentos!\n");
   3208					;
   3209	0D0E  1E			     push    ds
   3210	0D0F  B8 08EBr			     mov     ax,offset DGROUP:s@+2105
   3211	0D12			     @21@86:
   3212	0D12  50			     push    ax
   3213	0D13  E8 0000e			     call    near ptr _putstr
   3214	0D16  59			     pop     cx
   3215	0D17  59			     pop     cx
   3216					;
   3217					;	  return 1;
   3218					;
   3219	0D18  B8 0001			     mov     ax,1
   3220	0D1B			     @21@114:
   3221	0D1B  EB 21			     jmp     short @21@226
   3222	0D1D			     @21@142:
   3223					;
   3224					;      }
   3225					;      res = command_var_unset(argv[1]);
   3226					;
   3227	0D1D  8B 5E 06			     mov     bx,word ptr [bp+6]
   3228	0D20  FF 77 06			     push    word ptr [bx+6]
   3229	0D23  FF 77 04			     push    word ptr [bx+4]
   3230	0D26  E8 F9A4			     call    near ptr command_var_unset
   3231	0D29  59			     pop     cx
   3232	0D2A  59			     pop     cx
   3233	0D2B  89 46 FE			     mov     word ptr [bp-2],ax
   3234					;
   3235					;      if (res == -1)  {
   3236					;
   3237	0D2E  83 7E FE FF		     cmp     word ptr [bp-2],-1
   3238	0D32  75 06			     jne     short @21@198
   3239					;
   3240					;	  putstr("Erro em unset: variavel inexistente!\n");
   3241					;
   3242	0D34  1E			     push    ds
   3243	0D35  B8 091Ar			     mov     ax,offset DGROUP:s@+2152
   3244	0D38  EB D8			     jmp     short @21@86
   3245	0D3A			     @21@198:
   3246					;
   3247					;	  return 1;
   3248					;      }
   3249					;      return 0;
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 58
command.ASM



   3250					;
   3251	0D3A  33 C0			     xor     ax,ax
   3252	0D3C  EB DD			     jmp     short @21@114
   3253	0D3E			     @21@226:
   3254					;
   3255					;    }
   3256					;
   3257	0D3E  8B E5			     mov     sp,bp
   3258	0D40  5D			     pop     bp
   3259	0D41  C3			     ret
   3260	0D42			     _cmd_unset	     endp
   3261					;
   3262					;    int cmd_echo(int argc, char far *argv[])
   3263					;
   3264					     assume  cs:_TEXT
   3265	0D42			     _cmd_echo	     proc    near
   3266	0D42  55			     push    bp
   3267	0D43  8B EC			     mov     bp,sp
   3268	0D45  83 EC 02			     sub     sp,2
   3269	0D48  56			     push    si
   3270	0D49  57			     push    di
   3271	0D4A  8B 7E 06			     mov     di,word ptr [bp+6]
   3272					;
   3273					;    {
   3274					;      int i,control_n=1;
   3275					;
   3276	0D4D  C7 46 FE 0001		     mov     word ptr [bp-2],1
   3277					;
   3278					;
   3279					;      if (argc>1)  {
   3280					;
   3281	0D52  83 7E 04 01		     cmp     word ptr [bp+4],1
   3282	0D56  7E 55			     jle     short @22@338
   3283					;
   3284					;	  if (strcmp(argv[1],"-n")==0)
   3285					;
   3286	0D58  1E			     push    ds
   3287	0D59  B8 0940r			     mov     ax,offset DGROUP:s@+2190
   3288	0D5C  50			     push    ax
   3289	0D5D  FF 75 06			     push    word ptr [di+6]
   3290	0D60  FF 75 04			     push    word ptr [di+4]
   3291	0D63  E8 0000e			     call    near ptr _strcmp
   3292	0D66  83 C4 08			     add     sp,8
   3293	0D69  0B C0			     or	     ax,ax
   3294	0D6B  75 07			     jne     short @22@114
   3295					;
   3296					;	     control_n = 0;
   3297					;
   3298	0D6D  C7 46 FE 0000		     mov     word ptr [bp-2],0
   3299	0D72  EB 0B			     jmp     short @22@142
   3300	0D74			     @22@114:
   3301					;
   3302					;	  else
   3303					;	     putstr(argv[1]);
   3304					;
   3305	0D74  FF 75 06			     push    word ptr [di+6]
   3306	0D77  FF 75 04			     push    word ptr [di+4]
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 59
command.ASM



   3307	0D7A  E8 0000e			     call    near ptr _putstr
   3308	0D7D  59			     pop     cx
   3309	0D7E  59			     pop     cx
   3310	0D7F			     @22@142:
   3311					;
   3312					;	  for (i=2;i<argc;++i)	{
   3313					;
   3314	0D7F  BE 0002			     mov     si,2
   3315	0D82  EB 24			     jmp     short @22@310
   3316	0D84			     @22@170:
   3317					;
   3318					;	      if (i!=2 || control_n)
   3319					;
   3320	0D84  83 FE 02			     cmp     si,2
   3321	0D87  75 06			     jne     short @22@226
   3322	0D89  83 7E FE 00		     cmp     word ptr [bp-2],0
   3323	0D8D  74 08			     je	     short @22@254
   3324	0D8F			     @22@226:
   3325					;
   3326					;		 putch(' ');
   3327					;
   3328	0D8F  B8 0020			     mov     ax,32
   3329	0D92  50			     push    ax
   3330	0D93  E8 0000e			     call    near ptr _putch
   3331	0D96  59			     pop     cx
   3332	0D97			     @22@254:
   3333					;
   3334					;	      putstr(argv[i]);
   3335					;
   3336	0D97  8B DE			     mov     bx,si
   3337	0D99  B1 02			     mov     cl,2
   3338	0D9B  D3 E3			     shl     bx,cl
   3339	0D9D  FF 71 02			     push    word ptr [bx+di+2]
   3340	0DA0  FF 31			     push    word ptr [bx+di]
   3341	0DA2  E8 0000e			     call    near ptr _putstr
   3342	0DA5  59			     pop     cx
   3343	0DA6  59			     pop     cx
   3344	0DA7  46			     inc     si
   3345	0DA8			     @22@310:
   3346	0DA8  3B 76 04			     cmp     si,word ptr [bp+4]
   3347	0DAB  7C D7			     jl	     short @22@170
   3348	0DAD			     @22@338:
   3349					;
   3350					;	  }
   3351					;      }
   3352					;      if (control_n)
   3353					;
   3354	0DAD  83 7E FE 00		     cmp     word ptr [bp-2],0
   3355	0DB1  74 08			     je	     short @22@394
   3356					;
   3357					;	  putch('\n');
   3358					;
   3359	0DB3  B8 000A			     mov     ax,10
   3360	0DB6  50			     push    ax
   3361	0DB7  E8 0000e			     call    near ptr _putch
   3362	0DBA  59			     pop     cx
   3363	0DBB			     @22@394:
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 60
command.ASM



   3364					;
   3365					;      return 0;
   3366					;
   3367	0DBB  33 C0			     xor     ax,ax
   3368	0DBD  EB 00			     jmp     short @22@422
   3369	0DBF			     @22@422:
   3370					;
   3371					;    }
   3372					;
   3373	0DBF  5F			     pop     di
   3374	0DC0  5E			     pop     si
   3375	0DC1  8B E5			     mov     sp,bp
   3376	0DC3  5D			     pop     bp
   3377	0DC4  C3			     ret
   3378	0DC5			     _cmd_echo	     endp
   3379	0DC5			     _TEXT   ends
   3380	00AA			     _DATA   segment word public 'DATA'
   3381	00AA			     demo_linha	     label   word
   3382	00AA  FC			     db	     252
   3383	00AB  FF			     db	     255
   3384	00AC			     exitcode	     label   word
*Warning* command.ASM(3391) Reserved word used as symbol: EXITCODE
   3385	00AC  00			     db	     0
   3386	00AD  00			     db	     0
   3387	00AE			     _DATA   ends
   3388	0DC5			     _TEXT   segment byte public 'CODE'
   3389					;
   3390					;    void demo()
   3391					;
   3392					     assume  cs:_TEXT
   3393	0DC5			     demo    proc    near
   3394	0DC5  55			     push    bp
   3395	0DC6  8B EC			     mov     bp,sp
   3396	0DC8  83 EC 16			     sub     sp,22
   3397	0DCB  56			     push    si
   3398	0DCC  57			     push    di
   3399					;
   3400					;    {
   3401					;      extern int demo_linha;
   3402					;      extern int exitcode;
   3403					;      unsigned	i;
   3404					;      int ini = demo_linha;
   3405					;
   3406	0DCD  8B 3E 00AAr		     mov     di,word ptr DGROUP:demo_linha
   3407					;
   3408					;      char str[20];
   3409					;      int ec =	exitcode;
   3410					;
   3411	0DD1  A1 00ACr			     mov     ax,word ptr DGROUP:exitcode
   3412	0DD4  89 46 FE			     mov     word ptr [bp-2],ax
   3413					;
   3414					;
   3415					;      putstrxy(65,ini+0,"⁄ƒƒ Thread ƒƒƒƒø");
   3416					;
   3417	0DD7  1E			     push    ds
   3418	0DD8  B8 0943r			     mov     ax,offset DGROUP:s@+2193
   3419	0DDB  50			     push    ax
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 61
command.ASM



   3420	0DDC  57			     push    di
   3421	0DDD  B8 0041			     mov     ax,65
   3422	0DE0  50			     push    ax
   3423	0DE1  E8 0000e			     call    near ptr _putstrxy
   3424	0DE4  83 C4 08			     add     sp,8
   3425					;
   3426					;      putstrxy(65,ini+1,"≥ PID	 =	 ≥");
   3427					;
   3428	0DE7  1E			     push    ds
   3429	0DE8  B8 0954r			     mov     ax,offset DGROUP:s@+2210
   3430	0DEB  50			     push    ax
   3431	0DEC  8B C7			     mov     ax,di
   3432	0DEE  40			     inc     ax
   3433	0DEF  50			     push    ax
   3434	0DF0  B8 0041			     mov     ax,65
   3435	0DF3  50			     push    ax
   3436	0DF4  E8 0000e			     call    near ptr _putstrxy
   3437	0DF7  83 C4 08			     add     sp,8
   3438					;
   3439					;      putstrxy(65,ini+2,"≥ Execucao:	 ≥");
   3440					;
   3441	0DFA  1E			     push    ds
   3442	0DFB  B8 0965r			     mov     ax,offset DGROUP:s@+2227
   3443	0DFE  50			     push    ax
   3444	0DFF  8B C7			     mov     ax,di
   3445	0E01  05 0002			     add     ax,2
   3446	0E04  50			     push    ax
   3447	0E05  B8 0041			     mov     ax,65
   3448	0E08  50			     push    ax
   3449	0E09  E8 0000e			     call    near ptr _putstrxy
   3450	0E0C  83 C4 08			     add     sp,8
   3451					;
   3452					;      putstrxy(65,ini+3,"≥		 ≥");
   3453					;
   3454	0E0F  1E			     push    ds
   3455	0E10  B8 0976r			     mov     ax,offset DGROUP:s@+2244
   3456	0E13  50			     push    ax
   3457	0E14  8B C7			     mov     ax,di
   3458	0E16  05 0003			     add     ax,3
   3459	0E19  50			     push    ax
   3460	0E1A  B8 0041			     mov     ax,65
   3461	0E1D  50			     push    ax
   3462	0E1E  E8 0000e			     call    near ptr _putstrxy
   3463	0E21  83 C4 08			     add     sp,8
   3464					;
   3465					;      putstrxy(65,ini+4,"¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ");
   3466					;
   3467	0E24  1E			     push    ds
   3468	0E25  B8 0987r			     mov     ax,offset DGROUP:s@+2261
   3469	0E28  50			     push    ax
   3470	0E29  8B C7			     mov     ax,di
   3471	0E2B  05 0004			     add     ax,4
   3472	0E2E  50			     push    ax
   3473	0E2F  B8 0041			     mov     ax,65
   3474	0E32  50			     push    ax
   3475	0E33  E8 0000e			     call    near ptr _putstrxy
   3476	0E36  83 C4 08			     add     sp,8
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 62
command.ASM



   3477					;
   3478					;
   3479					;      inttostr(str,getpid());
   3480					;
   3481	0E39  E8 0000e			     call    near ptr _getpid
   3482	0E3C  50			     push    ax
   3483	0E3D  16			     push    ss
   3484	0E3E  8D 46 EA			     lea     ax,word ptr [bp-22]
   3485	0E41  50			     push    ax
   3486	0E42  E8 0000e			     call    near ptr _inttostr
   3487	0E45  83 C4 06			     add     sp,6
   3488					;
   3489					;      putstrxy(74,ini+1,str);
   3490					;
   3491	0E48  16			     push    ss
   3492	0E49  8D 46 EA			     lea     ax,word ptr [bp-22]
   3493	0E4C  50			     push    ax
   3494	0E4D  8B C7			     mov     ax,di
   3495	0E4F  40			     inc     ax
   3496	0E50  50			     push    ax
   3497	0E51  B8 004A			     mov     ax,74
   3498	0E54  50			     push    ax
   3499	0E55  E8 0000e			     call    near ptr _putstrxy
   3500	0E58  83 C4 08			     add     sp,8
   3501					;
   3502					;
   3503					;      for (i=0;i<60000U;++i)  {
   3504					;
   3505	0E5B  33 F6			     xor     si,si
   3506	0E5D  EB 29			     jmp     short @23@114
   3507	0E5F			     @23@58:
   3508					;
   3509					;	   unsignedtostr(str,i,5,'0');
   3510					;
   3511	0E5F  B0 30			     mov     al,48
   3512	0E61  50			     push    ax
   3513	0E62  B8 0005			     mov     ax,5
   3514	0E65  50			     push    ax
   3515	0E66  56			     push    si
   3516	0E67  16			     push    ss
   3517	0E68  8D 46 EA			     lea     ax,word ptr [bp-22]
   3518	0E6B  50			     push    ax
   3519	0E6C  E8 0000e			     call    near ptr _unsignedtostr
   3520	0E6F  83 C4 0A			     add     sp,10
   3521					;
   3522					;	   putstrxy(70,ini+3,str);
   3523					;
   3524	0E72  16			     push    ss
   3525	0E73  8D 46 EA			     lea     ax,word ptr [bp-22]
   3526	0E76  50			     push    ax
   3527	0E77  8B C7			     mov     ax,di
   3528	0E79  05 0003			     add     ax,3
   3529	0E7C  50			     push    ax
   3530	0E7D  B8 0046			     mov     ax,70
   3531	0E80  50			     push    ax
   3532	0E81  E8 0000e			     call    near ptr _putstrxy
   3533	0E84  83 C4 08			     add     sp,8
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 63
command.ASM



   3534	0E87  46			     inc     si
   3535	0E88			     @23@114:
   3536	0E88  81 FE EA60		     cmp     si,-5536
   3537	0E8C  72 D1			     jb	     short @23@58
   3538					;
   3539					;      }
   3540					;      for (i=0;i<60000U;++i)  {
   3541					;
   3542	0E8E  33 F6			     xor     si,si
   3543	0E90  EB 29			     jmp     short @23@226
   3544	0E92			     @23@170:
   3545					;
   3546					;	   unsignedtostr(str,i,5,'0');
   3547					;
   3548	0E92  B0 30			     mov     al,48
   3549	0E94  50			     push    ax
   3550	0E95  B8 0005			     mov     ax,5
   3551	0E98  50			     push    ax
   3552	0E99  56			     push    si
   3553	0E9A  16			     push    ss
   3554	0E9B  8D 46 EA			     lea     ax,word ptr [bp-22]
   3555	0E9E  50			     push    ax
   3556	0E9F  E8 0000e			     call    near ptr _unsignedtostr
   3557	0EA2  83 C4 0A			     add     sp,10
   3558					;
   3559					;	   putstrxy(70,ini+3,str);
   3560					;
   3561	0EA5  16			     push    ss
   3562	0EA6  8D 46 EA			     lea     ax,word ptr [bp-22]
   3563	0EA9  50			     push    ax
   3564	0EAA  8B C7			     mov     ax,di
   3565	0EAC  05 0003			     add     ax,3
   3566	0EAF  50			     push    ax
   3567	0EB0  B8 0046			     mov     ax,70
   3568	0EB3  50			     push    ax
   3569	0EB4  E8 0000e			     call    near ptr _putstrxy
   3570	0EB7  83 C4 08			     add     sp,8
   3571	0EBA  46			     inc     si
   3572	0EBB			     @23@226:
   3573	0EBB  81 FE EA60		     cmp     si,-5536
   3574	0EBF  72 D1			     jb	     short @23@170
   3575					;
   3576					;      }
   3577					;      for (i=0;i<60000U;++i)  {
   3578					;
   3579	0EC1  33 F6			     xor     si,si
   3580	0EC3  EB 29			     jmp     short @23@338
   3581	0EC5			     @23@282:
   3582					;
   3583					;	   unsignedtostr(str,i,5,'0');
   3584					;
   3585	0EC5  B0 30			     mov     al,48
   3586	0EC7  50			     push    ax
   3587	0EC8  B8 0005			     mov     ax,5
   3588	0ECB  50			     push    ax
   3589	0ECC  56			     push    si
   3590	0ECD  16			     push    ss
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 64
command.ASM



   3591	0ECE  8D 46 EA			     lea     ax,word ptr [bp-22]
   3592	0ED1  50			     push    ax
   3593	0ED2  E8 0000e			     call    near ptr _unsignedtostr
   3594	0ED5  83 C4 0A			     add     sp,10
   3595					;
   3596					;	   putstrxy(70,ini+3,str);
   3597					;
   3598	0ED8  16			     push    ss
   3599	0ED9  8D 46 EA			     lea     ax,word ptr [bp-22]
   3600	0EDC  50			     push    ax
   3601	0EDD  8B C7			     mov     ax,di
   3602	0EDF  05 0003			     add     ax,3
   3603	0EE2  50			     push    ax
   3604	0EE3  B8 0046			     mov     ax,70
   3605	0EE6  50			     push    ax
   3606	0EE7  E8 0000e			     call    near ptr _putstrxy
   3607	0EEA  83 C4 08			     add     sp,8
   3608	0EED  46			     inc     si
   3609	0EEE			     @23@338:
   3610	0EEE  81 FE EA60		     cmp     si,-5536
   3611	0EF2  72 D1			     jb	     short @23@282
   3612					;
   3613					;      }
   3614					;      for (i=0;i<60000U;++i)  {
   3615					;
   3616	0EF4  33 F6			     xor     si,si
   3617	0EF6  EB 29			     jmp     short @23@450
   3618	0EF8			     @23@394:
   3619					;
   3620					;	   unsignedtostr(str,i,5,'0');
   3621					;
   3622	0EF8  B0 30			     mov     al,48
   3623	0EFA  50			     push    ax
   3624	0EFB  B8 0005			     mov     ax,5
   3625	0EFE  50			     push    ax
   3626	0EFF  56			     push    si
   3627	0F00  16			     push    ss
   3628	0F01  8D 46 EA			     lea     ax,word ptr [bp-22]
   3629	0F04  50			     push    ax
   3630	0F05  E8 0000e			     call    near ptr _unsignedtostr
   3631	0F08  83 C4 0A			     add     sp,10
   3632					;
   3633					;	   putstrxy(70,ini+3,str);
   3634					;
   3635	0F0B  16			     push    ss
   3636	0F0C  8D 46 EA			     lea     ax,word ptr [bp-22]
   3637	0F0F  50			     push    ax
   3638	0F10  8B C7			     mov     ax,di
   3639	0F12  05 0003			     add     ax,3
   3640	0F15  50			     push    ax
   3641	0F16  B8 0046			     mov     ax,70
   3642	0F19  50			     push    ax
   3643	0F1A  E8 0000e			     call    near ptr _putstrxy
   3644	0F1D  83 C4 08			     add     sp,8
   3645	0F20  46			     inc     si
   3646	0F21			     @23@450:
   3647	0F21  81 FE EA60		     cmp     si,-5536
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 65
command.ASM



   3648	0F25  72 D1			     jb	     short @23@394
   3649					;
   3650					;      }
   3651					;      for (i=0;i<60000U;++i)  {
   3652					;
   3653	0F27  33 F6			     xor     si,si
   3654	0F29  EB 29			     jmp     short @23@562
   3655	0F2B			     @23@506:
   3656					;
   3657					;	   unsignedtostr(str,i,5,'0');
   3658					;
   3659	0F2B  B0 30			     mov     al,48
   3660	0F2D  50			     push    ax
   3661	0F2E  B8 0005			     mov     ax,5
   3662	0F31  50			     push    ax
   3663	0F32  56			     push    si
   3664	0F33  16			     push    ss
   3665	0F34  8D 46 EA			     lea     ax,word ptr [bp-22]
   3666	0F37  50			     push    ax
   3667	0F38  E8 0000e			     call    near ptr _unsignedtostr
   3668	0F3B  83 C4 0A			     add     sp,10
   3669					;
   3670					;	   putstrxy(70,ini+3,str);
   3671					;
   3672	0F3E  16			     push    ss
   3673	0F3F  8D 46 EA			     lea     ax,word ptr [bp-22]
   3674	0F42  50			     push    ax
   3675	0F43  8B C7			     mov     ax,di
   3676	0F45  05 0003			     add     ax,3
   3677	0F48  50			     push    ax
   3678	0F49  B8 0046			     mov     ax,70
   3679	0F4C  50			     push    ax
   3680	0F4D  E8 0000e			     call    near ptr _putstrxy
   3681	0F50  83 C4 08			     add     sp,8
   3682	0F53  46			     inc     si
   3683	0F54			     @23@562:
   3684	0F54  81 FE EA60		     cmp     si,-5536
   3685	0F58  72 D1			     jb	     short @23@506
   3686					;
   3687					;      }
   3688					;      for (i=0;i<60000U;++i)  {
   3689					;
   3690	0F5A  33 F6			     xor     si,si
   3691	0F5C  EB 29			     jmp     short @23@674
   3692	0F5E			     @23@618:
   3693					;
   3694					;	   unsignedtostr(str,i,5,'0');
   3695					;
   3696	0F5E  B0 30			     mov     al,48
   3697	0F60  50			     push    ax
   3698	0F61  B8 0005			     mov     ax,5
   3699	0F64  50			     push    ax
   3700	0F65  56			     push    si
   3701	0F66  16			     push    ss
   3702	0F67  8D 46 EA			     lea     ax,word ptr [bp-22]
   3703	0F6A  50			     push    ax
   3704	0F6B  E8 0000e			     call    near ptr _unsignedtostr
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 66
command.ASM



   3705	0F6E  83 C4 0A			     add     sp,10
   3706					;
   3707					;	   putstrxy(70,ini+3,str);
   3708					;
   3709	0F71  16			     push    ss
   3710	0F72  8D 46 EA			     lea     ax,word ptr [bp-22]
   3711	0F75  50			     push    ax
   3712	0F76  8B C7			     mov     ax,di
   3713	0F78  05 0003			     add     ax,3
   3714	0F7B  50			     push    ax
   3715	0F7C  B8 0046			     mov     ax,70
   3716	0F7F  50			     push    ax
   3717	0F80  E8 0000e			     call    near ptr _putstrxy
   3718	0F83  83 C4 08			     add     sp,8
   3719	0F86  46			     inc     si
   3720	0F87			     @23@674:
   3721	0F87  81 FE EA60		     cmp     si,-5536
   3722	0F8B  72 D1			     jb	     short @23@618
   3723					;
   3724					;      }
   3725					;      exit(ec);
   3726					;
   3727	0F8D  FF 76 FE			     push    word ptr [bp-2]
   3728	0F90  E8 0000e			     call    near ptr _exit
   3729	0F93  59			     pop     cx
   3730					;
   3731					;    }
   3732					;
   3733	0F94  5F			     pop     di
   3734	0F95  5E			     pop     si
   3735	0F96  8B E5			     mov     sp,bp
   3736	0F98  5D			     pop     bp
   3737	0F99  C3			     ret
   3738	0F9A			     demo    endp
   3739					;
   3740					;    int cmd_demo(int argc, char far *argv[])
   3741					;
   3742					     assume  cs:_TEXT
   3743	0F9A			     _cmd_demo	     proc    near
   3744	0F9A  55			     push    bp
   3745	0F9B  8B EC			     mov     bp,sp
   3746					;
   3747					;    {
   3748					;	     extern int	demo_linha;
   3749					;
   3750					;	     if	     (argc != 2)  {
   3751					;
   3752	0F9D  83 7E 04 02		     cmp     word ptr [bp+4],2
   3753	0FA1  74 0F			     je	     short @24@142
   3754					;
   3755					;		     putstr("Erro em demo: numero invalido de argumentos!\n");
   3756					;
   3757	0FA3  1E			     push    ds
   3758	0FA4  B8 0998r			     mov     ax,offset DGROUP:s@+2278
   3759	0FA7			     @24@86:
   3760	0FA7  50			     push    ax
   3761	0FA8  E8 0000e			     call    near ptr _putstr
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 67
command.ASM



   3762	0FAB  59			     pop     cx
   3763	0FAC  59			     pop     cx
   3764					;
   3765					;		     return 1;
   3766					;
   3767	0FAD  B8 0001			     mov     ax,1
   3768	0FB0			     @24@114:
   3769	0FB0  EB 3A			     jmp     short @24@282
   3770	0FB2			     @24@142:
   3771					;
   3772					;	     }
   3773					;	     demo_linha	+= 5;
   3774					;
   3775	0FB2  83 06 00AAr 05		     add     word ptr DGROUP:demo_linha,5
   3776					;
   3777					;	     if	     (demo_linha >21)
   3778					;
   3779	0FB7  83 3E 00AAr 15		     cmp     word ptr DGROUP:demo_linha,21
   3780	0FBC  7E 06			     jle     short @24@198
   3781					;
   3782					;		     demo_linha	= 1;
   3783					;
   3784	0FBE  C7 06 00AAr 0001		     mov     word ptr DGROUP:demo_linha,1
   3785	0FC4			     @24@198:
   3786					;
   3787					;	     exitcode =	atoi(argv[1]);
   3788					;
   3789	0FC4  8B 5E 06			     mov     bx,word ptr [bp+6]
   3790	0FC7  FF 77 06			     push    word ptr [bx+6]
   3791	0FCA  FF 77 04			     push    word ptr [bx+4]
   3792	0FCD  E8 0000e			     call    near ptr _atoi
   3793	0FD0  59			     pop     cx
   3794	0FD1  59			     pop     cx
   3795	0FD2  A3 00ACr			     mov     word ptr DGROUP:exitcode,ax
   3796					;
   3797					;	     if	     (fork(demo)==miniSO_ERROR)	 {
   3798					;
   3799	0FD5  B8 0DC5r			     mov     ax,offset demo
   3800	0FD8  50			     push    ax
   3801	0FD9  E8 0000e			     call    near ptr _fork
   3802	0FDC  59			     pop     cx
   3803	0FDD  3D FFFF			     cmp     ax,-1
   3804	0FE0  75 06			     jne     short @24@254
   3805					;
   3806					;		     putstr("Erro em demo: fork() nao conseguiu	criar thread!\n");
   3807					;
   3808	0FE2  1E			     push    ds
   3809	0FE3  B8 09C6r			     mov     ax,offset DGROUP:s@+2324
   3810	0FE6  EB BF			     jmp     short @24@86
   3811	0FE8			     @24@254:
   3812					;
   3813					;		     return 1;
   3814					;	     }
   3815					;	     return 0;
   3816					;
   3817	0FE8  33 C0			     xor     ax,ax
   3818	0FEA  EB C4			     jmp     short @24@114
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 68
command.ASM



   3819	0FEC			     @24@282:
   3820					;
   3821					;    }
   3822					;
   3823	0FEC  5D			     pop     bp
   3824	0FED  C3			     ret
   3825	0FEE			     _cmd_demo	     endp
   3826					;
   3827					;    int cmd_waitpid(int argc, char far	*argv[])
   3828					;
   3829					     assume  cs:_TEXT
   3830	0FEE			     _cmd_waitpid    proc    near
   3831	0FEE  55			     push    bp
   3832	0FEF  8B EC			     mov     bp,sp
   3833	0FF1  83 EC 16			     sub     sp,22
   3834	0FF4  56			     push    si
   3835					;
   3836					;    {
   3837					;	     int     status;
   3838					;	     pid_t   pid;
   3839					;	     char    str[20];
   3840					;
   3841					;	     if	     (argc != 2)  {
   3842					;
   3843	0FF5  83 7E 04 02		     cmp     word ptr [bp+4],2
   3844	0FF9  74 0F			     je	     short @25@114
   3845					;
   3846					;		     putstr("Erro em waitpid: numero invalido de argumentos!\n");
   3847					;
   3848	0FFB  1E			     push    ds
   3849	0FFC  B8 09F8r			     mov     ax,offset DGROUP:s@+2374
   3850	0FFF  50			     push    ax
   3851	1000  E8 0000e			     call    near ptr _putstr
   3852	1003  59			     pop     cx
   3853	1004  59			     pop     cx
   3854					;
   3855					;		     return 1;
   3856					;
   3857	1005  B8 0001			     mov     ax,1
   3858	1008			     @25@86:
   3859	1008  EB 6E			     jmp     short @25@142
   3860	100A			     @25@114:
   3861					;
   3862					;	     }
   3863					;	     pid = atoi(argv[1]);
   3864					;
   3865	100A  8B 5E 06			     mov     bx,word ptr [bp+6]
   3866	100D  FF 77 06			     push    word ptr [bx+6]
   3867	1010  FF 77 04			     push    word ptr [bx+4]
   3868	1013  E8 0000e			     call    near ptr _atoi
   3869	1016  59			     pop     cx
   3870	1017  59			     pop     cx
   3871	1018  8B F0			     mov     si,ax
   3872					;
   3873					;	     pid = waitpid(pid,&status);
   3874					;
   3875	101A  16			     push    ss
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 69
command.ASM



   3876	101B  8D 46 FE			     lea     ax,word ptr [bp-2]
   3877	101E  50			     push    ax
   3878	101F  56			     push    si
   3879	1020  E8 0000e			     call    near ptr _waitpid
   3880	1023  83 C4 06			     add     sp,6
   3881	1026  8B F0			     mov     si,ax
   3882					;
   3883					;	     putstr("Processo ");
   3884					;
   3885	1028  1E			     push    ds
   3886	1029  B8 0A29r			     mov     ax,offset DGROUP:s@+2423
   3887	102C  50			     push    ax
   3888	102D  E8 0000e			     call    near ptr _putstr
   3889	1030  59			     pop     cx
   3890	1031  59			     pop     cx
   3891					;
   3892					;	     inttostr(str,pid);
   3893					;
   3894	1032  56			     push    si
   3895	1033  16			     push    ss
   3896	1034  8D 46 EA			     lea     ax,word ptr [bp-22]
   3897	1037  50			     push    ax
   3898	1038  E8 0000e			     call    near ptr _inttostr
   3899	103B  83 C4 06			     add     sp,6
   3900					;
   3901					;	     putstr(str);
   3902					;
   3903	103E  16			     push    ss
   3904	103F  8D 46 EA			     lea     ax,word ptr [bp-22]
   3905	1042  50			     push    ax
   3906	1043  E8 0000e			     call    near ptr _putstr
   3907	1046  59			     pop     cx
   3908	1047  59			     pop     cx
   3909					;
   3910					;	     putstr(" encerrado	com codigo de fim ");
   3911					;
   3912	1048  1E			     push    ds
   3913	1049  B8 0A33r			     mov     ax,offset DGROUP:s@+2433
   3914	104C  50			     push    ax
   3915	104D  E8 0000e			     call    near ptr _putstr
   3916	1050  59			     pop     cx
   3917	1051  59			     pop     cx
   3918					;
   3919					;	     inttostr(str,status);
   3920					;
   3921	1052  FF 76 FE			     push    word ptr [bp-2]
   3922	1055  16			     push    ss
   3923	1056  8D 46 EA			     lea     ax,word ptr [bp-22]
   3924	1059  50			     push    ax
   3925	105A  E8 0000e			     call    near ptr _inttostr
   3926	105D  83 C4 06			     add     sp,6
   3927					;
   3928					;	     putstr(str);
   3929					;
   3930	1060  16			     push    ss
   3931	1061  8D 46 EA			     lea     ax,word ptr [bp-22]
   3932	1064  50			     push    ax
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 70
command.ASM



   3933	1065  E8 0000e			     call    near ptr _putstr
   3934	1068  59			     pop     cx
   3935	1069  59			     pop     cx
   3936					;
   3937					;	     putstr("!\n");
   3938					;
   3939	106A  1E			     push    ds
   3940	106B  B8 0A51r			     mov     ax,offset DGROUP:s@+2463
   3941	106E  50			     push    ax
   3942	106F  E8 0000e			     call    near ptr _putstr
   3943	1072  59			     pop     cx
   3944	1073  59			     pop     cx
   3945					;
   3946					;	     return 0;
   3947					;
   3948	1074  33 C0			     xor     ax,ax
   3949	1076  EB 90			     jmp     short @25@86
   3950	1078			     @25@142:
   3951					;
   3952					;    }
   3953					;
   3954	1078  5E			     pop     si
   3955	1079  8B E5			     mov     sp,bp
   3956	107B  5D			     pop     bp
   3957	107C  C3			     ret
   3958	107D			     _cmd_waitpid    endp
   3959					;
   3960					;    int cmd_wait(int argc, char far *argv[])
   3961					;
   3962					     assume  cs:_TEXT
   3963	107D			     _cmd_wait	     proc    near
   3964	107D  55			     push    bp
   3965	107E  8B EC			     mov     bp,sp
   3966	1080  83 EC 18			     sub     sp,24
   3967	1083  56			     push    si
   3968	1084  57			     push    di
   3969	1085  8B 76 04			     mov     si,word ptr [bp+4]
   3970	1088  8B 7E 06			     mov     di,word ptr [bp+6]
   3971					;
   3972					;    {
   3973					;	     int     status=123;
   3974					;
   3975	108B  C7 46 FE 007B		     mov     word ptr [bp-2],123
   3976					;
   3977					;	     pid_t   pid;
   3978					;	     char    str[20];
   3979					;
   3980					;	     argc=argc;
   3981					;
   3982					;
   3983					;	     argv=argv;
   3984					;
   3985					;
   3986					;	     pid = wait(&status);
   3987					;
   3988	1090  16			     push    ss
   3989	1091  8D 46 FE			     lea     ax,word ptr [bp-2]
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 71
command.ASM



   3990	1094  50			     push    ax
   3991	1095  E8 0000e			     call    near ptr _wait
   3992	1098  59			     pop     cx
   3993	1099  59			     pop     cx
   3994	109A  89 46 FC			     mov     word ptr [bp-4],ax
   3995					;
   3996					;	     putstr("Processo ");
   3997					;
   3998	109D  1E			     push    ds
   3999	109E  B8 0A54r			     mov     ax,offset DGROUP:s@+2466
   4000	10A1  50			     push    ax
   4001	10A2  E8 0000e			     call    near ptr _putstr
   4002	10A5  59			     pop     cx
   4003	10A6  59			     pop     cx
   4004					;
   4005					;	     inttostr(str,pid);
   4006					;
   4007	10A7  FF 76 FC			     push    word ptr [bp-4]
   4008	10AA  16			     push    ss
   4009	10AB  8D 46 E8			     lea     ax,word ptr [bp-24]
   4010	10AE  50			     push    ax
   4011	10AF  E8 0000e			     call    near ptr _inttostr
   4012	10B2  83 C4 06			     add     sp,6
   4013					;
   4014					;	     putstr(str);
   4015					;
   4016	10B5  16			     push    ss
   4017	10B6  8D 46 E8			     lea     ax,word ptr [bp-24]
   4018	10B9  50			     push    ax
   4019	10BA  E8 0000e			     call    near ptr _putstr
   4020	10BD  59			     pop     cx
   4021	10BE  59			     pop     cx
   4022					;
   4023					;	     putstr(" encerrado	com codigo de fim ");
   4024					;
   4025	10BF  1E			     push    ds
   4026	10C0  B8 0A5Er			     mov     ax,offset DGROUP:s@+2476
   4027	10C3  50			     push    ax
   4028	10C4  E8 0000e			     call    near ptr _putstr
   4029	10C7  59			     pop     cx
   4030	10C8  59			     pop     cx
   4031					;
   4032					;	     inttostr(str,status);
   4033					;
   4034	10C9  FF 76 FE			     push    word ptr [bp-2]
   4035	10CC  16			     push    ss
   4036	10CD  8D 46 E8			     lea     ax,word ptr [bp-24]
   4037	10D0  50			     push    ax
   4038	10D1  E8 0000e			     call    near ptr _inttostr
   4039	10D4  83 C4 06			     add     sp,6
   4040					;
   4041					;	     putstr(str);
   4042					;
   4043	10D7  16			     push    ss
   4044	10D8  8D 46 E8			     lea     ax,word ptr [bp-24]
   4045	10DB  50			     push    ax
   4046	10DC  E8 0000e			     call    near ptr _putstr
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 72
command.ASM



   4047	10DF  59			     pop     cx
   4048	10E0  59			     pop     cx
   4049					;
   4050					;	     putstr("!\n");
   4051					;
   4052	10E1  1E			     push    ds
   4053	10E2  B8 0A7Cr			     mov     ax,offset DGROUP:s@+2506
   4054	10E5  50			     push    ax
   4055	10E6  E8 0000e			     call    near ptr _putstr
   4056	10E9  59			     pop     cx
   4057	10EA  59			     pop     cx
   4058					;
   4059					;	     return 0;
   4060					;
   4061	10EB  33 C0			     xor     ax,ax
   4062	10ED  EB 00			     jmp     short @26@58
   4063	10EF			     @26@58:
   4064					;
   4065					;    }
   4066					;
   4067	10EF  5F			     pop     di
   4068	10F0  5E			     pop     si
   4069	10F1  8B E5			     mov     sp,bp
   4070	10F3  5D			     pop     bp
   4071	10F4  C3			     ret
   4072	10F5			     _cmd_wait	     endp
   4073					;
   4074					;    int cmd_semls(int argc, char far *argv[])
   4075					;
   4076					     assume  cs:_TEXT
   4077	10F5			     _cmd_semls	     proc    near
   4078	10F5  55			     push    bp
   4079	10F6  8B EC			     mov     bp,sp
   4080	10F8  83 EC 14			     sub     sp,20
   4081	10FB  56			     push    si
   4082	10FC  57			     push    di
   4083					;
   4084					;    {
   4085					;	     int i,n=0;
   4086					;
   4087	10FD  33 FF			     xor     di,di
   4088					;
   4089					;	     char str[20];
   4090					;	     extern miniSO_SEM miniSO_sem[miniSO_MAXSEMAPHORES];
   4091					;
   4092					;	     argc=argc;
   4093					;
   4094	10FF  8B 46 04			     mov     ax,word ptr [bp+4]
   4095	1102  89 46 04			     mov     word ptr [bp+4],ax
   4096					;
   4097					;	     argv=argv;
   4098					;
   4099	1105  8B 46 06			     mov     ax,word ptr [bp+6]
   4100	1108  89 46 06			     mov     word ptr [bp+6],ax
   4101					;
   4102					;	     putstr("Semaphores:\n");
   4103					;
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 73
command.ASM



   4104	110B  1E			     push    ds
   4105	110C  B8 0A7Fr			     mov     ax,offset DGROUP:s@+2509
   4106	110F  50			     push    ax
   4107	1110  E8 0000e			     call    near ptr _putstr
   4108	1113  59			     pop     cx
   4109	1114  59			     pop     cx
   4110					;
   4111					;	     for     (i=0;i<miniSO_MAXSEMAPHORES;++i)
   4112					;
   4113	1115  33 F6			     xor     si,si
   4114	1117  E9 0095			     jmp     @27@142
   4115	111A			     @27@58:
   4116					;
   4117					;		     if	     (miniSO_sem[i].status!=FREE) {
   4118					;
   4119	111A  8B DE			     mov     bx,si
   4120	111C  B1 03			     mov     cl,3
   4121	111E  D3 E3			     shl     bx,cl
   4122	1120  83 BF 0000e FF		     cmp     word ptr DGROUP:_miniSO_sem[bx],-1
   4123	1125  75 03			     jne     @@6
   4124	1127  E9 0084			     jmp     @27@114
   4125	112A			     @@6:
   4126					;
   4127					;			     putstr("- id=");
   4128					;
   4129	112A  1E			     push    ds
   4130	112B  B8 0A8Cr			     mov     ax,offset DGROUP:s@+2522
   4131	112E  50			     push    ax
   4132	112F  E8 0000e			     call    near ptr _putstr
   4133	1132  59			     pop     cx
   4134	1133  59			     pop     cx
   4135					;
   4136					;			     inttostr(str,miniSO_sem[i].semid);
   4137					;
   4138	1134  8B DE			     mov     bx,si
   4139	1136  B1 03			     mov     cl,3
   4140	1138  D3 E3			     shl     bx,cl
   4141	113A  FF B7 0002e		     push    word ptr DGROUP:_miniSO_sem[bx+2]
   4142	113E  16			     push    ss
   4143	113F  8D 46 EC			     lea     ax,word ptr [bp-20]
   4144	1142  50			     push    ax
   4145	1143  E8 0000e			     call    near ptr _inttostr
   4146	1146  83 C4 06			     add     sp,6
   4147					;
   4148					;			     putstr(str);
   4149					;
   4150	1149  16			     push    ss
   4151	114A  8D 46 EC			     lea     ax,word ptr [bp-20]
   4152	114D  50			     push    ax
   4153	114E  E8 0000e			     call    near ptr _putstr
   4154	1151  59			     pop     cx
   4155	1152  59			     pop     cx
   4156					;
   4157					;			     putstr(" value=");
   4158					;
   4159	1153  1E			     push    ds
   4160	1154  B8 0A92r			     mov     ax,offset DGROUP:s@+2528
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 74
command.ASM



   4161	1157  50			     push    ax
   4162	1158  E8 0000e			     call    near ptr _putstr
   4163	115B  59			     pop     cx
   4164	115C  59			     pop     cx
   4165					;
   4166					;			     inttostr(str,miniSO_sem[i].value);
   4167					;
   4168	115D  8B DE			     mov     bx,si
   4169	115F  B1 03			     mov     cl,3
   4170	1161  D3 E3			     shl     bx,cl
   4171	1163  FF B7 0004e		     push    word ptr DGROUP:_miniSO_sem[bx+4]
   4172	1167  16			     push    ss
   4173	1168  8D 46 EC			     lea     ax,word ptr [bp-20]
   4174	116B  50			     push    ax
   4175	116C  E8 0000e			     call    near ptr _inttostr
   4176	116F  83 C4 06			     add     sp,6
   4177					;
   4178					;			     putstr(str);
   4179					;
   4180	1172  16			     push    ss
   4181	1173  8D 46 EC			     lea     ax,word ptr [bp-20]
   4182	1176  50			     push    ax
   4183	1177  E8 0000e			     call    near ptr _putstr
   4184	117A  59			     pop     cx
   4185	117B  59			     pop     cx
   4186					;
   4187					;			     putstr(" queue=");
   4188					;
   4189	117C  1E			     push    ds
   4190	117D  B8 0A9Ar			     mov     ax,offset DGROUP:s@+2536
   4191	1180  50			     push    ax
   4192	1181  E8 0000e			     call    near ptr _putstr
   4193	1184  59			     pop     cx
   4194	1185  59			     pop     cx
   4195					;
   4196					;			     inttostr(str,miniSO_sem[i].queue);
   4197					;
   4198	1186  8B DE			     mov     bx,si
   4199	1188  B1 03			     mov     cl,3
   4200	118A  D3 E3			     shl     bx,cl
   4201	118C  FF B7 0006e		     push    word ptr DGROUP:_miniSO_sem[bx+6]
   4202	1190  16			     push    ss
   4203	1191  8D 46 EC			     lea     ax,word ptr [bp-20]
   4204	1194  50			     push    ax
   4205	1195  E8 0000e			     call    near ptr _inttostr
   4206	1198  83 C4 06			     add     sp,6
   4207					;
   4208					;			     putstr(str);
   4209					;
   4210	119B  16			     push    ss
   4211	119C  8D 46 EC			     lea     ax,word ptr [bp-20]
   4212	119F  50			     push    ax
   4213	11A0  E8 0000e			     call    near ptr _putstr
   4214	11A3  59			     pop     cx
   4215	11A4  59			     pop     cx
   4216					;
   4217					;			     putch('\n');
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 75
command.ASM



   4218					;
   4219	11A5  B8 000A			     mov     ax,10
   4220	11A8  50			     push    ax
   4221	11A9  E8 0000e			     call    near ptr _putch
   4222	11AC  59			     pop     cx
   4223					;
   4224					;			     ++n;
   4225					;
   4226	11AD  47			     inc     di
   4227	11AE			     @27@114:
   4228	11AE  46			     inc     si
   4229	11AF			     @27@142:
   4230	11AF  83 FE 0A			     cmp     si,10
   4231	11B2  7D 03			     jge     @@7
   4232	11B4  E9 FF63			     jmp     @27@58
   4233	11B7			     @@7:
   4234					;
   4235					;		     }
   4236					;	     putstr("TOTAL=");
   4237					;
   4238	11B7  1E			     push    ds
   4239	11B8  B8 0AA2r			     mov     ax,offset DGROUP:s@+2544
   4240	11BB  50			     push    ax
   4241	11BC  E8 0000e			     call    near ptr _putstr
   4242	11BF  59			     pop     cx
   4243	11C0  59			     pop     cx
   4244					;
   4245					;	     inttostr(str,n);
   4246					;
   4247	11C1  57			     push    di
   4248	11C2  16			     push    ss
   4249	11C3  8D 46 EC			     lea     ax,word ptr [bp-20]
   4250	11C6  50			     push    ax
   4251	11C7  E8 0000e			     call    near ptr _inttostr
   4252	11CA  83 C4 06			     add     sp,6
   4253					;
   4254					;	     putstr(str);
   4255					;
   4256	11CD  16			     push    ss
   4257	11CE  8D 46 EC			     lea     ax,word ptr [bp-20]
   4258	11D1  50			     push    ax
   4259	11D2  E8 0000e			     call    near ptr _putstr
   4260	11D5  59			     pop     cx
   4261	11D6  59			     pop     cx
   4262					;
   4263					;	     putstr("\n\n");
   4264					;
   4265	11D7  1E			     push    ds
   4266	11D8  B8 0AA9r			     mov     ax,offset DGROUP:s@+2551
   4267	11DB  50			     push    ax
   4268	11DC  E8 0000e			     call    near ptr _putstr
   4269	11DF  59			     pop     cx
   4270	11E0  59			     pop     cx
   4271					;
   4272					;	     return 0;
   4273					;
   4274	11E1  33 C0			     xor     ax,ax
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 76
command.ASM



   4275	11E3  EB 00			     jmp     short @27@198
   4276	11E5			     @27@198:
   4277					;
   4278					;    }
   4279					;
   4280	11E5  5F			     pop     di
   4281	11E6  5E			     pop     si
   4282	11E7  8B E5			     mov     sp,bp
   4283	11E9  5D			     pop     bp
   4284	11EA  C3			     ret
   4285	11EB			     _cmd_semls	     endp
   4286					;
   4287					;    int cmd_semcreate(int argc, char far *argv[])
   4288					;
   4289					     assume  cs:_TEXT
   4290	11EB			     _cmd_semcreate  proc    near
   4291	11EB  55			     push    bp
   4292	11EC  8B EC			     mov     bp,sp
   4293	11EE  83 EC 14			     sub     sp,20
   4294	11F1  56			     push    si
   4295	11F2  57			     push    di
   4296					;
   4297					;    {
   4298					;	     int     res,value;
   4299					;	     semid_t semid;
   4300					;	     char    str[20];
   4301					;
   4302					;	     if	     (argc != 2)     {
   4303					;
   4304	11F3  83 7E 04 02		     cmp     word ptr [bp+4],2
   4305	11F7  74 0F			     je	     short @28@142
   4306					;
   4307					;		     putstr("Erro em semcreate:	numero invalido	de argumentos!\n");
   4308					;
   4309	11F9  1E			     push    ds
   4310	11FA  B8 0AACr			     mov     ax,offset DGROUP:s@+2554
   4311	11FD  50			     push    ax
   4312	11FE  E8 0000e			     call    near ptr _putstr
   4313	1201  59			     pop     cx
   4314	1202  59			     pop     cx
   4315					;
   4316					;		     return 1;
   4317					;
   4318	1203			     @28@86:
   4319	1203  B8 0001			     mov     ax,1
   4320	1206			     @28@114:
   4321	1206  EB 6C			     jmp     short @28@226
   4322	1208			     @28@142:
   4323					;
   4324					;	     }
   4325					;	     value = atoi(argv[1]);
   4326					;
   4327	1208  8B 5E 06			     mov     bx,word ptr [bp+6]
   4328	120B  FF 77 06			     push    word ptr [bx+6]
   4329	120E  FF 77 04			     push    word ptr [bx+4]
   4330	1211  E8 0000e			     call    near ptr _atoi
   4331	1214  59			     pop     cx
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 77
command.ASM



   4332	1215  59			     pop     cx
   4333	1216  8B F0			     mov     si,ax
   4334					;
   4335					;	     semid = semcreate(value);
   4336					;
   4337	1218  56			     push    si
   4338	1219  E8 0000e			     call    near ptr _semcreate
   4339	121C  59			     pop     cx
   4340	121D  8B F8			     mov     di,ax
   4341					;
   4342					;	     if	     (semid==miniSO_ERROR)
   4343					;
   4344	121F  83 FF FF			     cmp     di,-1
   4345	1222  75 02			     jne     short @28@198
   4346	1224  EB DD			     jmp     short @28@86
   4347	1226			     @28@198:
   4348					;
   4349					;		     return 1;
   4350					;	     putstr("Semaforo id=");
   4351					;
   4352	1226  1E			     push    ds
   4353	1227  B8 0ADFr			     mov     ax,offset DGROUP:s@+2605
   4354	122A  50			     push    ax
   4355	122B  E8 0000e			     call    near ptr _putstr
   4356	122E  59			     pop     cx
   4357	122F  59			     pop     cx
   4358					;
   4359					;	     inttostr(str,semid);
   4360					;
   4361	1230  57			     push    di
   4362	1231  16			     push    ss
   4363	1232  8D 46 EC			     lea     ax,word ptr [bp-20]
   4364	1235  50			     push    ax
   4365	1236  E8 0000e			     call    near ptr _inttostr
   4366	1239  83 C4 06			     add     sp,6
   4367					;
   4368					;	     putstr(str);
   4369					;
   4370	123C  16			     push    ss
   4371	123D  8D 46 EC			     lea     ax,word ptr [bp-20]
   4372	1240  50			     push    ax
   4373	1241  E8 0000e			     call    near ptr _putstr
   4374	1244  59			     pop     cx
   4375	1245  59			     pop     cx
   4376					;
   4377					;	     putstr(" criado (value=");
   4378					;
   4379	1246  1E			     push    ds
   4380	1247  B8 0AECr			     mov     ax,offset DGROUP:s@+2618
   4381	124A  50			     push    ax
   4382	124B  E8 0000e			     call    near ptr _putstr
   4383	124E  59			     pop     cx
   4384	124F  59			     pop     cx
   4385					;
   4386					;	     inttostr(str,value);
   4387					;
   4388	1250  56			     push    si
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 78
command.ASM



   4389	1251  16			     push    ss
   4390	1252  8D 46 EC			     lea     ax,word ptr [bp-20]
   4391	1255  50			     push    ax
   4392	1256  E8 0000e			     call    near ptr _inttostr
   4393	1259  83 C4 06			     add     sp,6
   4394					;
   4395					;	     putstr(str);
   4396					;
   4397	125C  16			     push    ss
   4398	125D  8D 46 EC			     lea     ax,word ptr [bp-20]
   4399	1260  50			     push    ax
   4400	1261  E8 0000e			     call    near ptr _putstr
   4401	1264  59			     pop     cx
   4402	1265  59			     pop     cx
   4403					;
   4404					;	     putstr(")\n");
   4405					;
   4406	1266  1E			     push    ds
   4407	1267  B8 0AFCr			     mov     ax,offset DGROUP:s@+2634
   4408	126A  50			     push    ax
   4409	126B  E8 0000e			     call    near ptr _putstr
   4410	126E  59			     pop     cx
   4411	126F  59			     pop     cx
   4412					;
   4413					;	     return 0;
   4414					;
   4415	1270  33 C0			     xor     ax,ax
   4416	1272  EB 92			     jmp     short @28@114
   4417	1274			     @28@226:
   4418					;
   4419					;    }
   4420					;
   4421	1274  5F			     pop     di
   4422	1275  5E			     pop     si
   4423	1276  8B E5			     mov     sp,bp
   4424	1278  5D			     pop     bp
   4425	1279  C3			     ret
   4426	127A			     _cmd_semcreate  endp
   4427					;
   4428					;    void sem_aplic()
   4429					;
   4430					     assume  cs:_TEXT
   4431	127A			     _sem_aplic	     proc    near
   4432	127A  55			     push    bp
   4433	127B  8B EC			     mov     bp,sp
   4434	127D  83 EC 14			     sub     sp,20
   4435	1280  56			     push    si
   4436	1281  57			     push    di
   4437					;
   4438					;    {
   4439					;	     extern int	demo_linha;
   4440					;	     extern semid_t semid;
   4441					;	     unsigned i;
   4442					;	     int ini = demo_linha;
   4443					;
   4444	1282  8B 3E 00AAr		     mov     di,word ptr DGROUP:demo_linha
   4445					;
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 79
command.ASM



   4446					;	     char str[20];
   4447					;
   4448					;	     putstrxy(65,ini+0,"⁄ƒƒ Thread ƒƒƒƒø");
   4449					;
   4450	1286  1E			     push    ds
   4451	1287  B8 0AFFr			     mov     ax,offset DGROUP:s@+2637
   4452	128A  50			     push    ax
   4453	128B  57			     push    di
   4454	128C  B8 0041			     mov     ax,65
   4455	128F  50			     push    ax
   4456	1290  E8 0000e			     call    near ptr _putstrxy
   4457	1293  83 C4 08			     add     sp,8
   4458					;
   4459					;	     putstrxy(65,ini+1,"≥ PID  =       ≥");
   4460					;
   4461	1296  1E			     push    ds
   4462	1297  B8 0B10r			     mov     ax,offset DGROUP:s@+2654
   4463	129A  50			     push    ax
   4464	129B  8B C7			     mov     ax,di
   4465	129D  40			     inc     ax
   4466	129E  50			     push    ax
   4467	129F  B8 0041			     mov     ax,65
   4468	12A2  50			     push    ax
   4469	12A3  E8 0000e			     call    near ptr _putstrxy
   4470	12A6  83 C4 08			     add     sp,8
   4471					;
   4472					;	     putstrxy(65,ini+2,"≥ Execucao:    ≥");
   4473					;
   4474	12A9  1E			     push    ds
   4475	12AA  B8 0B21r			     mov     ax,offset DGROUP:s@+2671
   4476	12AD  50			     push    ax
   4477	12AE  8B C7			     mov     ax,di
   4478	12B0  05 0002			     add     ax,2
   4479	12B3  50			     push    ax
   4480	12B4  B8 0041			     mov     ax,65
   4481	12B7  50			     push    ax
   4482	12B8  E8 0000e			     call    near ptr _putstrxy
   4483	12BB  83 C4 08			     add     sp,8
   4484					;
   4485					;	     putstrxy(65,ini+3,"≥	       ≥");
   4486					;
   4487	12BE  1E			     push    ds
   4488	12BF  B8 0B32r			     mov     ax,offset DGROUP:s@+2688
   4489	12C2  50			     push    ax
   4490	12C3  8B C7			     mov     ax,di
   4491	12C5  05 0003			     add     ax,3
   4492	12C8  50			     push    ax
   4493	12C9  B8 0041			     mov     ax,65
   4494	12CC  50			     push    ax
   4495	12CD  E8 0000e			     call    near ptr _putstrxy
   4496	12D0  83 C4 08			     add     sp,8
   4497					;
   4498					;	     putstrxy(65,ini+4,"¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ");
   4499					;
   4500	12D3  1E			     push    ds
   4501	12D4  B8 0B43r			     mov     ax,offset DGROUP:s@+2705
   4502	12D7  50			     push    ax
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 80
command.ASM



   4503	12D8  8B C7			     mov     ax,di
   4504	12DA  05 0004			     add     ax,4
   4505	12DD  50			     push    ax
   4506	12DE  B8 0041			     mov     ax,65
   4507	12E1  50			     push    ax
   4508	12E2  E8 0000e			     call    near ptr _putstrxy
   4509	12E5  83 C4 08			     add     sp,8
   4510					;
   4511					;
   4512					;	     inttostr(str,getpid());
   4513					;
   4514	12E8  E8 0000e			     call    near ptr _getpid
   4515	12EB  50			     push    ax
   4516	12EC  16			     push    ss
   4517	12ED  8D 46 EC			     lea     ax,word ptr [bp-20]
   4518	12F0  50			     push    ax
   4519	12F1  E8 0000e			     call    near ptr _inttostr
   4520	12F4  83 C4 06			     add     sp,6
   4521					;
   4522					;	     putstrxy(74,ini+1,str);
   4523					;
   4524	12F7  16			     push    ss
   4525	12F8  8D 46 EC			     lea     ax,word ptr [bp-20]
   4526	12FB  50			     push    ax
   4527	12FC  8B C7			     mov     ax,di
   4528	12FE  40			     inc     ax
   4529	12FF  50			     push    ax
   4530	1300  B8 004A			     mov     ax,74
   4531	1303  50			     push    ax
   4532	1304  E8 0000e			     call    near ptr _putstrxy
   4533	1307  83 C4 08			     add     sp,8
   4534					;
   4535					;	     for     (i=0;i<30000U;++i)	 {
   4536					;
   4537	130A  33 F6			     xor     si,si
   4538	130C  EB 29			     jmp     short @29@114
   4539	130E			     @29@58:
   4540					;
   4541					;		     unsignedtostr(str,i,5,'0');
   4542					;
   4543	130E  B0 30			     mov     al,48
   4544	1310  50			     push    ax
   4545	1311  B8 0005			     mov     ax,5
   4546	1314  50			     push    ax
   4547	1315  56			     push    si
   4548	1316  16			     push    ss
   4549	1317  8D 46 EC			     lea     ax,word ptr [bp-20]
   4550	131A  50			     push    ax
   4551	131B  E8 0000e			     call    near ptr _unsignedtostr
   4552	131E  83 C4 0A			     add     sp,10
   4553					;
   4554					;		     putstrxy(70,ini+3,str);
   4555					;
   4556	1321  16			     push    ss
   4557	1322  8D 46 EC			     lea     ax,word ptr [bp-20]
   4558	1325  50			     push    ax
   4559	1326  8B C7			     mov     ax,di
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 81
command.ASM



   4560	1328  05 0003			     add     ax,3
   4561	132B  50			     push    ax
   4562	132C  B8 0046			     mov     ax,70
   4563	132F  50			     push    ax
   4564	1330  E8 0000e			     call    near ptr _putstrxy
   4565	1333  83 C4 08			     add     sp,8
   4566	1336  46			     inc     si
   4567	1337			     @29@114:
   4568	1337  81 FE 7530		     cmp     si,30000
   4569	133B  72 D1			     jb	     short @29@58
   4570					;
   4571					;	     }
   4572					;	     semdown(semid);
   4573					;
   4574	133D  FF 36 001Ar		     push    word ptr DGROUP:_semid
   4575	1341  E8 0000e			     call    near ptr _semdown
   4576	1344  59			     pop     cx
   4577	1345  EB 29			     jmp     short @29@226
   4578	1347			     @29@170:
   4579					;
   4580					;	     for     (;i<60000U;++i)  {
   4581					;		     unsignedtostr(str,i,5,'0');
   4582					;
   4583	1347  B0 30			     mov     al,48
   4584	1349  50			     push    ax
   4585	134A  B8 0005			     mov     ax,5
   4586	134D  50			     push    ax
   4587	134E  56			     push    si
   4588	134F  16			     push    ss
   4589	1350  8D 46 EC			     lea     ax,word ptr [bp-20]
   4590	1353  50			     push    ax
   4591	1354  E8 0000e			     call    near ptr _unsignedtostr
   4592	1357  83 C4 0A			     add     sp,10
   4593					;
   4594					;		     putstrxy(70,ini+3,str);
   4595					;
   4596	135A  16			     push    ss
   4597	135B  8D 46 EC			     lea     ax,word ptr [bp-20]
   4598	135E  50			     push    ax
   4599	135F  8B C7			     mov     ax,di
   4600	1361  05 0003			     add     ax,3
   4601	1364  50			     push    ax
   4602	1365  B8 0046			     mov     ax,70
   4603	1368  50			     push    ax
   4604	1369  E8 0000e			     call    near ptr _putstrxy
   4605	136C  83 C4 08			     add     sp,8
   4606	136F  46			     inc     si
   4607	1370			     @29@226:
   4608	1370  81 FE EA60		     cmp     si,-5536
   4609	1374  72 D1			     jb	     short @29@170
   4610					;
   4611					;	     }
   4612					;	     exit(0);
   4613					;
   4614	1376  33 C0			     xor     ax,ax
   4615	1378  50			     push    ax
   4616	1379  E8 0000e			     call    near ptr _exit
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 82
command.ASM



   4617	137C  59			     pop     cx
   4618					;
   4619					;    }
   4620					;
   4621	137D  5F			     pop     di
   4622	137E  5E			     pop     si
   4623	137F  8B E5			     mov     sp,bp
   4624	1381  5D			     pop     bp
   4625	1382  C3			     ret
   4626	1383			     _sem_aplic	     endp
   4627					;
   4628					;    int cmd_semtest(int argc, char far	*argv[])
   4629					;
   4630					     assume  cs:_TEXT
   4631	1383			     _cmd_semtest    proc    near
   4632	1383  55			     push    bp
   4633	1384  8B EC			     mov     bp,sp
   4634					;
   4635					;    {
   4636					;	     extern int	demo_linha;
   4637					;	     extern semid_t semid;
   4638					;
   4639					;	     if	     (argc != 2)     {
   4640					;
   4641	1386  83 7E 04 02		     cmp     word ptr [bp+4],2
   4642	138A  74 0F			     je	     short @30@142
   4643					;
   4644					;		     putstr("Erro em semtest: numero invalido de argumentos!\n");
   4645					;
   4646	138C  1E			     push    ds
   4647	138D  B8 0B54r			     mov     ax,offset DGROUP:s@+2722
   4648	1390			     @30@86:
   4649	1390  50			     push    ax
   4650	1391  E8 0000e			     call    near ptr _putstr
   4651	1394  59			     pop     cx
   4652	1395  59			     pop     cx
   4653					;
   4654					;		     return 1;
   4655					;
   4656	1396  B8 0001			     mov     ax,1
   4657	1399			     @30@114:
   4658	1399  EB 3A			     jmp     short @30@282
   4659	139B			     @30@142:
   4660					;
   4661					;	     }
   4662					;	     semid = atoi(argv[1]);
   4663					;
   4664	139B  8B 5E 06			     mov     bx,word ptr [bp+6]
   4665	139E  FF 77 06			     push    word ptr [bx+6]
   4666	13A1  FF 77 04			     push    word ptr [bx+4]
   4667	13A4  E8 0000e			     call    near ptr _atoi
   4668	13A7  59			     pop     cx
   4669	13A8  59			     pop     cx
   4670	13A9  A3 001Ar			     mov     word ptr DGROUP:_semid,ax
   4671					;
   4672					;	     demo_linha	+= 5;
   4673					;
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 83
command.ASM



   4674	13AC  83 06 00AAr 05		     add     word ptr DGROUP:demo_linha,5
   4675					;
   4676					;	     if	     (demo_linha >21)
   4677					;
   4678	13B1  83 3E 00AAr 15		     cmp     word ptr DGROUP:demo_linha,21
   4679	13B6  7E 06			     jle     short @30@198
   4680					;
   4681					;		     demo_linha	= 1;
   4682					;
   4683	13B8  C7 06 00AAr 0001		     mov     word ptr DGROUP:demo_linha,1
   4684	13BE			     @30@198:
   4685					;
   4686					;	     if	     (fork(sem_aplic)==miniSO_ERROR)  {
   4687					;
   4688	13BE  B8 127Ar			     mov     ax,offset _sem_aplic
   4689	13C1  50			     push    ax
   4690	13C2  E8 0000e			     call    near ptr _fork
   4691	13C5  59			     pop     cx
   4692	13C6  3D FFFF			     cmp     ax,-1
   4693	13C9  75 06			     jne     short @30@254
   4694					;
   4695					;		     putstr("Erro em demo: fork() nao conseguiu	criar thread!\n");
   4696					;
   4697	13CB  1E			     push    ds
   4698	13CC  B8 0B85r			     mov     ax,offset DGROUP:s@+2771
   4699	13CF  EB BF			     jmp     short @30@86
   4700	13D1			     @30@254:
   4701					;
   4702					;		     return 1;
   4703					;	     }
   4704					;	     return 0;
   4705					;
   4706	13D1  33 C0			     xor     ax,ax
   4707	13D3  EB C4			     jmp     short @30@114
   4708	13D5			     @30@282:
   4709					;
   4710					;    }
   4711					;
   4712	13D5  5D			     pop     bp
   4713	13D6  C3			     ret
   4714	13D7			     _cmd_semtest    endp
   4715					;
   4716					;    int cmd_semup(int argc, char far *argv[])
   4717					;
   4718					     assume  cs:_TEXT
   4719	13D7			     _cmd_semup	     proc    near
   4720	13D7  55			     push    bp
   4721	13D8  8B EC			     mov     bp,sp
   4722	13DA  83 EC 02			     sub     sp,2
   4723					;
   4724					;    {
   4725					;	     semid_t semid;
   4726					;
   4727					;	     if	     (argc != 2)     {
   4728					;
   4729	13DD  83 7E 04 02		     cmp     word ptr [bp+4],2
   4730	13E1  74 0F			     je	     short @31@114
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 84
command.ASM



   4731					;
   4732					;		     putstr("Erro em semtest: numero invalido de argumentos!\n");
   4733					;
   4734	13E3  1E			     push    ds
   4735	13E4  B8 0BB7r			     mov     ax,offset DGROUP:s@+2821
   4736	13E7  50			     push    ax
   4737	13E8  E8 0000e			     call    near ptr _putstr
   4738	13EB  59			     pop     cx
   4739	13EC  59			     pop     cx
   4740					;
   4741					;		     return 1;
   4742					;
   4743	13ED  B8 0001			     mov     ax,1
   4744	13F0			     @31@86:
   4745	13F0  EB 1A			     jmp     short @31@142
   4746	13F2			     @31@114:
   4747					;
   4748					;	     }
   4749					;	     semid = atoi(argv[1]);
   4750					;
   4751	13F2  8B 5E 06			     mov     bx,word ptr [bp+6]
   4752	13F5  FF 77 06			     push    word ptr [bx+6]
   4753	13F8  FF 77 04			     push    word ptr [bx+4]
   4754	13FB  E8 0000e			     call    near ptr _atoi
   4755	13FE  59			     pop     cx
   4756	13FF  59			     pop     cx
   4757	1400  89 46 FE			     mov     word ptr [bp-2],ax
   4758					;
   4759					;	     return semup(semid);
   4760					;
   4761	1403  FF 76 FE			     push    word ptr [bp-2]
   4762	1406  E8 0000e			     call    near ptr _semup
   4763	1409  59			     pop     cx
   4764	140A  EB E4			     jmp     short @31@86
   4765	140C			     @31@142:
   4766					;
   4767					;    }
   4768					;
   4769	140C  8B E5			     mov     sp,bp
   4770	140E  5D			     pop     bp
   4771	140F  C3			     ret
   4772	1410			     _cmd_semup	     endp
   4773					;
   4774					;    int cmd_semdestroy(int argc, char far *argv[])
   4775					;
   4776					     assume  cs:_TEXT
   4777	1410			     _cmd_semdestroy proc    near
   4778	1410  55			     push    bp
   4779	1411  8B EC			     mov     bp,sp
   4780	1413  83 EC 02			     sub     sp,2
   4781					;
   4782					;    {
   4783					;	     semid_t semid;
   4784					;
   4785					;	     if	     (argc != 2)     {
   4786					;
   4787	1416  83 7E 04 02		     cmp     word ptr [bp+4],2
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 85
command.ASM



   4788	141A  74 0F			     je	     short @32@114
   4789					;
   4790					;		     putstr("Erro em semtest: numero invalido de argumentos!\n");
   4791					;
   4792	141C  1E			     push    ds
   4793	141D  B8 0BE8r			     mov     ax,offset DGROUP:s@+2870
   4794	1420  50			     push    ax
   4795	1421  E8 0000e			     call    near ptr _putstr
   4796	1424  59			     pop     cx
   4797	1425  59			     pop     cx
   4798					;
   4799					;		     return 1;
   4800					;
   4801	1426  B8 0001			     mov     ax,1
   4802	1429			     @32@86:
   4803	1429  EB 1A			     jmp     short @32@142
   4804	142B			     @32@114:
   4805					;
   4806					;	     }
   4807					;	     semid = atoi(argv[1]);
   4808					;
   4809	142B  8B 5E 06			     mov     bx,word ptr [bp+6]
   4810	142E  FF 77 06			     push    word ptr [bx+6]
   4811	1431  FF 77 04			     push    word ptr [bx+4]
   4812	1434  E8 0000e			     call    near ptr _atoi
   4813	1437  59			     pop     cx
   4814	1438  59			     pop     cx
   4815	1439  89 46 FE			     mov     word ptr [bp-2],ax
   4816					;
   4817					;	     return semdestroy(semid);
   4818					;
   4819	143C  FF 76 FE			     push    word ptr [bp-2]
   4820	143F  E8 0000e			     call    near ptr _semdestroy
   4821	1442  59			     pop     cx
   4822	1443  EB E4			     jmp     short @32@86
   4823	1445			     @32@142:
   4824					;
   4825					;    }
   4826					;
   4827	1445  8B E5			     mov     sp,bp
   4828	1447  5D			     pop     bp
   4829	1448  C3			     ret
   4830	1449			     _cmd_semdestroy endp
   4831					;
   4832					;    int cmd_stop(int argc, char far *argv[]) {
   4833					;
   4834					     assume  cs:_TEXT
   4835	1449			     _cmd_stop	     proc    near
   4836	1449  55			     push    bp
   4837	144A  8B EC			     mov     bp,sp
   4838	144C  56			     push    si
   4839	144D  57			     push    di
   4840					;
   4841					;
   4842					;	     int t=0;
   4843					;
   4844	144E  33 F6			     xor     si,si
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 86
command.ASM



   4845					;
   4846					;	     pid_t pid=0;
   4847					;
   4848	1450  33 FF			     xor     di,di
   4849					;
   4850					;
   4851					;	     if	(argc <	2){
   4852					;
   4853	1452  83 7E 04 02		     cmp     word ptr [bp+4],2
   4854	1456  7D 0F			     jge     short @33@142
   4855					;
   4856					;		     putstr("stop: nenhum parametro foi	fornecido\n");
   4857					;
   4858	1458  1E			     push    ds
   4859	1459  B8 0C19r			     mov     ax,offset DGROUP:s@+2919
   4860	145C			     @33@86:
   4861	145C  50			     push    ax
   4862	145D  E8 0000e			     call    near ptr _putstr
   4863	1460  59			     pop     cx
   4864	1461  59			     pop     cx
   4865					;
   4866					;		     return 1;
   4867					;
   4868	1462  B8 0001			     mov     ax,1
   4869	1465			     @33@114:
   4870	1465  EB 26			     jmp     short @33@226
   4871	1467			     @33@142:
   4872					;
   4873					;	     }
   4874					;
   4875					;	     pid = atoi(argv[1]);
   4876					;
   4877	1467  8B 5E 06			     mov     bx,word ptr [bp+6]
   4878	146A  FF 77 06			     push    word ptr [bx+6]
   4879	146D  FF 77 04			     push    word ptr [bx+4]
   4880	1470  E8 0000e			     call    near ptr _atoi
   4881	1473  59			     pop     cx
   4882	1474  59			     pop     cx
   4883	1475  8B F8			     mov     di,ax
   4884					;
   4885					;	     t = stop(pid);
   4886					;
   4887	1477  57			     push    di
   4888	1478  E8 0000e			     call    near ptr _stop
   4889	147B  59			     pop     cx
   4890	147C  8B F0			     mov     si,ax
   4891					;
   4892					;	     if(t==miniSO_ERROR){
   4893					;
   4894	147E  83 FE FF			     cmp     si,-1
   4895	1481  75 06			     jne     short @33@198
   4896					;
   4897					;		     putstr("stop: impossivel suspender	a thread\n");
   4898					;
   4899	1483  1E			     push    ds
   4900	1484  B8 0C3Fr			     mov     ax,offset DGROUP:s@+2957
   4901	1487  EB D3			     jmp     short @33@86
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 87
command.ASM



   4902	1489			     @33@198:
   4903					;
   4904					;		     return 1;
   4905					;	     }
   4906					;
   4907					;	     return 0;
   4908					;
   4909	1489  33 C0			     xor     ax,ax
   4910	148B  EB D8			     jmp     short @33@114
   4911	148D			     @33@226:
   4912					;
   4913					;    }
   4914					;
   4915	148D  5F			     pop     di
   4916	148E  5E			     pop     si
   4917	148F  5D			     pop     bp
   4918	1490  C3			     ret
   4919	1491			     _cmd_stop	     endp
   4920					;
   4921					;    int cmd_resume(int	argc, char far *argv[])	{
   4922					;
   4923					     assume  cs:_TEXT
   4924	1491			     _cmd_resume     proc    near
   4925	1491  55			     push    bp
   4926	1492  8B EC			     mov     bp,sp
   4927	1494  56			     push    si
   4928	1495  57			     push    di
   4929					;
   4930					;	     int t=0;
   4931					;
   4932	1496  33 F6			     xor     si,si
   4933					;
   4934					;	     pid_t pid=0;
   4935					;
   4936	1498  33 FF			     xor     di,di
   4937					;
   4938					;
   4939					;	     if	(argc <	2){
   4940					;
   4941	149A  83 7E 04 02		     cmp     word ptr [bp+4],2
   4942	149E  7D 0F			     jge     short @34@142
   4943					;
   4944					;		     putstr("stop: nenhum parametro foi	fornecido\n");
   4945					;
   4946	14A0  1E			     push    ds
   4947	14A1  B8 0C64r			     mov     ax,offset DGROUP:s@+2994
   4948	14A4			     @34@86:
   4949	14A4  50			     push    ax
   4950	14A5  E8 0000e			     call    near ptr _putstr
   4951	14A8  59			     pop     cx
   4952	14A9  59			     pop     cx
   4953					;
   4954					;		     return 1;
   4955					;
   4956	14AA  B8 0001			     mov     ax,1
   4957	14AD			     @34@114:
   4958	14AD  EB 26			     jmp     short @34@226
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 88
command.ASM



   4959	14AF			     @34@142:
   4960					;
   4961					;	     }
   4962					;
   4963					;	     pid = atoi(argv[1]);
   4964					;
   4965	14AF  8B 5E 06			     mov     bx,word ptr [bp+6]
   4966	14B2  FF 77 06			     push    word ptr [bx+6]
   4967	14B5  FF 77 04			     push    word ptr [bx+4]
   4968	14B8  E8 0000e			     call    near ptr _atoi
   4969	14BB  59			     pop     cx
   4970	14BC  59			     pop     cx
   4971	14BD  8B F8			     mov     di,ax
   4972					;
   4973					;	     t = resume(pid);
   4974					;
   4975	14BF  57			     push    di
   4976	14C0  E8 0000e			     call    near ptr _resume
   4977	14C3  59			     pop     cx
   4978	14C4  8B F0			     mov     si,ax
   4979					;
   4980					;	     if(t==miniSO_ERROR){
   4981					;
   4982	14C6  83 FE FF			     cmp     si,-1
   4983	14C9  75 06			     jne     short @34@198
   4984					;
   4985					;		     putstr("resume: impossivel	reiniciar a thread\n");
   4986					;
   4987	14CB  1E			     push    ds
   4988	14CC  B8 0C8Ar			     mov     ax,offset DGROUP:s@+3032
   4989	14CF  EB D3			     jmp     short @34@86
   4990	14D1			     @34@198:
   4991					;
   4992					;		     return 1;
   4993					;	     }
   4994					;
   4995					;	     return 0;
   4996					;
   4997	14D1  33 C0			     xor     ax,ax
   4998	14D3  EB D8			     jmp     short @34@114
   4999	14D5			     @34@226:
   5000					;
   5001					;    }
   5002					;
   5003	14D5  5F			     pop     di
   5004	14D6  5E			     pop     si
   5005	14D7  5D			     pop     bp
   5006	14D8  C3			     ret
   5007	14D9			     _cmd_resume     endp
   5008	14D9			     _TEXT   ends
   5009	00AE			     _DATA   segment word public 'DATA'
   5010	00AE			     _count  label   word
   5011	00AE  00			     db	     0
   5012	00AF  00			     db	     0
   5013	00B0			     _numCadeiras    label   word
   5014	00B0  03			     db	     3
   5015	00B1  00			     db	     0
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 89
command.ASM



   5016	00B2			     _DATA   ends
   5017	14D9			     _TEXT   segment byte public 'CODE'
   5018					;
   5019					;    int cmd_start_barber (int argc, char far *argv[]) {
   5020					;
   5021					     assume  cs:_TEXT
   5022	14D9			     _cmd_start_barber	     proc    near
   5023	14D9  55			     push    bp
   5024	14DA  8B EC			     mov     bp,sp
   5025					;
   5026					;
   5027					;	     fila = semcreate(0);
   5028					;
   5029	14DC  33 C0			     xor     ax,ax
   5030	14DE  50			     push    ax
   5031	14DF  E8 0000e			     call    near ptr _semcreate
   5032	14E2  59			     pop     cx
   5033	14E3  A3 0014r			     mov     word ptr DGROUP:_fila,ax
   5034					;
   5035					;	     clientes =	semcreate(0);
   5036					;
   5037	14E6  33 C0			     xor     ax,ax
   5038	14E8  50			     push    ax
   5039	14E9  E8 0000e			     call    near ptr _semcreate
   5040	14EC  59			     pop     cx
   5041	14ED  A3 0016r			     mov     word ptr DGROUP:_clientes,ax
   5042					;
   5043					;	     mutex = semcreate(1);
   5044					;
   5045	14F0  B8 0001			     mov     ax,1
   5046	14F3  50			     push    ax
   5047	14F4  E8 0000e			     call    near ptr _semcreate
   5048	14F7  59			     pop     cx
   5049	14F8  A3 0018r			     mov     word ptr DGROUP:_mutex,ax
   5050					;
   5051					;
   5052					;	     putstr("*** BARBEARIA INCIADA COM SUCESSO ***\n");
   5053					;
   5054	14FB  1E			     push    ds
   5055	14FC  B8 0CB1r			     mov     ax,offset DGROUP:s@+3071
   5056	14FF  50			     push    ax
   5057	1500  E8 0000e			     call    near ptr _putstr
   5058	1503  59			     pop     cx
   5059	1504  59			     pop     cx
   5060					;
   5061					;	     if	     (fork(startBarbeiro)==miniSO_ERROR)  {
   5062					;
   5063	1505  B8 1527r			     mov     ax,offset startBarbeiro
   5064	1508  50			     push    ax
   5065	1509  E8 0000e			     call    near ptr _fork
   5066	150C  59			     pop     cx
   5067	150D  3D FFFF			     cmp     ax,-1
   5068	1510  75 0F			     jne     short @35@114
   5069					;
   5070					;		     putstr("Erro em demo: fork() nao conseguiu	criar thread!\n");
   5071					;
   5072	1512  1E			     push    ds
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 90
command.ASM



   5073	1513  B8 0CD8r			     mov     ax,offset DGROUP:s@+3110
   5074	1516  50			     push    ax
   5075	1517  E8 0000e			     call    near ptr _putstr
   5076	151A  59			     pop     cx
   5077	151B  59			     pop     cx
   5078					;
   5079					;		     return 1;
   5080					;
   5081	151C  B8 0001			     mov     ax,1
   5082	151F			     @35@86:
   5083	151F  EB 04			     jmp     short @35@142
   5084	1521			     @35@114:
   5085					;
   5086					;	     }
   5087					;
   5088					;	     return 0;
   5089					;
   5090	1521  33 C0			     xor     ax,ax
   5091	1523  EB FA			     jmp     short @35@86
   5092	1525			     @35@142:
   5093					;
   5094					;    }
   5095					;
   5096	1525  5D			     pop     bp
   5097	1526  C3			     ret
   5098	1527			     _cmd_start_barber	     endp
   5099					;
   5100					;    void startBarbeiro(){
   5101					;
   5102					     assume  cs:_TEXT
   5103	1527			     startBarbeiro   proc    near
   5104	1527  55			     push    bp
   5105	1528  8B EC			     mov     bp,sp
   5106	152A			     @36@30:
   5107					;
   5108					;	     while(1){
   5109					;		     semdown(clientes);
   5110					;
   5111	152A  FF 36 0016r		     push    word ptr DGROUP:_clientes
   5112	152E  E8 0000e			     call    near ptr _semdown
   5113	1531  59			     pop     cx
   5114					;
   5115					;		     semdown(mutex);
   5116					;
   5117	1532  FF 36 0018r		     push    word ptr DGROUP:_mutex
   5118	1536  E8 0000e			     call    near ptr _semdown
   5119	1539  59			     pop     cx
   5120					;
   5121					;		     semup(fila);
   5122					;
   5123	153A  FF 36 0014r		     push    word ptr DGROUP:_fila
   5124	153E  E8 0000e			     call    near ptr _semup
   5125	1541  59			     pop     cx
   5126					;
   5127					;		     semup(mutex);
   5128					;
   5129	1542  FF 36 0018r		     push    word ptr DGROUP:_mutex
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 91
command.ASM



   5130	1546  E8 0000e			     call    near ptr _semup
   5131	1549  59			     pop     cx
   5132	154A  EB DE			     jmp     short @36@30
   5133					;
   5134					;	     }
   5135					;    }
   5136					;
   5137	154C  5D			     pop     bp
   5138	154D  C3			     ret
   5139	154E			     startBarbeiro   endp
   5140					;
   5141					;    int cmd_stop_barber  (int argc, char far *argv[]){
   5142					;
   5143					     assume  cs:_TEXT
   5144	154E			     _cmd_stop_barber	     proc    near
   5145	154E  55			     push    bp
   5146	154F  8B EC			     mov     bp,sp
   5147	1551  83 EC 02			     sub     sp,2
   5148					;
   5149					;
   5150					;	     pid_t pid=0;
   5151					;
   5152	1554  C7 46 FE 0000		     mov     word ptr [bp-2],0
   5153					;
   5154					;	     if	(argc <	2){
   5155					;
   5156	1559  83 7E 04 02		     cmp     word ptr [bp+4],2
   5157	155D  7D 0F			     jge     short @37@114
   5158					;
   5159					;		     putstr("stopBarber: Favor informar	o PID da barbearia!\n");
   5160					;
   5161	155F  1E			     push    ds
   5162	1560  B8 0D0Ar			     mov     ax,offset DGROUP:s@+3160
   5163	1563  50			     push    ax
   5164	1564  E8 0000e			     call    near ptr _putstr
   5165	1567  59			     pop     cx
   5166	1568  59			     pop     cx
   5167					;
   5168					;		     return 1;
   5169					;
   5170	1569  B8 0001			     mov     ax,1
   5171	156C			     @37@86:
   5172	156C  EB 1D			     jmp     short @37@142
   5173	156E			     @37@114:
   5174					;
   5175					;	     }
   5176					;	     pid = atoi(argv[1]);
   5177					;
   5178	156E  8B 5E 06			     mov     bx,word ptr [bp+6]
   5179	1571  FF 77 06			     push    word ptr [bx+6]
   5180	1574  FF 77 04			     push    word ptr [bx+4]
   5181	1577  E8 0000e			     call    near ptr _atoi
   5182	157A  59			     pop     cx
   5183	157B  59			     pop     cx
   5184	157C  89 46 FE			     mov     word ptr [bp-2],ax
   5185					;
   5186					;	     kill(1);
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 92
command.ASM



   5187					;
   5188	157F  B8 0001			     mov     ax,1
   5189	1582  50			     push    ax
   5190	1583  E8 0000e			     call    near ptr _kill
   5191	1586  59			     pop     cx
   5192					;
   5193					;
   5194					;	     return 0;
   5195					;
   5196	1587  33 C0			     xor     ax,ax
   5197	1589  EB E1			     jmp     short @37@86
   5198	158B			     @37@142:
   5199					;
   5200					;    }
   5201					;
   5202	158B  8B E5			     mov     sp,bp
   5203	158D  5D			     pop     bp
   5204	158E  C3			     ret
   5205	158F			     _cmd_stop_barber	     endp
   5206					;
   5207					;    int cmd_add_cliente_barber	(int argc, char	far *argv[]){
   5208					;
   5209					     assume  cs:_TEXT
   5210	158F			     _cmd_add_cliente_barber proc    near
   5211	158F  55			     push    bp
   5212	1590  8B EC			     mov     bp,sp
   5213					;
   5214					;
   5215					;	     semdown(mutex);
   5216					;
   5217	1592  FF 36 0018r		     push    word ptr DGROUP:_mutex
   5218	1596  E8 0000e			     call    near ptr _semdown
   5219	1599  59			     pop     cx
   5220					;
   5221					;	     if	(count < 3) {
   5222					;
   5223	159A  83 3E 00AEr 03		     cmp     word ptr DGROUP:_count,3
   5224	159F  7D 1D			     jge     short @38@86
   5225					;
   5226					;		     count ++;
   5227					;
   5228	15A1  FF 06 00AEr		     inc     word ptr DGROUP:_count
   5229					;
   5230					;		     semup(clientes); // Acorda	o barbeiro
   5231					;
   5232	15A5  FF 36 0016r		     push    word ptr DGROUP:_clientes
   5233	15A9  E8 0000e			     call    near ptr _semup
   5234	15AC  59			     pop     cx
   5235					;
   5236					;		     semup(mutex);
   5237					;
   5238	15AD  FF 36 0018r		     push    word ptr DGROUP:_mutex
   5239	15B1  E8 0000e			     call    near ptr _semup
   5240	15B4  59			     pop     cx
   5241					;
   5242					;		     semdown(fila); // Espera o	barbeiro
   5243					;
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 93
command.ASM



   5244	15B5  FF 36 0014r		     push    word ptr DGROUP:_fila
   5245	15B9  E8 0000e			     call    near ptr _semdown
   5246	15BC  EB 07			     jmp     short @38@114
   5247	15BE			     @38@86:
   5248					;
   5249					;	     } else {
   5250					;		     semup(mutex);
   5251					;
   5252	15BE  FF 36 0018r		     push    word ptr DGROUP:_mutex
   5253	15C2  E8 0000e			     call    near ptr _semup
   5254	15C5			     @38@114:
   5255	15C5  59			     pop     cx
   5256					;
   5257					;	     }
   5258					;
   5259					;	     return 0;
   5260					;
   5261	15C6  33 C0			     xor     ax,ax
   5262	15C8  EB 00			     jmp     short @38@170
   5263	15CA			     @38@170:
   5264					;
   5265					;    }
   5266					;
   5267	15CA  5D			     pop     bp
   5268	15CB  C3			     ret
   5269	15CC			     _cmd_add_cliente_barber endp
   5270	15CC			     _TEXT   ends
   5271	0014			     _BSS    segment word public 'BSS'
   5272	0014			     _fila   label   word
   5273	0014  02*(??)			     db	     2 dup (?)
   5274	0016			     _clientes	     label   word
   5275	0016  02*(??)			     db	     2 dup (?)
   5276	0018			     _mutex  label   word
   5277	0018  02*(??)			     db	     2 dup (?)
   5278	001A			     _semid  label   word
   5279	001A  02*(??)			     db	     2 dup (?)
   5280	001C			     var     label   word
   5281	001C  01F4*(??)			     db	     500 dup (?)
   5282	0210			     history_pos     label   word
   5283	0210  02*(??)			     db	     2 dup (?)
   5284	0212			     history_nxt     label   word
   5285	0212  02*(??)			     db	     2 dup (?)
   5286	0214			     history_ini     label   word
   5287	0214  02*(??)			     db	     2 dup (?)
   5288	0216			     history_len     label   word
   5289	0216  02*(??)			     db	     2 dup (?)
   5290	0218			     history label   byte
   5291	0218  0136*(??)			     db	     310 dup (?)
   5292	034E			     argv    label   dword
   5293	034E  40*(??)			     db	     64	dup (?)
   5294	038E			     argline label   byte
   5295	038E  025F*(??)			     db	     607 dup (?)
   5296	05ED			     palavra label   byte
   5297	05ED  1F*(??)			     db	     31	dup (?)
   5298	060C			     cmdline label   byte
   5299	060C  1F*(??)			     db	     31	dup (?)
   5300	062B			     end_command     label   word
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 94
command.ASM



   5301	062B  02*(??)			     db	     2 dup (?)
   5302					     ?debug  C E9
   5303					     ?debug  C FA00000000
   5304	062D			     _BSS    ends
   5305	00B2			     _DATA   segment word public 'DATA'
   5306	00B2			     s@	     label   byte
   5307	00B2  3F			     db	     '?'
   5308	00B3  00			     db	     0
   5309	00B4  20 20 20 20 20 20	20+	     db	     '			 exibe estas informacoes'
   5310	      20 20 20 20 20 20	20+
   5311	      20 20 20 20 20 65	78+
   5312	      69 62 65 20 65 73	74+
   5313	      61 73 20 69 6E 66	6F+
   5314	      72 6D 61 63 6F 65	73
   5315	00DE  00			     db	     0
   5316	00DF  68 65 6C 70		     db	     'help'
   5317	00E3  00			     db	     0
   5318	00E4  20 20 20 20 20 20	20+	     db	     '		      exibe estas informacoes'
   5319	      20 20 20 20 20 20	20+
   5320	      20 20 65 78 69 62	65+
   5321	      20 65 73 74 61 73	20+
   5322	      69 6E 66 6F 72 6D	61+
   5323	      63 6F 65 73
   5324	010B  00			     db	     0
   5325	010C  76 65 72			     db	     'ver'
   5326	010F  00			     db	     0
   5327	0110  20 20 20 20 20 20	20+	     db	     '		       mostra a	versao do MSO'
   5328	      20 20 20 20 20 20	20+
   5329	      20 20 20 6D 6F 73	74+
   5330	      72 61 20 61 20 76	65+
   5331	      72 73 61 6F 20 64	6F+
   5332	      20 4D 53 4F
   5333	0137  00			     db	     0
   5334	0138  64 61 74 65		     db	     'date'
   5335	013C  00			     db	     0
   5336	013D  20 20 20 20 20 20	20+	     db	     '		      mostra a data'
   5337	      20 20 20 20 20 20	20+
   5338	      20 20 6D 6F 73 74	72+
   5339	      61 20 61 20 64 61	74+
   5340	      61
   5341	015A  00			     db	     0
   5342	015B  74 69 6D 65		     db	     'time'
   5343	015F  00			     db	     0
   5344	0160  20 20 20 20 20 20	20+	     db	     '		      mostra a hora'
   5345	      20 20 20 20 20 20	20+
   5346	      20 20 6D 6F 73 74	72+
   5347	      61 20 61 20 68 6F	72+
   5348	      61
   5349	017D  00			     db	     0
   5350	017E  63 6C 73			     db	     'cls'
   5351	0181  00			     db	     0
   5352	0182  20 20 20 20 20 20	20+	     db	     '		       limpa a tela'
   5353	      20 20 20 20 20 20	20+
   5354	      20 20 20 6C 69 6D	70+
   5355	      61 20 61 20 74 65	6C+
   5356	      61
   5357	019F  00			     db	     0
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 95
command.ASM



   5358	01A0  63 6C 65 61 72		     db	     'clear'
   5359	01A5  00			     db	     0
   5360	01A6  20 20 20 20 20 20	20+	     db	     '		     limpa a tela'
   5361	      20 20 20 20 20 20	20+
   5362	      20 6C 69 6D 70 61	20+
   5363	      61 20 74 65 6C 61
   5364	01C1  00			     db	     0
   5365	01C2  72 65 62 6F 6F 74		     db	     'reboot'
   5366	01C8  00			     db	     0
   5367	01C9  20 20 20 20 20 20	20+	     db	     '		    reinicializa o sistema'
   5368	      20 20 20 20 20 20	20+
   5369	      72 65 69 6E 69 63	69+
   5370	      61 6C 69 7A 61 20	6F+
   5371	      20 73 69 73 74 65	6D+
   5372	      61
   5373	01ED  00			     db	     0
   5374	01EE  65 78 69 74		     db	     'exit'
   5375	01F2  00			     db	     0
   5376	01F3  20 20 20 20 20 20	20+	     db	     '		      abandona o sistema'
   5377	      20 20 20 20 20 20	20+
   5378	      20 20 61 62 61 6E	64+
   5379	      6F 6E 61 20 6F 20	73+
   5380	      69 73 74 65 6D 61
   5381	0215  00			     db	     0
   5382	0216  71 75 69 74		     db	     'quit'
   5383	021A  00			     db	     0
   5384	021B  20 20 20 20 20 20	20+	     db	     '		      abandona o sistema'
   5385	      20 20 20 20 20 20	20+
   5386	      20 20 61 62 61 6E	64+
   5387	      6F 6E 61 20 6F 20	73+
   5388	      69 73 74 65 6D 61
   5389	023D  00			     db	     0
   5390	023E  70 73			     db	     'ps'
   5391	0240  00			     db	     0
   5392	0241  20 20 20 20 20 20	20+	     db	     '			exibe processos/threads	em execucao'
   5393	      20 20 20 20 20 20	20+
   5394	      20 20 20 20 65 78	69+
   5395	      62 65 20 70 72 6F	63+
   5396	      65 73 73 6F 73 2F	74+
   5397	      68 72 65 61 64 73	20+
   5398	      65 6D 20 65 78 65	63+
   5399	      75 63 61 6F
   5400	0276  00			     db	     0
   5401	0277  6B 69 6C 6C		     db	     'kill'
   5402	027B  00			     db	     0
   5403	027C  20 3C 70 69 64 3E	20+	     db	     ' <pid>	      encerra um processo/thread'
   5404	      20 20 20 20 20 20	20+
   5405	      20 20 65 6E 63 65	72+
   5406	      72 61 20 75 6D 20	70+
   5407	      72 6F 63 65 73 73	6F+
   5408	      2F 74 68 72 65 61	64
   5409	02A6  00			     db	     0
   5410	02A7  64 65 6D 6F		     db	     'demo'
   5411	02AB  00			     db	     0
   5412	02AC  20 3C 65 78 69 74	63+	     db	     ' <exitcode>     inicia processos/threads de demonstracao'
   5413	      6F 64 65 3E 20 20	20+
   5414	      20 20 69 6E 69 63	69+
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 96
command.ASM



   5415	      61 20 70 72 6F 63	65+
   5416	      73 73 6F 73 2F 74	68+
   5417	      72 65 61 64 73 20	64+
   5418	      65 20 64 65 6D 6F	6E+
   5419	      73 74 72 61 63 61	6F
   5420	02E4  00			     db	     0
   5421	02E5  73 65 74			     db	     'set'
   5422	02E8  00			     db	     0
   5423	02E9  20 5B 3C 76 61 72	3E+	     db	     ' [<var> [<val>]] define o	valor da variavel ou exibe variavei'
   5424	      20 5B 3C 76 61 6C	3E+
   5425	      5D 5D 20 64 65 66	69+
   5426	      6E 65 20 6F 20 76	61+
   5427	      6C 6F 72 20 64 61	20+
   5428	      76 61 72 69 61 76	65+
   5429	      6C 20 6F 75 20 65	78+
   5430	      69 62 65 20 76 61	72+
   5431	      69 61 76 65 69
   5432	0326  73			     db	     's'
   5433	0327  00			     db	     0
   5434	0328  75 6E 73 65 74		     db	     'unset'
   5435	032D  00			     db	     0
   5436	032E  20 3C 76 61 72 3E	20+	     db	     ' <var>	     apaga a variavel'
   5437	      20 20 20 20 20 20	20+
   5438	      20 61 70 61 67 61	20+
   5439	      61 20 76 61 72 69	61+
   5440	      76 65 6C
   5441	034D  00			     db	     0
   5442	034E  65 63 68 6F		     db	     'echo'
   5443	0352  00			     db	     0
   5444	0353  20 5B 2D 6E 5D 20	3C+	     db	     ' [-n] <args>... imprime argumentos'
   5445	      61 72 67 73 3E 2E	2E+
   5446	      2E 20 69 6D 70 72	69+
   5447	      6D 65 20 61 72 67	75+
   5448	      6D 65 6E 74 6F 73
   5449	0375  00			     db	     0
   5450	0376  77 61 69 74 70 69	64	     db	     'waitpid'
   5451	037D  00			     db	     0
   5452	037E  20 3C 70 69 64 3E	20+	     db	     ' <pid>	   espera pelo processo-filho indicado'
   5453	      20 20 20 20 20 20	65+
   5454	      73 70 65 72 61 20	70+
   5455	      65 6C 6F 20 70 72	6F+
   5456	      63 65 73 73 6F 2D	66+
   5457	      69 6C 68 6F 20 69	6E+
   5458	      64 69 63 61 64 6F
   5459	03AE  00			     db	     0
   5460	03AF  77 61 69 74		     db	     'wait'
   5461	03B3  00			     db	     0
   5462	03B4  20 20 20 20 20 20	20+	     db	     '		      espera por um processo-filho'
   5463	      20 20 20 20 20 20	20+
   5464	      20 20 65 73 70 65	72+
   5465	      61 20 70 6F 72 20	75+
   5466	      6D 20 70 72 6F 63	65+
   5467	      73 73 6F 2D 66 69	6C+
   5468	      68 6F
   5469	03E0  00			     db	     0
   5470	03E1  73 65 6D 6C 73		     db	     'semls'
   5471	03E6  00			     db	     0
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 97
command.ASM



   5472	03E7  20 20 20 20 20 20	20+	     db	     '		     lista tabela de semaforos'
   5473	      20 20 20 20 20 20	20+
   5474	      20 6C 69 73 74 61	20+
   5475	      74 61 62 65 6C 61	20+
   5476	      64 65 20 73 65 6D	61+
   5477	      66 6F 72 6F 73
   5478	040F  00			     db	     0
   5479	0410  73 65 6D 63 72 65	61+	     db	     'semcreate'
   5480	      74 65
   5481	0419  00			     db	     0
   5482	041A  20 3C 76 61 6C 75	65+	     db	     ' <value>	 cria um semaforo'
   5483	      3E 20 20 20 63 72	69+
   5484	      61 20 75 6D 20 73	65+
   5485	      6D 61 66 6F 72 6F
   5486	0435  00			     db	     0
   5487	0436  73 65 6D 74 65 73	74	     db	     'semtest'
   5488	043D  00			     db	     0
   5489	043E  20 3C 73 65 6D 69	64+	     db	     ' <semid>	   aplicacao para teste	de semaforos'
   5490	      3E 20 20 20 20 20	61+
   5491	      70 6C 69 63 61 63	61+
   5492	      6F 20 70 61 72 61	20+
   5493	      74 65 73 74 65 20	64+
   5494	      65 20 73 65 6D 61	66+
   5495	      6F 72 6F 73
   5496	046C  00			     db	     0
   5497	046D  73 65 6D 75 70		     db	     'semup'
   5498	0472  00			     db	     0
   5499	0473  20 3C 73 65 6D 69	64+	     db	     ' <semid>	     incrementa	o valor	de um semaforo'
   5500	      3E 20 20 20 20 20	20+
   5501	      20 69 6E 63 72 65	6D+
   5502	      65 6E 74 61 20 6F	20+
   5503	      76 61 6C 6F 72 20	64+
   5504	      65 20 75 6D 20 73	65+
   5505	      6D 61 66 6F 72 6F
   5506	04A3  00			     db	     0
   5507	04A4  73 65 6D 64 65 73	74+	     db	     'semdestroy'
   5508	      72 6F 79
   5509	04AE  00			     db	     0
   5510	04AF  20 3C 73 65 6D 69	64+	     db	     ' <semid>	destroi	um semaforo'
   5511	      3E 20 20 64 65 73	74+
   5512	      72 6F 69 20 75 6D	20+
   5513	      73 65 6D 61 66 6F	72+
   5514	      6F
   5515	04CC  00			     db	     0
   5516	04CD  73 74 6F 70		     db	     'stop'
   5517	04D1  00			     db	     0
   5518	04D2  20 3C 70 69 64 3E	20+	     db	     ' <pid>	      suspende um processo/thread'
   5519	      20 20 20 20 20 20	20+
   5520	      20 20 73 75 73 70	65+
   5521	      6E 64 65 20 75 6D	20+
   5522	      70 72 6F 63 65 73	73+
   5523	      6F 2F 74 68 72 65	61+
   5524	      64
   5525	04FD  00			     db	     0
   5526	04FE  72 65 73 75 6D 65		     db	     'resume'
   5527	0504  00			     db	     0
   5528	0505  20 3C 70 69 64 3E	20+	     db	     ' <pid>	    reinicia um	processo/thread'
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 98
command.ASM



   5529	      20 20 20 20 20 20	20+
   5530	      72 65 69 6E 69 63	69+
   5531	      61 20 75 6D 20 70	72+
   5532	      6F 63 65 73 73 6F	2F+
   5533	      74 68 72 65 61 64
   5534	052E  00			     db	     0
   5535	052F  73 74 61 72 74 42	61+	     db	     'startBarber'
   5536	      72 62 65 72
   5537	053A  00			     db	     0
   5538	053B  20 3C 70 69 64 3E	20+	     db	     ' <pid>   Inicia a	Barbearia'
   5539	      20 20 49 6E 69 63	69+
   5540	      61 20 61 20 42 61	72+
   5541	      62 65 61 72 69 61
   5542	0556  00			     db	     0
   5543	0557  73 74 6F 70 42 61	72+	     db	     'stopBarber'
   5544	      62 65 72
   5545	0561  00			     db	     0
   5546	0562  20 3C 70 69 64 3E	20+	     db	     ' <pid>	Finaliza a Barbearia'
   5547	      20 20 20 46 69 6E	61+
   5548	      6C 69 7A 61 20 61	20+
   5549	      42 61 72 62 65 61	72+
   5550	      69 61
   5551	0580  00			     db	     0
   5552	0581  61 64 64 43 6C 69	65+	     db	     'addClienteBarber'
   5553	      6E 74 65 42 61 72	62+
   5554	      65 72
   5555	0591  00			     db	     0
   5556	0592  20 3C 70 69 64 3E	20+	     db	     ' <pid> Adiciona Cliente'
   5557	      41 64 69 63 69 6F	6E+
   5558	      61 20 43 6C 69 65	6E+
   5559	      74 65
   5560	05A9  00			     db	     0
   5561	05AA  20 20 20 20 20 20	20+	     db	     '			'
   5562	      20 20 20 20 20 20	20+
   5563	      20 20 20 20
   5564	05BC  DC			     db	     -36
   5565	05BD  DC			     db	     -36
   5566	05BE  DC			     db	     -36
   5567	05BF  DC			     db	     -36
   5568	05C0  DC			     db	     -36
   5569	05C1  DC			     db	     -36
   5570	05C2  DC			     db	     -36
   5571	05C3  20 20			     db	     '	'
   5572	05C5  DC			     db	     -36
   5573	05C6  DC			     db	     -36
   5574	05C7  DC			     db	     -36
   5575	05C8  DC			     db	     -36
   5576	05C9  DC			     db	     -36
   5577	05CA  DC			     db	     -36
   5578	05CB  0A			     db	     10
   5579	05CC  00			     db	     0
   5580	05CD  20			     db	     ' '
   5581	05CE  DC			     db	     -36
   5582	05CF  DC			     db	     -36
   5583	05D0  DC			     db	     -36
   5584	05D1  DC			     db	     -36
   5585	05D2  DC			     db	     -36
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 99
command.ASM



   5586	05D3  20 20			     db	     '	'
   5587	05D5  DC			     db	     -36
   5588	05D6  20 20			     db	     '	'
   5589	05D8  DC			     db	     -36
   5590	05D9  DC			     db	     -36
   5591	05DA  DC			     db	     -36
   5592	05DB  20 20			     db	     '	'
   5593	05DD  DC			     db	     -36
   5594	05DE  20			     db	     ' '
   5595	05DF  DB			     db	     -37
   5596	05E0  DB			     db	     -37
   5597	05E1  20 20 20			     db	     '	 '
   5598	05E4  DF			     db	     -33
   5599	05E5  DF			     db	     -33
   5600	05E6  20 20			     db	     '	'
   5601	05E8  DB			     db	     -37
   5602	05E9  DB			     db	     -37
   5603	05EA  20 20			     db	     '	'
   5604	05EC  DB			     db	     -37
   5605	05ED  DB			     db	     -37
   5606	05EE  20 20			     db	     '	'
   5607	05F0  00			     db	     0
   5608	05F1  4D 69 6E 69 73 53	69+	     db	     'MinisSistema Operacional'
   5609	      73 74 65 6D 61 20	4F+
   5610	      70 65 72 61 63 69	6F+
   5611	      6E 61 6C
   5612	0609  0A			     db	     10
   5613	060A  00			     db	     0
   5614	060B  DC			     db	     -36
   5615	060C  DB			     db	     -37
   5616	060D  20			     db	     ' '
   5617	060E  DB			     db	     -37
   5618	060F  20			     db	     ' '
   5619	0610  DB			     db	     -37
   5620	0611  20			     db	     ' '
   5621	0612  DC			     db	     -36
   5622	0613  DB			     db	     -37
   5623	0614  20			     db	     ' '
   5624	0615  DC			     db	     -36
   5625	0616  DB			     db	     -37
   5626	0617  20			     db	     ' '
   5627	0618  DB			     db	     -37
   5628	0619  20			     db	     ' '
   5629	061A  DC			     db	     -36
   5630	061B  DB			     db	     -37
   5631	061C  20			     db	     ' '
   5632	061D  DF			     db	     -33
   5633	061E  DF			     db	     -33
   5634	061F  DF			     db	     -33
   5635	0620  DF			     db	     -33
   5636	0621  DB			     db	     -37
   5637	0622  DB			     db	     -37
   5638	0623  DB			     db	     -37
   5639	0624  20			     db	     ' '
   5640	0625  DB			     db	     -37
   5641	0626  DB			     db	     -37
   5642	0627  DB			     db	     -37
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 100
command.ASM



   5643	0628  20 20			     db	     '	'
   5644	062A  DB			     db	     -37
   5645	062B  DB			     db	     -37
   5646	062C  20 20			     db	     '	'
   5647	062E  00			     db	     0
   5648	062F  56 73 20			     db	     'Vs '
   5649	0632  00			     db	     0
   5650	0633  32 30 31 32		     db	     '2012'
   5651	0637  00			     db	     0
   5652	0638  0A			     db	     10
   5653	0639  00			     db	     0
   5654	063A  DB			     db	     -37
   5655	063B  DB			     db	     -37
   5656	063C  20			     db	     ' '
   5657	063D  DB			     db	     -37
   5658	063E  20			     db	     ' '
   5659	063F  DB			     db	     -37
   5660	0640  20			     db	     ' '
   5661	0641  DB			     db	     -37
   5662	0642  DB			     db	     -37
   5663	0643  20			     db	     ' '
   5664	0644  DB			     db	     -37
   5665	0645  DB			     db	     -37
   5666	0646  20			     db	     ' '
   5667	0647  DB			     db	     -37
   5668	0648  20			     db	     ' '
   5669	0649  DB			     db	     -37
   5670	064A  DB			     db	     -37
   5671	064B  20			     db	     ' '
   5672	064C  DB			     db	     -37
   5673	064D  DB			     db	     -37
   5674	064E  DC			     db	     -36
   5675	064F  DC			     db	     -36
   5676	0650  DB			     db	     -37
   5677	0651  DB			     db	     -37
   5678	0652  DB			     db	     -37
   5679	0653  20			     db	     ' '
   5680	0654  DB			     db	     -37
   5681	0655  DB			     db	     -37
   5682	0656  DB			     db	     -37
   5683	0657  DC			     db	     -36
   5684	0658  DC			     db	     -36
   5685	0659  DB			     db	     -37
   5686	065A  DB			     db	     -37
   5687	065B  20 20			     db	     '	'
   5688	065D  00			     db	     0
   5689	065E  70 6F 72 20 52 6F	6C+	     db	     'por Roland Teodorowitsch'
   5690	      61 6E 64 20 54 65	6F+
   5691	      64 6F 72 6F 77 69	74+
   5692	      73 63 68
   5693	0676  0A			     db	     10
   5694	0677  00			     db	     0
   5695	0678  0A			     db	     10
   5696	0679  44 69 67 69 74 65	20	     db	     'Digite '
   5697	0680  27			     db	     39
   5698	0681  68 65 6C 70		     db	     'help'
   5699	0685  27			     db	     39
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 101
command.ASM



   5700	0686  20 6F 75 20		     db	     ' ou '
   5701	068A  27			     db	     39
   5702	068B  3F			     db	     '?'
   5703	068C  27			     db	     39
   5704	068D  20 70 61 72 61 20	61+	     db	     ' para ajuda...'
   5705	      6A 75 64 61 2E 2E	2E
   5706	069B  0A			     db	     10
   5707	069C  0A			     db	     10
   5708	069D  00			     db	     0
   5709	069E  50 52 4F 4D 50 54		     db	     'PROMPT'
   5710	06A4  00			     db	     0
   5711	06A5  6D 69 6E 69 53 4F	3E	     db	     'miniSO>'
   5712	06AC  00			     db	     0
   5713	06AD  45 52 52 4F 52 4C	45+	     db	     'ERRORLEVEL'
   5714	      56 45 4C
   5715	06B7  00			     db	     0
   5716	06B8  30			     db	     '0'
   5717	06B9  00			     db	     0
   5718	06BA  45 52 52 4F 52 4C	45+	     db	     'ERRORLEVEL'
   5719	      56 45 4C
   5720	06C4  00			     db	     0
   5721	06C5  45 72 72 6F 3A 20	63+	     db	     'Erro: comando desconhecido!'
   5722	      6F 6D 61 6E 64 6F	20+
   5723	      64 65 73 63 6F 6E	68+
   5724	      65 63 69 64 6F 21
   5725	06E0  0A			     db	     10
   5726	06E1  00			     db	     0
   5727	06E2  50 52 4F 4D 50 54		     db	     'PROMPT'
   5728	06E8  00			     db	     0
   5729	06E9  43 6F 6D 61 6E 64	6F+	     db	     'Comandos do minisSistema Operacional:'
   5730	      73 20 64 6F 20 6D	69+
   5731	      6E 69 73 53 69 73	74+
   5732	      65 6D 61 20 4F 70	65+
   5733	      72 61 63 69 6F 6E	61+
   5734	      6C 3A
   5735	070E  0A			     db	     10
   5736	070F  00			     db	     0
   5737	0710  6D 69 6E 69 73 53	69+	     db	     'minisSistema Operacional - Vs '
   5738	      73 74 65 6D 61 20	4F+
   5739	      70 65 72 61 63 69	6F+
   5740	      6E 61 6C 20 2D 20	56+
   5741	      73 20
   5742	072E  00			     db	     0
   5743	072F  32 30 31 32		     db	     '2012'
   5744	0733  00			     db	     0
   5745	0734  20 42 43 50 20 20	20+	     db	     ' BCP   PID   PPID	 STATUS	  ZLIST	 PREV	NEXT'
   5746	      50 49 44 20 20 20	50+
   5747	      50 49 44 20 20 53	54+
   5748	      41 54 55 53 20 20	20+
   5749	      5A 4C 49 53 54 20	20+
   5750	      50 52 45 56 20 20	20+
   5751	      4E 45 58 54
   5752	0762  0A			     db	     10
   5753	0763  00			     db	     0
   5754	0764  20 20			     db	     '	'
   5755	0766  00			     db	     0
   5756	0767  20 20			     db	     '	'
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 102
command.ASM



   5757	0769  00			     db	     0
   5758	076A  20 20			     db	     '	'
   5759	076C  00			     db	     0
   5760	076D  46 52 45 45 20 20	20	     db	     'FREE   '
   5761	0774  00			     db	     0
   5762	0775  52 45 41 44 59 20	20	     db	     'READY  '
   5763	077C  00			     db	     0
   5764	077D  52 55 4E 4E 49 4E	47	     db	     'RUNNING'
   5765	0784  00			     db	     0
   5766	0785  5A 4F 4D 42 49 45	20	     db	     'ZOMBIE '
   5767	078C  00			     db	     0
   5768	078D  57 41 49 54 20 20	20	     db	     'WAIT   '
   5769	0794  00			     db	     0
   5770	0795  57 41 49 54 53 49	47	     db	     'WAITSIG'
   5771	079C  00			     db	     0
   5772	079D  57 41 49 54 53 45	4D	     db	     'WAITSEM'
   5773	07A4  00			     db	     0
   5774	07A5  53 54 4F 50 50 45	44	     db	     'STOPPED'
   5775	07AC  00			     db	     0
   5776	07AD  20 20			     db	     '	'
   5777	07AF  00			     db	     0
   5778	07B0  20			     db	     ' '
   5779	07B1  00			     db	     0
   5780	07B2  20 20			     db	     '	'
   5781	07B4  00			     db	     0
   5782	07B5  45 72 72 6F 20 65	6D+	     db	     'Erro em kill: parametro nao fornecido!'
   5783	      20 6B 69 6C 6C 3A	20+
   5784	      70 61 72 61 6D 65	74+
   5785	      72 6F 20 6E 61 6F	20+
   5786	      66 6F 72 6E 65 63	69+
   5787	      64 6F 21
   5788	07DB  0A			     db	     10
   5789	07DC  00			     db	     0
   5790	07DD  6B 69 6C 6C 3A 20	69+	     db	     'kill: impossivel matar o processo/thread'
   5791	      6D 70 6F 73 73 69	76+
   5792	      65 6C 20 6D 61 74	61+
   5793	      72 20 6F 20 70 72	6F+
   5794	      63 65 73 73 6F 2F	74+
   5795	      68 72 65 61 64
   5796	0805  0A			     db	     10
   5797	0806  00			     db	     0
   5798	0807  00			     db	     0
   5799	0808  45 72 72 6F 20 65	6D+	     db	     'Erro em set: nao ha espaco para novas variaveis!'
   5800	      20 73 65 74 3A 20	6E+
   5801	      61 6F 20 68 61 20	65+
   5802	      73 70 61 63 6F 20	70+
   5803	      61 72 61 20 6E 6F	76+
   5804	      61 73 20 76 61 72	69+
   5805	      61 76 65 69 73 21
   5806	0838  0A			     db	     10
   5807	0839  00			     db	     0
   5808	083A  45 72 72 6F 20 65	6D+	     db	     'Erro em set: o tamanho do	nome da	variavel e muito grande!'
   5809	      20 73 65 74 3A 20	6F+
   5810	      20 74 61 6D 61 6E	68+
   5811	      6F 20 64 6F 20 6E	6F+
   5812	      6D 65 20 64 61 20	76+
   5813	      61 72 69 61 76 65	6C+
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 103
command.ASM



   5814	      20 65 20 6D 75 69	74+
   5815	      6F 20 67 72 61 6E	64+
   5816	      65 21
   5817	0874  0A			     db	     10
   5818	0875  00			     db	     0
   5819	0876  45 72 72 6F 20 65	6D+	     db	     'Erro em set: o tamanho do	conteudo da variavel e muito grande'
   5820	      20 73 65 74 3A 20	6F+
   5821	      20 74 61 6D 61 6E	68+
   5822	      6F 20 64 6F 20 63	6F+
   5823	      6E 74 65 75 64 6F	20+
   5824	      64 61 20 76 61 72	69+
   5825	      61 76 65 6C 20 65	20+
   5826	      6D 75 69 74 6F 20	67+
   5827	      72 61 6E 64 65
   5828	08B3  21			     db	     '!'
   5829	08B4  0A			     db	     10
   5830	08B5  00			     db	     0
   5831	08B6  45 72 72 6F 20 65	6D+	     db	     'Erro em set: argumentos demais na	linha de comando!'
   5832	      20 73 65 74 3A 20	61+
   5833	      72 67 75 6D 65 6E	74+
   5834	      6F 73 20 64 65 6D	61+
   5835	      69 73 20 6E 61 20	6C+
   5836	      69 6E 68 61 20 64	65+
   5837	      20 63 6F 6D 61 6E	64+
   5838	      6F 21
   5839	08E9  0A			     db	     10
   5840	08EA  00			     db	     0
   5841	08EB  45 72 72 6F 20 65	6D+	     db	     'Erro em unset: numero invalido de	argumentos!'
   5842	      20 75 6E 73 65 74	3A+
   5843	      20 6E 75 6D 65 72	6F+
   5844	      20 69 6E 76 61 6C	69+
   5845	      64 6F 20 64 65 20	61+
   5846	      72 67 75 6D 65 6E	74+
   5847	      6F 73 21
   5848	0918  0A			     db	     10
   5849	0919  00			     db	     0
   5850	091A  45 72 72 6F 20 65	6D+	     db	     'Erro em unset: variavel inexistente!'
   5851	      20 75 6E 73 65 74	3A+
   5852	      20 76 61 72 69 61	76+
   5853	      65 6C 20 69 6E 65	78+
   5854	      69 73 74 65 6E 74	65+
   5855	      21
   5856	093E  0A			     db	     10
   5857	093F  00			     db	     0
   5858	0940  2D 6E			     db	     '-n'
   5859	0942  00			     db	     0
   5860	0943  DA			     db	     -38
   5861	0944  C4			     db	     -60
   5862	0945  C4			     db	     -60
   5863	0946  20 54 68 72 65 61	64+	     db	     ' Thread '
   5864	      20
   5865	094E  C4			     db	     -60
   5866	094F  C4			     db	     -60
   5867	0950  C4			     db	     -60
   5868	0951  C4			     db	     -60
   5869	0952  BF			     db	     -65
   5870	0953  00			     db	     0
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 104
command.ASM



   5871	0954  B3			     db	     -77
   5872	0955  20 50 49 44 20 20	3D+	     db	     ' PID  =	    '
   5873	      20 20 20 20 20 20	20
   5874	0963  B3			     db	     -77
   5875	0964  00			     db	     0
   5876	0965  B3			     db	     -77
   5877	0966  20 45 78 65 63 75	63+	     db	     ' Execucao:    '
   5878	      61 6F 3A 20 20 20	20
   5879	0974  B3			     db	     -77
   5880	0975  00			     db	     0
   5881	0976  B3			     db	     -77
   5882	0977  20 20 20 20 20 20	20+	     db	     '		    '
   5883	      20 20 20 20 20 20	20
   5884	0985  B3			     db	     -77
   5885	0986  00			     db	     0
   5886	0987  C0			     db	     -64
   5887	0988  C4			     db	     -60
   5888	0989  C4			     db	     -60
   5889	098A  C4			     db	     -60
   5890	098B  C4			     db	     -60
   5891	098C  C4			     db	     -60
   5892	098D  C4			     db	     -60
   5893	098E  C4			     db	     -60
   5894	098F  C4			     db	     -60
   5895	0990  C4			     db	     -60
   5896	0991  C4			     db	     -60
   5897	0992  C4			     db	     -60
   5898	0993  C4			     db	     -60
   5899	0994  C4			     db	     -60
   5900	0995  C4			     db	     -60
   5901	0996  D9			     db	     -39
   5902	0997  00			     db	     0
   5903	0998  45 72 72 6F 20 65	6D+	     db	     'Erro em demo: numero invalido de argumentos!'
   5904	      20 64 65 6D 6F 3A	20+
   5905	      6E 75 6D 65 72 6F	20+
   5906	      69 6E 76 61 6C 69	64+
   5907	      6F 20 64 65 20 61	72+
   5908	      67 75 6D 65 6E 74	6F+
   5909	      73 21
   5910	09C4  0A			     db	     10
   5911	09C5  00			     db	     0
   5912	09C6  45 72 72 6F 20 65	6D+	     db	     'Erro em demo: fork() nao conseguiu criar thread!'
   5913	      20 64 65 6D 6F 3A	20+
   5914	      66 6F 72 6B 28 29	20+
   5915	      6E 61 6F 20 63 6F	6E+
   5916	      73 65 67 75 69 75	20+
   5917	      63 72 69 61 72 20	74+
   5918	      68 72 65 61 64 21
   5919	09F6  0A			     db	     10
   5920	09F7  00			     db	     0
   5921	09F8  45 72 72 6F 20 65	6D+	     db	     'Erro em waitpid: numero invalido de argumentos!'
   5922	      20 77 61 69 74 70	69+
   5923	      64 3A 20 6E 75 6D	65+
   5924	      72 6F 20 69 6E 76	61+
   5925	      6C 69 64 6F 20 64	65+
   5926	      20 61 72 67 75 6D	65+
   5927	      6E 74 6F 73 21
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 105
command.ASM



   5928	0A27  0A			     db	     10
   5929	0A28  00			     db	     0
   5930	0A29  50 72 6F 63 65 73	73+	     db	     'Processo '
   5931	      6F 20
   5932	0A32  00			     db	     0
   5933	0A33  20 65 6E 63 65 72	72+	     db	     ' encerrado com codigo de fim '
   5934	      61 64 6F 20 63 6F	6D+
   5935	      20 63 6F 64 69 67	6F+
   5936	      20 64 65 20 66 69	6D+
   5937	      20
   5938	0A50  00			     db	     0
   5939	0A51  21			     db	     '!'
   5940	0A52  0A			     db	     10
   5941	0A53  00			     db	     0
   5942	0A54  50 72 6F 63 65 73	73+	     db	     'Processo '
   5943	      6F 20
   5944	0A5D  00			     db	     0
   5945	0A5E  20 65 6E 63 65 72	72+	     db	     ' encerrado com codigo de fim '
   5946	      61 64 6F 20 63 6F	6D+
   5947	      20 63 6F 64 69 67	6F+
   5948	      20 64 65 20 66 69	6D+
   5949	      20
   5950	0A7B  00			     db	     0
   5951	0A7C  21			     db	     '!'
   5952	0A7D  0A			     db	     10
   5953	0A7E  00			     db	     0
   5954	0A7F  53 65 6D 61 70 68	6F+	     db	     'Semaphores:'
   5955	      72 65 73 3A
   5956	0A8A  0A			     db	     10
   5957	0A8B  00			     db	     0
   5958	0A8C  2D 20 69 64 3D		     db	     '-	id='
   5959	0A91  00			     db	     0
   5960	0A92  20 76 61 6C 75 65	3D	     db	     ' value='
   5961	0A99  00			     db	     0
   5962	0A9A  20 71 75 65 75 65	3D	     db	     ' queue='
   5963	0AA1  00			     db	     0
   5964	0AA2  54 4F 54 41 4C 3D		     db	     'TOTAL='
   5965	0AA8  00			     db	     0
   5966	0AA9  0A			     db	     10
   5967	0AAA  0A			     db	     10
   5968	0AAB  00			     db	     0
   5969	0AAC  45 72 72 6F 20 65	6D+	     db	     'Erro em semcreate: numero	invalido de argumentos!'
   5970	      20 73 65 6D 63 72	65+
   5971	      61 74 65 3A 20 6E	75+
   5972	      6D 65 72 6F 20 69	6E+
   5973	      76 61 6C 69 64 6F	20+
   5974	      64 65 20 61 72 67	75+
   5975	      6D 65 6E 74 6F 73	21
   5976	0ADD  0A			     db	     10
   5977	0ADE  00			     db	     0
   5978	0ADF  53 65 6D 61 66 6F	72+	     db	     'Semaforo id='
   5979	      6F 20 69 64 3D
   5980	0AEB  00			     db	     0
   5981	0AEC  20 63 72 69 61 64	6F+	     db	     ' criado (value='
   5982	      20 28 76 61 6C 75	65+
   5983	      3D
   5984	0AFB  00			     db	     0
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 106
command.ASM



   5985	0AFC  29			     db	     ')'
   5986	0AFD  0A			     db	     10
   5987	0AFE  00			     db	     0
   5988	0AFF  DA			     db	     -38
   5989	0B00  C4			     db	     -60
   5990	0B01  C4			     db	     -60
   5991	0B02  20 54 68 72 65 61	64+	     db	     ' Thread '
   5992	      20
   5993	0B0A  C4			     db	     -60
   5994	0B0B  C4			     db	     -60
   5995	0B0C  C4			     db	     -60
   5996	0B0D  C4			     db	     -60
   5997	0B0E  BF			     db	     -65
   5998	0B0F  00			     db	     0
   5999	0B10  B3			     db	     -77
   6000	0B11  20 50 49 44 20 20	3D+	     db	     ' PID  =	    '
   6001	      20 20 20 20 20 20	20
   6002	0B1F  B3			     db	     -77
   6003	0B20  00			     db	     0
   6004	0B21  B3			     db	     -77
   6005	0B22  20 45 78 65 63 75	63+	     db	     ' Execucao:    '
   6006	      61 6F 3A 20 20 20	20
   6007	0B30  B3			     db	     -77
   6008	0B31  00			     db	     0
   6009	0B32  B3			     db	     -77
   6010	0B33  20 20 20 20 20 20	20+	     db	     '		    '
   6011	      20 20 20 20 20 20	20
   6012	0B41  B3			     db	     -77
   6013	0B42  00			     db	     0
   6014	0B43  C0			     db	     -64
   6015	0B44  C4			     db	     -60
   6016	0B45  C4			     db	     -60
   6017	0B46  C4			     db	     -60
   6018	0B47  C4			     db	     -60
   6019	0B48  C4			     db	     -60
   6020	0B49  C4			     db	     -60
   6021	0B4A  C4			     db	     -60
   6022	0B4B  C4			     db	     -60
   6023	0B4C  C4			     db	     -60
   6024	0B4D  C4			     db	     -60
   6025	0B4E  C4			     db	     -60
   6026	0B4F  C4			     db	     -60
   6027	0B50  C4			     db	     -60
   6028	0B51  C4			     db	     -60
   6029	0B52  D9			     db	     -39
   6030	0B53  00			     db	     0
   6031	0B54  45 72 72 6F 20 65	6D+	     db	     'Erro em semtest: numero invalido de argumentos!'
   6032	      20 73 65 6D 74 65	73+
   6033	      74 3A 20 6E 75 6D	65+
   6034	      72 6F 20 69 6E 76	61+
   6035	      6C 69 64 6F 20 64	65+
   6036	      20 61 72 67 75 6D	65+
   6037	      6E 74 6F 73 21
   6038	0B83  0A			     db	     10
   6039	0B84  00			     db	     0
   6040	0B85  45 72 72 6F 20 65	6D+	     db	     'Erro em demo: fork() nao conseguiu criar thread!'
   6041	      20 64 65 6D 6F 3A	20+
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 107
command.ASM



   6042	      66 6F 72 6B 28 29	20+
   6043	      6E 61 6F 20 63 6F	6E+
   6044	      73 65 67 75 69 75	20+
   6045	      63 72 69 61 72 20	74+
   6046	      68 72 65 61 64 21
   6047	0BB5  0A			     db	     10
   6048	0BB6  00			     db	     0
   6049	0BB7  45 72 72 6F 20 65	6D+	     db	     'Erro em semtest: numero invalido de argumentos!'
   6050	      20 73 65 6D 74 65	73+
   6051	      74 3A 20 6E 75 6D	65+
   6052	      72 6F 20 69 6E 76	61+
   6053	      6C 69 64 6F 20 64	65+
   6054	      20 61 72 67 75 6D	65+
   6055	      6E 74 6F 73 21
   6056	0BE6  0A			     db	     10
   6057	0BE7  00			     db	     0
   6058	0BE8  45 72 72 6F 20 65	6D+	     db	     'Erro em semtest: numero invalido de argumentos!'
   6059	      20 73 65 6D 74 65	73+
   6060	      74 3A 20 6E 75 6D	65+
   6061	      72 6F 20 69 6E 76	61+
   6062	      6C 69 64 6F 20 64	65+
   6063	      20 61 72 67 75 6D	65+
   6064	      6E 74 6F 73 21
   6065	0C17  0A			     db	     10
   6066	0C18  00			     db	     0
   6067	0C19  73 74 6F 70 3A 20	6E+	     db	     'stop: nenhum parametro foi fornecido'
   6068	      65 6E 68 75 6D 20	70+
   6069	      61 72 61 6D 65 74	72+
   6070	      6F 20 66 6F 69 20	66+
   6071	      6F 72 6E 65 63 69	64+
   6072	      6F
   6073	0C3D  0A			     db	     10
   6074	0C3E  00			     db	     0
   6075	0C3F  73 74 6F 70 3A 20	69+	     db	     'stop: impossivel suspender a thread'
   6076	      6D 70 6F 73 73 69	76+
   6077	      65 6C 20 73 75 73	70+
   6078	      65 6E 64 65 72 20	61+
   6079	      20 74 68 72 65 61	64
   6080	0C62  0A			     db	     10
   6081	0C63  00			     db	     0
   6082	0C64  73 74 6F 70 3A 20	6E+	     db	     'stop: nenhum parametro foi fornecido'
   6083	      65 6E 68 75 6D 20	70+
   6084	      61 72 61 6D 65 74	72+
   6085	      6F 20 66 6F 69 20	66+
   6086	      6F 72 6E 65 63 69	64+
   6087	      6F
   6088	0C88  0A			     db	     10
   6089	0C89  00			     db	     0
   6090	0C8A  72 65 73 75 6D 65	3A+	     db	     'resume: impossivel reiniciar a thread'
   6091	      20 69 6D 70 6F 73	73+
   6092	      69 76 65 6C 20 72	65+
   6093	      69 6E 69 63 69 61	72+
   6094	      20 61 20 74 68 72	65+
   6095	      61 64
   6096	0CAF  0A			     db	     10
   6097	0CB0  00			     db	     0
   6098	0CB1  2A 2A 2A 20 42 41	52+	     db	     '*** BARBEARIA INCIADA COM	SUCESSO	***'
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 108
command.ASM



   6099	      42 45 41 52 49 41	20+
   6100	      49 4E 43 49 41 44	41+
   6101	      20 43 4F 4D 20 53	55+
   6102	      43 45 53 53 4F 20	2A+
   6103	      2A 2A
   6104	0CD6  0A			     db	     10
   6105	0CD7  00			     db	     0
   6106	0CD8  45 72 72 6F 20 65	6D+	     db	     'Erro em demo: fork() nao conseguiu criar thread!'
   6107	      20 64 65 6D 6F 3A	20+
   6108	      66 6F 72 6B 28 29	20+
   6109	      6E 61 6F 20 63 6F	6E+
   6110	      73 65 67 75 69 75	20+
   6111	      63 72 69 61 72 20	74+
   6112	      68 72 65 61 64 21
   6113	0D08  0A			     db	     10
   6114	0D09  00			     db	     0
   6115	0D0A  73 74 6F 70 42 61	72+	     db	     'stopBarber: Favor	informar o PID da barbearia!'
   6116	      62 65 72 3A 20 46	61+
   6117	      76 6F 72 20 69 6E	66+
   6118	      6F 72 6D 61 72 20	6F+
   6119	      20 50 49 44 20 64	61+
   6120	      20 62 61 72 62 65	61+
   6121	      72 69 61 21
   6122	0D38  0A			     db	     10
   6123	0D39  00			     db	     0
   6124	0D3A			     _DATA   ends
   6125	15CC			     _TEXT   segment byte public 'CODE'
   6126	15CC			     _TEXT   ends
   6127					     public  _fila
   6128					     public  _clientes
   6129					     public  _mutex
   6130					     public  _numCadeiras
   6131					     public  _count
   6132					     public  _sem_aplic
   6133					     public  _semid
   6134					     extrn   _miniSO_sem:word
   6135				     _exitcode	     equ     exitcode
   6136				     _demo_linha     equ     demo_linha
   6137				     _startBarbeiro  equ     startBarbeiro
   6138				     _demo   equ     demo
   6139					     extrn   _miniSO_thread:word
   6140				     _commands	     equ     commands
   6141				     _var    equ     var
   6142				     _num_var	     equ     num_var
   6143				     _history_pos    equ     history_pos
   6144				     _history_nxt    equ     history_nxt
   6145				     _history_ini    equ     history_ini
   6146				     _history_len    equ     history_len
   6147				     _history	     equ     history
   6148				     _argv   equ     argv
   6149				     _argline	     equ     argline
   6150				     _palavra	     equ     palavra
   6151				     _cmdline	     equ     cmdline
   6152				     _end_command    equ     end_command
   6153					     extrn   _resume:near
   6154					     extrn   _stop:near
   6155					     extrn   _semdestroy:near
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 109
command.ASM



   6156					     extrn   _semdown:near
   6157					     extrn   _semup:near
   6158					     extrn   _semcreate:near
   6159					     extrn   _getpid:near
   6160					     extrn   _exit:near
   6161					     extrn   _waitpid:near
   6162					     extrn   _wait:near
   6163					     extrn   _kill:near
   6164					     extrn   _fork:near
   6165					     extrn   _reboot:near
   6166					     extrn   _inttostr:near
   6167					     extrn   _unsignedtostr:near
   6168					     extrn   _atoi:near
   6169					     extrn   _strlen:near
   6170					     extrn   _strcmp:near
   6171					     extrn   _strcpy:near
   6172					     extrn   _gettime:near
   6173					     extrn   _getdate:near
   6174					     extrn   _gotoxy:near
   6175					     extrn   _wherey:near
   6176					     extrn   _wherex:near
   6177					     extrn   _setcolor:near
   6178					     extrn   _getcolor:near
   6179					     extrn   _putstrxy:near
   6180					     extrn   _putstr:near
   6181					     extrn   _clrscr:near
   6182					     extrn   _getch:near
   6183					     extrn   _putch:near
   6184					     public  _cmd_add_cliente_barber
   6185					     public  _cmd_stop_barber
   6186					     public  _cmd_start_barber
   6187					     public  _cmd_resume
   6188					     public  _cmd_stop
   6189					     public  _cmd_semdestroy
   6190					     public  _cmd_semup
   6191					     public  _cmd_semtest
   6192					     public  _cmd_semcreate
   6193					     public  _cmd_semls
   6194					     public  _cmd_waitpid
   6195					     public  _cmd_wait
   6196					     public  _cmd_echo
   6197					     public  _cmd_unset
   6198					     public  _cmd_set
   6199					     public  _cmd_demo
   6200					     public  _cmd_kill
   6201					     public  _cmd_ps
   6202					     public  _cmd_ver
   6203					     public  _cmd_cls
   6204					     public  _cmd_time
   6205					     public  _cmd_date
   6206					     public  _cmd_help
   6207					     public  _cmd_reboot
   6208					     public  _cmd_exit
   6209				     _command_var_set	     equ     command_var_set
   6210				     _command_var_value	     equ     command_var_value
   6211				     _command_var_unset	     equ     command_var_unset
   6212				     _command_var_search     equ     command_var_search
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 110
command.ASM



   6213				     _command_var_list	     equ     command_var_list
   6214				     _command_var_nextfree   equ     command_var_nextfree
   6215				     _command_var_init	     equ     command_var_init
   6216				     _command_showprompt     equ     command_showprompt
   6217				     _command_backspace	     equ     command_backspace
   6218					     public  _command
   6219				     _s@     equ     s@
   6220					     end
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 111
Symbol Table




Symbol Name		Type   Value			   Cref	(defined at #)

??DATE			Text   "12/05/15"
??FILENAME		Text   "command	"
??TIME			Text   "11:08:10"
??VERSION		Number 030A
@10@114			Near   _TEXT:0755		   1828	 #1835
@10@170			Near   _TEXT:076A		   1845	 #1851
@10@254			Near   _TEXT:078B		   1875	 #1881
@10@282			Near   _TEXT:07A3		   1865	 #1895
@10@310			Near   _TEXT:07BF		   1834	 #1915
@10@86			Near   _TEXT:0753		   #1833  1850	1880  1914
@11@58			Near   _TEXT:07D4		   1949	 #1950
@12@58			Near   _TEXT:07EB		   1983	 #1984
@13@114			Near   _TEXT:0838		   2025	 #2059
@13@170			Near   _TEXT:0841		   2067	 #2068
@13@58			Near   _TEXT:0809		   #2026  2061
@14@58			Near   _TEXT:08DA		   2206	 #2207
@15@58			Near   _TEXT:097A		   2347	 #2348
@16@58			Near   _TEXT:0992		   2384	 #2385
@17@58			Near   _TEXT:09C1		   2441	 #2442
@18@1010		Near   _TEXT:0C01		   2493	 #2925
@18@1066		Near   _TEXT:0C0D		   2936	 #2937
@18@114			Near   _TEXT:0A12		   #2526  2539
@18@142			Near   _TEXT:0A1A		   2525	 #2535
@18@198			Near   _TEXT:0A5C		   #2582  2595
@18@226			Near   _TEXT:0A64		   2581	 #2591
@18@282			Near   _TEXT:0AA6		   #2638  2651
@18@310			Near   _TEXT:0AAE		   2637	 #2647
@18@450			Near   _TEXT:0AE4		   #2683  2947
@18@478			Near   _TEXT:0AE8		   #2689  2701	2708  2715  2722  2729	2736  2743
@18@506			Near   _TEXT:0AF0		   #2695  2948
@18@534			Near   _TEXT:0AF6		   #2702  2949
@18@562			Near   _TEXT:0AFC		   #2709  2950
@18@58			Near   _TEXT:09E5		   #2494  2928
@18@590			Near   _TEXT:0B02		   #2716  2951
@18@618			Near   _TEXT:0B08		   #2723  2952
@18@646			Near   _TEXT:0B0E		   #2730  2953
@18@674			Near   _TEXT:0B14		   #2737  2954
@18@702			Near   _TEXT:0B1A		   2680	 2694  #2744
@18@730			Near   _TEXT:0B4A		   #2779  2792
@18@758			Near   _TEXT:0B52		   2778	 #2788
@18@814			Near   _TEXT:0B94		   #2836  2849
@18@842			Near   _TEXT:0B9C		   2835	 #2845
@18@898			Near   _TEXT:0BDE		   #2893  2906
@18@926			Near   _TEXT:0BE6		   2892	 #2902
@18@982			Near   _TEXT:0C00		   2504	 #2923
@18@C1170		Word   _TEXT:0C11		   2682	 #2946
@19@114			Near   _TEXT:0C3D		   #2994  3033
@19@142			Near   _TEXT:0C3F		   2979	 #2996
@19@198			Near   _TEXT:0C61		   3019	 #3026
@19@226			Near   _TEXT:0C65		   2995	 #3034
@19@86			Near   _TEXT:0C34		   #2985  3025
@1@1094			Near   _TEXT:01D6		   516	#531
@1@1150			Near   _TEXT:01E6		   530	537  #546
@1@1178			Near   _TEXT:01E8		   511	#553
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 112
Symbol Table



@1@1262			Near   _TEXT:0203		   570	#575
@1@1290			Near   _TEXT:020A		   559	#584
@1@1374			Near   _TEXT:0227		   601	#607
@1@142			Near   _TEXT:00FD		   #318	 323
@1@1430			Near   _TEXT:0234		   613	#619
@1@1458			Near   _TEXT:023A		   552	583  591  606  618  #625
@1@1514			Near   _TEXT:0242		   #636	 649
@1@1542			Near   _TEXT:0246		   635	#647
@1@1598			Near   _TEXT:0278		   501	634  #684
@1@1626			Near   _TEXT:027B		   #691	 1274
@1@1766			Near   _TEXT:02A6		   715	#721
@1@1794			Near   _TEXT:02AC		   720	#727
@1@1822			Near   _TEXT:02AE		   708	#732
@1@1878			Near   _TEXT:02BF		   742	#747
@1@1934			Near   _TEXT:02CE		   731	753  #758
@1@1962			Near   _TEXT:02D0		   #760	 774
@1@1990			Near   _TEXT:02D4		   759	#772
@1@2074			Near   _TEXT:030D		   698	702  780  #814
@1@2102			Near   _TEXT:030F		   397	472  493  690  820  #821
@1@2130			Near   _TEXT:0312		   #827	 1289
@1@2158			Near   _TEXT:0337		   #858	 1023
@1@2186			Near   _TEXT:0339		   #860	 873  876
@1@2214			Near   _TEXT:033C		   859	#867
@1@226			Near   _TEXT:010D		   321	#325
@1@2298			Near   _TEXT:0357		   870	#877
@1@2354			Near   _TEXT:0363		   883	#888
@1@2382			Near   _TEXT:0367		   #894	 916
@1@2410			Near   _TEXT:0375		   893	#907
@1@2494			Near   _TEXT:0390		   910	913  #917
@1@254			Near   _TEXT:0111		   #327	 1288
@1@2578			Near   _TEXT:03D3		   944	#969
@1@2606			Near   _TEXT:03D5		   927	968  #975
@1@2662			Near   _TEXT:0411		   1012	 #1017
@1@2690			Near   _TEXT:0414		   974	#1022
@1@2718			Near   _TEXT:0417		   887	1016  #1024
@1@2774			Near   _TEXT:0423		   1031	 #1040
@1@282			Near   _TEXT:0114		   #333	 1287
@1@2830			Near   _TEXT:0448		   1061	 #1067
@1@2886			Near   _TEXT:0457		   1073	 #1079
@1@2914			Near   _TEXT:045B		   1066	 1078  #1085
@1@2970			Near   _TEXT:046A		   1091	 #1097
@1@2998			Near   _TEXT:046E		   1096	 #1103
@1@3026			Near   _TEXT:0477		   #1114  1142
@1@3082			Near   _TEXT:049E		   1129	 #1138
@1@3110			Near   _TEXT:049F		   1113	 #1140
@1@3138			Near   _TEXT:04A4		   1137	 #1143
@1@3194			Near   _TEXT:04E3		   1152	 #1191
@1@3222			Near   _TEXT:04ED		   1190	 #1202
@1@3278			Near   _TEXT:04F7		   1208	 #1213
@1@3306			Near   _TEXT:04FB		   324	#1223
@1@3362			Near   _TEXT:0511		   301	332  353  375  826  1039  1222	1229  #1244
@1@338			Near   _TEXT:011C		   339	#348
@1@366			Near   _TEXT:011F		   #354	 1290
@1@394			Near   _TEXT:0121		   #356	 370
@1@422			Near   _TEXT:0125		   355	#368
@1@478			Near   _TEXT:012C		   #376	 1286
@1@562			Near   _TEXT:013F		   #391	 396
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 113
Symbol Table



@1@58			Near   _TEXT:00EA		   #302	 1247
@1@646			Near   _TEXT:014F		   394	#398
@1@674			Near   _TEXT:0153		   #400	 1271
@1@702			Near   _TEXT:015B		   #407	 420
@1@730			Near   _TEXT:015F		   406	#418
@1@786			Near   _TEXT:016F		   #435	 463
@1@842			Near   _TEXT:0194		   434	#461
@1@898			Near   _TEXT:01A0		   #473	 1273
@1@954			Near   _TEXT:01A8		   479	#488
@1@982			Near   _TEXT:01AB		   #494	 1272
@1@C3234		Word   _TEXT:0531		   317	#1275
@1@C3330		Word   _TEXT:0521		   390	#1262
@20@114			Near   _TEXT:0C81		   #3072  3170
@20@142			Near   _TEXT:0C83		   3062	 #3074
@20@198			Near   _TEXT:0C9E		   3080	 #3093
@20@254			Near   _TEXT:0CBA		   3098	 #3110
@20@282			Near   _TEXT:0CBF		   3092	 3109  #3116
@20@366			Near   _TEXT:0CD1		   #3126  3189
@20@394			Near   _TEXT:0CD7		   #3134  3188
@20@422			Near   _TEXT:0CDD		   #3143  3187
@20@450			Near   _TEXT:0CE3		   #3153  3186
@20@478			Near   _TEXT:0CE7		   3133	 3142  3152  #3161
@20@506			Near   _TEXT:0CF2		   3123	 #3171
@20@534			Near   _TEXT:0CF4		   3073	 #3173
@20@86			Near   _TEXT:0C7F		   #3070  3172
@20@C482		Word   _TEXT:0CFA		   3125	 #3185
@21@114			Near   _TEXT:0D1B		   #3220  3252
@21@142			Near   _TEXT:0D1D		   3205	 #3222
@21@198			Near   _TEXT:0D3A		   3238	 #3245
@21@226			Near   _TEXT:0D3E		   3221	 #3253
@21@86			Near   _TEXT:0D12		   #3211  3244
@22@114			Near   _TEXT:0D74		   3294	 #3300
@22@142			Near   _TEXT:0D7F		   3299	 #3310
@22@170			Near   _TEXT:0D84		   #3316  3347
@22@226			Near   _TEXT:0D8F		   3321	 #3324
@22@254			Near   _TEXT:0D97		   3323	 #3332
@22@310			Near   _TEXT:0DA8		   3315	 #3345
@22@338			Near   _TEXT:0DAD		   3282	 #3348
@22@394			Near   _TEXT:0DBB		   3355	 #3363
@22@422			Near   _TEXT:0DBF		   3368	 #3369
@23@114			Near   _TEXT:0E88		   3506	 #3535
@23@170			Near   _TEXT:0E92		   #3544  3574
@23@226			Near   _TEXT:0EBB		   3543	 #3572
@23@282			Near   _TEXT:0EC5		   #3581  3611
@23@338			Near   _TEXT:0EEE		   3580	 #3609
@23@394			Near   _TEXT:0EF8		   #3618  3648
@23@450			Near   _TEXT:0F21		   3617	 #3646
@23@506			Near   _TEXT:0F2B		   #3655  3685
@23@562			Near   _TEXT:0F54		   3654	 #3683
@23@58			Near   _TEXT:0E5F		   #3507  3537
@23@618			Near   _TEXT:0F5E		   #3692  3722
@23@674			Near   _TEXT:0F87		   3691	 #3720
@24@114			Near   _TEXT:0FB0		   #3768  3818
@24@142			Near   _TEXT:0FB2		   3753	 #3770
@24@198			Near   _TEXT:0FC4		   3780	 #3785
@24@254			Near   _TEXT:0FE8		   3804	 #3811
@24@282			Near   _TEXT:0FEC		   3769	 #3819
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 114
Symbol Table



@24@86			Near   _TEXT:0FA7		   #3759  3810
@25@114			Near   _TEXT:100A		   3844	 #3860
@25@142			Near   _TEXT:1078		   3859	 #3950
@25@86			Near   _TEXT:1008		   #3858  3949
@26@58			Near   _TEXT:10EF		   4062	 #4063
@27@114			Near   _TEXT:11AE		   4124	 #4227
@27@142			Near   _TEXT:11AF		   4114	 #4229
@27@198			Near   _TEXT:11E5		   4275	 #4276
@27@58			Near   _TEXT:111A		   #4115  4232
@28@114			Near   _TEXT:1206		   #4320  4416
@28@142			Near   _TEXT:1208		   4305	 #4322
@28@198			Near   _TEXT:1226		   4345	 #4347
@28@226			Near   _TEXT:1274		   4321	 #4417
@28@86			Near   _TEXT:1203		   #4318  4346
@29@114			Near   _TEXT:1337		   4538	 #4567
@29@170			Near   _TEXT:1347		   #4578  4609
@29@226			Near   _TEXT:1370		   4577	 #4607
@29@58			Near   _TEXT:130E		   #4539  4569
@30@114			Near   _TEXT:1399		   #4657  4707
@30@142			Near   _TEXT:139B		   4642	 #4659
@30@198			Near   _TEXT:13BE		   4679	 #4684
@30@254			Near   _TEXT:13D1		   4693	 #4700
@30@282			Near   _TEXT:13D5		   4658	 #4708
@30@86			Near   _TEXT:1390		   #4648  4699
@31@114			Near   _TEXT:13F2		   4730	 #4746
@31@142			Near   _TEXT:140C		   4745	 #4765
@31@86			Near   _TEXT:13F0		   #4744  4764
@32@114			Near   _TEXT:142B		   4788	 #4804
@32@142			Near   _TEXT:1445		   4803	 #4823
@32@86			Near   _TEXT:1429		   #4802  4822
@33@114			Near   _TEXT:1465		   #4869  4910
@33@142			Near   _TEXT:1467		   4854	 #4871
@33@198			Near   _TEXT:1489		   4895	 #4902
@33@226			Near   _TEXT:148D		   4870	 #4911
@33@86			Near   _TEXT:145C		   #4860  4901
@34@114			Near   _TEXT:14AD		   #4957  4998
@34@142			Near   _TEXT:14AF		   4942	 #4959
@34@198			Near   _TEXT:14D1		   4983	 #4990
@34@226			Near   _TEXT:14D5		   4958	 #4999
@34@86			Near   _TEXT:14A4		   #4948  4989
@35@114			Near   _TEXT:1521		   5068	 #5084
@35@142			Near   _TEXT:1525		   5083	 #5092
@35@86			Near   _TEXT:151F		   #5082  5091
@36@30			Near   _TEXT:152A		   #5106  5132
@37@114			Near   _TEXT:156E		   5157	 #5173
@37@142			Near   _TEXT:158B		   5172	 #5198
@37@86			Near   _TEXT:156C		   #5171  5197
@38@114			Near   _TEXT:15C5		   5246	 #5254
@38@170			Near   _TEXT:15CA		   5262	 #5263
@38@86			Near   _TEXT:15BE		   5224	 #5247
@3@86			Near   _TEXT:05AF		   1376	 #1405
@4@114			Near   _TEXT:05DF		   1435	 #1454
@4@58			Near   _TEXT:05C2		   #1436  1456
@5@114			Near   _TEXT:05FB		   1482	 #1490
@5@142			Near   _TEXT:05FF		   #1496  1515
@5@198			Near   _TEXT:0613		   1505	 #1511
@5@226			Near   _TEXT:0614		   1495	 #1513
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 115
Symbol Table



@5@282			Near   _TEXT:061B		   1489	 #1517
@5@58			Near   _TEXT:05F6		   #1483  1516
@5@86			Near   _TEXT:05F9		   #1488  1510
@6@114			Near   _TEXT:0681		   1557	 #1611
@6@142			Near   _TEXT:0682		   1547	 #1613
@6@58			Near   _TEXT:062E		   #1548  1615
@7@114			Near   _TEXT:069E		   1642	 #1650
@7@142			Near   _TEXT:06A2		   #1656  1681
@7@198			Near   _TEXT:06C2		   1671	 #1677
@7@226			Near   _TEXT:06C3		   1655	 #1679
@7@282			Near   _TEXT:06CA		   1649	 #1683
@7@58			Near   _TEXT:0699		   #1643  1682
@7@86			Near   _TEXT:069C		   #1648  1676
@8@114			Near   _TEXT:06E8		   1717	 #1724
@8@142			Near   _TEXT:070C		   1723	 #1750
@8@86			Near   _TEXT:06E6		   #1722  1749
@9@114			Near   _TEXT:072B		   1782	 #1790
@9@142			Near   _TEXT:0739		   1789	 #1800
@9@86			Near   _TEXT:0729		   #1788  1799
@@0			Near   _TEXT:01B5		   500	#502
@@1			Near   _TEXT:0285		   697	#699
@@2			Near   _TEXT:028F		   701	#703
@@3			Near   _TEXT:051B		   1246	 #1248
@@4			Near   _TEXT:09F8		   2503	 #2505
@@5			Near   _TEXT:0C09		   2927	 #2929
@@6			Near   _TEXT:112A		   4123	 #4125
@@7			Near   _TEXT:11B7		   4231	 #4233
@CPU			Text   0101H
@CURSEG			Text   _TEXT			   #10	#14  #18  #22  #112  #2452  #2455  #3380  #3388	 #5009	#5017	  +
							   #5271  #5305	 #6125
@FILENAME		Text   COMMAND
@WORDSIZE		Text   2			   #10	#14  #18  #22  #112  #2452  #2455  #3380  #3388	 #5009	#5017	  +
							   #5271  #5305	 #6125
ARGLINE			Byte   _BSS:038E		   986	994  #5294
ARGV			Dword  _BSS:034E		   998	999  1124  1125	 1156  #5292
B@			Byte   _BSS:0000		   #19
B@W			Word   _BSS:0000		   #20	2511  2519  2544  2567	2575  2600  2623  2631	2656  2764  2772  +
							   2797	 2821  2829  2854  2878	 2886  2911
CMDLINE			Byte   _BSS:060C		   661	669  678  791  799  808	 843  849  1047	 1242  #5298
COMMANDS		Word   _DATA:0002		   #26	1123  1163  2035  2047
COMMAND_BACKSPACE	Near   _TEXT:0545		   347	367  417  487  646  771	 #1295
COMMAND_SHOWPROMPT	Near   _TEXT:056F		   300	468  1035  1212	 #1352
COMMAND_VAR_INIT	Near   _TEXT:05BB		   273	#1425
COMMAND_VAR_LIST	Near   _TEXT:061D		   #1529  3066
COMMAND_VAR_NEXTFREE	Near   _TEXT:05EC		   #1472  1869
COMMAND_VAR_SEARCH	Near   _TEXT:068C		   #1630  1709	1774  1857
COMMAND_VAR_SET		Near   _TEXT:073C		   283	294  1185  #1812  3089	3106
COMMAND_VAR_UNSET	Near   _TEXT:06CD		   #1697  3230
COMMAND_VAR_VALUE	Near   _TEXT:070F		   934	1366  #1762
D@			Byte   _DATA:0000		   #15
D@W			Word   _DATA:0000		   #16
DEMO			Near   _TEXT:0DC5		   #3393  3799
DEMO_LINHA		Word   _DATA:00AA		   #3381  3406	3775  3779  3784  4444	4674  4678  4683
END_COMMAND		Word   _BSS:062B		   138	1207  1245  1978  #5300
EXITCODE		Word   _DATA:00AC		   #3384  3411	3795
HISTORY			Byte   _BSS:0218		   448	658  788  1053	#5290
HISTORY_INI		Word   _BSS:0214		   142	440  590  600  1072  1077  1084	 #5286
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 116
Symbol Table



HISTORY_LEN		Word   _BSS:0216		   462	499  510  696  707  712	 1060  1065  #5288
HISTORY_NXT		Word   _BSS:0212		   146	520  563  752  1050  1090  1095	 1102  #5284
HISTORY_POS		Word   _BSS:0210		   150	405  515  522  536  541	 558  565  569	574  589  599  605  612	  +
							   617	624  655  700  714  719	 726  737  741	746  751  757  779  785	  +
							   832	#5282
NUM_VAR			Word   _DATA:0000		   #23	1461  1481  1744
PALAVRA			Byte   _BSS:05ED		   901	922  926  932  951  959	 982  #5296
S@			Byte   _DATA:00B2		   27  28  30  31  33  34  36  37  39  40  42  43  45  46  48  49  51  52 +
							   54  55  57  58  60  61  63  64  66  67  69  70  72  73  75  76  78  79 +
							   81  82  84  85  87  88  90  91  93  94  96  97  99  100  102	 103  105 +
							   106	108  109  174  184  194	 208  218  224	230  244  254  264  278	  +
							   281	289  292  1183	1197  1364  2016  2416	2425  2484  2553  2609	  +
							   2665	 2688  2700  2707  2714	 2721  2728  2735  2742	 2750  2807  2864 +
							   2984	 3024  3085  3132  3141	 3151  3160  3210  3243	 3287  3418  3429 +
							   3442	 3455  3468  3758  3809	 3849  3886  3913  3940	 3999  4026  4053 +
							   4105	 4130  4160  4190  4239	 4266  4310  4353  4380	 4407  4451  4462 +
							   4475	 4488  4501  4647  4698	 4735  4793  4859  4900	 4947  4988  5055 +
							   5073	 5162  #5306
STARTBARBEIRO		Near   _TEXT:1527		   5063	 #5103
VAR			Word   _BSS:001C		   1444	 1452  1504  1556  1565	 1591  1664  1732  1740	 1797  1891  1906 +
							   #5280
_ARGLINE		Alias  ARGLINE			   #6149
_ARGV			Alias  ARGV			   #6148
_ATOI			Near   ----:---- Extern		   3004	 3792  3868  4330  4667	 4754  4812  4880  4968	 5181  #6168
_CLIENTES		Word   _BSS:0016		   5041	 5111  5232  #5274  6128
_CLRSCR			Near   ----:---- Extern		   162	2379  #6181
_CMDLINE		Alias  CMDLINE			   #6151
_CMD_ADD_CLIENTE_BARBE	Near   _TEXT:158F		   110	#5210  6184
R
_CMD_CLS		Near   _TEXT:0980		   44  47  #2362  6203
_CMD_DATE		Near   _TEXT:0845		   38  #2081  6205
_CMD_DEMO		Near   _TEXT:0F9A		   65  #3743  6199
_CMD_ECHO		Near   _TEXT:0D42		   74  #3265  6196
_CMD_EXIT		Near   _TEXT:07D8		   53  56  #1963  6208
_CMD_HELP		Near   _TEXT:07ED		   29  32  #1995  6206
_CMD_KILL		Near   _TEXT:0C21		   62  #2959  6200
_CMD_PS			Near   _TEXT:09C5		   59  #2460  6201
_CMD_REBOOT		Near   _TEXT:07C2		   50  #1927  6207
_CMD_RESUME		Near   _TEXT:1491		   101	#4924  6187
_CMD_SEMCREATE		Near   _TEXT:11EB		   86  #4290  6192
_CMD_SEMDESTROY		Near   _TEXT:1410		   95  #4777  6189
_CMD_SEMLS		Near   _TEXT:10F5		   83  #4077  6193
_CMD_SEMTEST		Near   _TEXT:1383		   89  #4631  6191
_CMD_SEMUP		Near   _TEXT:13D7		   92  #4719  6190
_CMD_SET		Near   _TEXT:0C69		   68  #3047  6198
_CMD_START_BARBER	Near   _TEXT:14D9		   104	#5022  6186
_CMD_STOP		Near   _TEXT:1449		   98  #4835  6188
_CMD_STOP_BARBER	Near   _TEXT:154E		   107	#5144  6185
_CMD_TIME		Near   _TEXT:08E0		   41  #2221  6204
_CMD_UNSET		Near   _TEXT:0D02		   71  #3194  6197
_CMD_VER		Near   _TEXT:0996		   35  #2398  6202
_CMD_WAIT		Near   _TEXT:107D		   80  #3963  6195
_CMD_WAITPID		Near   _TEXT:0FEE		   77  #3830  6194
_COMMAND		Near   _TEXT:0000		   #117	 6218
_COMMANDS		Alias  COMMANDS			   #6140
_COMMAND_BACKSPACE	Alias  COMMAND_BACKSPACE	   #6217
_COMMAND_SHOWPROMPT	Alias  COMMAND_SHOWPROMPT	   #6216
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 117
Symbol Table



_COMMAND_VAR_INIT	Alias  COMMAND_VAR_INIT		   #6215
_COMMAND_VAR_LIST	Alias  COMMAND_VAR_LIST		   #6213
_COMMAND_VAR_NEXTFREE	Alias  COMMAND_VAR_NEXTFREE	   #6214
_COMMAND_VAR_SEARCH	Alias  COMMAND_VAR_SEARCH	   #6212
_COMMAND_VAR_SET	Alias  COMMAND_VAR_SET		   #6209
_COMMAND_VAR_UNSET	Alias  COMMAND_VAR_UNSET	   #6211
_COMMAND_VAR_VALUE	Alias  COMMAND_VAR_VALUE	   #6210
_COUNT			Word   _DATA:00AE		   #5010  5223	5228  6131
_DEMO			Alias  DEMO			   #6138
_DEMO_LINHA		Alias  DEMO_LINHA		   #6136
_END_COMMAND		Alias  END_COMMAND		   #6152
_EXIT			Near   ----:---- Extern		   3728	 4616  #6160
_EXITCODE		Alias  EXITCODE			   #6135
_FILA			Word   _BSS:0014		   5033	 5123  5244  #5272  6127
_FORK			Near   ----:---- Extern		   3801	 4690  5065  #6164
_GETCH			Near   ----:---- Extern		   308	381  #6182
_GETCOLOR		Near   ----:---- Extern		   1380	 1541  #6178
_GETDATE		Near   ----:---- Extern		   2108	 #6173
_GETPID			Near   ----:---- Extern		   3481	 4514  #6159
_GETTIME		Near   ----:---- Extern		   2245	 #6172
_GOTOXY			Near   ----:---- Extern		   1322	 1337  #6174
_HISTORY		Alias  HISTORY			   #6147
_HISTORY_INI		Alias  HISTORY_INI		   #6145
_HISTORY_LEN		Alias  HISTORY_LEN		   #6146
_HISTORY_NXT		Alias  HISTORY_NXT		   #6144
_HISTORY_POS		Alias  HISTORY_POS		   #6143
_INTTOSTR		Near   ----:---- Extern		   1174	 2513  2569  2625  2766	 2823  2880  3486  3898	 3925  4011  4038 +
							   4145	 4175  4205  4251  4365	 4392  4519  #6166
_KILL			Near   ----:---- Extern		   3012	 5190  #6163
_MINISO_SEM		Word   ----:---- Extern		   4122	 4141  4171  4201  #6134
_MINISO_THREAD		Word   ----:---- Extern		   2502	 2565  2621  2677  2762	 2819  2876  #6139
_MUTEX			Word   _BSS:0018		   5049	 5117  5129  5217  5238	 5252  #5276  6129
_NUMCADEIRAS		Word   _DATA:00B0		   #5013  6130
_NUM_VAR		Alias  NUM_VAR			   #6142
_PALAVRA		Alias  PALAVRA			   #6150
_PUTCH			Near   ----:---- Extern		   427	458  838  1236	1330  1412  1575  1609	2056  2140  2171  2200	  +
							   2277	 2310  2341  2435  2533	 2589  2645  2786  2843	 2900  2921  3330 +
							   3361	 4221  #6183
_PUTSTR			Near   ----:---- Extern		   176	186  196  210  220  226	 232  246  256	266  450  671  801  1199  +
							   1394	 1567  1593  2018  2036	 2048  2132  2163  2192	 2269  2302  2333 +
							   2418	 2427  2486  2546  2555	 2602  2611  2658  2667	 2691  2752  2799 +
							   2809	 2856  2866  2913  2987	 3163  3213  3307  3341	 3761  3851  3888 +
							   3906	 3915  3933  3942  4001	 4019  4028  4046  4055	 4107  4132  4153 +
							   4162	 4183  4192  4213  4241	 4259  4268  4312  4355	 4373  4382  4400 +
							   4409	 4650  4737  4795  4862	 4950  5057  5075  5164	 #6180
_PUTSTRXY		Near   ----:---- Extern		   3423	 3436  3449  3462  3475	 3499  3532  3569  3606	 3643  3680  3717 +
							   4456	 4469  4482  4495  4508	 4532  4564  4604  #6179
_REBOOT			Near   ----:---- Extern		   1944	 #6165
_RESUME			Near   ----:---- Extern		   4976	 #6153
_S@			Alias  S@			   #6219
_SEMCREATE		Near   ----:---- Extern		   4338	 5031  5039  5047  #6158
_SEMDESTROY		Near   ----:---- Extern		   4820	 #6155
_SEMDOWN		Near   ----:---- Extern		   4575	 5112  5118  5218  5245	 #6156
_SEMID			Word   _BSS:001A		   4574	 4670  #5278  6133
_SEMUP			Near   ----:---- Extern		   4762	 5124  5130  5233  5239	 5253  #6157
_SEM_APLIC		Near   _TEXT:127A		   #4431  4688	6132
_SETCOLOR		Near   ----:---- Extern		   157	168  191  201  215  237	 251  1387  1403  1582	1602  #6177
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 118
Symbol Table



_STARTBARBEIRO		Alias  STARTBARBEIRO		   #6137
_STOP			Near   ----:---- Extern		   4888	 #6154
_STRCMP			Near   ----:---- Extern		   1126	 1668  3291  #6170
_STRCPY			Near   ----:---- Extern		   663	793  953  988  1055  1893  1908	 #6171
_STRLEN			Near   ----:---- Extern		   680	810  961  1824	1841  2521  2577  2633	2774  2831  2888  #6169
_UNSIGNEDTOSTR		Near   ----:---- Extern		   2124	 2155  2184  2261  2294	 2325  3519  3556  3593	 3630  3667  3704 +
							   4551	 4591  #6167
_VAR			Alias  VAR			   #6141
_WAIT			Near   ----:---- Extern		   3991	 #6162
_WAITPID		Near   ----:---- Extern		   3879	 #6161
_WHEREX			Near   ----:---- Extern		   1306	 #6176
_WHEREY			Near   ----:---- Extern		   1311	 #6175

Macro Name						   Cref	(defined at #)

$COMM							   #1

Groups & Segments	Bit Size Align	Combine	Class	   Cref	(defined at #)

DGROUP			Group				   #12	13  27	28  30	31  33	34  36	37  39	40  42	43  45	46  48	49+
							   51  52  54  55  57  58  60  61  63  64  66  67  69  70  72  73  75  76 +
							   78  79  81  82  84  85  87  88  90  91  93  94  96  97  99  100  102	  +
							   103	105  106  108  109  138	 142  146  150	174  184  194  208  218	  +
							   224	230  244  254  264  278	 281  289  292	405  440  448  462  499	  +
							   510	515  520  522  536  541	 558  563  565	569  574  589  590  599	  +
							   600	605  612  617  624  655	 658  661  669	678  696  700  707  712	  +
							   714	719  726  737  741  746	 751  752  757	779  785  788  791  799	  +
							   808	832  843  849  901  922	 926  932  951	959  982  986  994  998	  +
							   999	1047  1050  1053  1060	1065  1072  1077  1084	1090  1095  1102  +
							   1123	 1124  1125  1156  1163	 1183  1197  1207  1242	 1245  1364  1444 +
							   1452	 1461  1481  1504  1556	 1565  1591  1664  1732	 1740  1744  1797 +
							   1891	 1906  1978  2016  2035	 2047  2416  2425  2484	 2502  2511  2519 +
							   2544	 2553  2565  2567  2575	 2600  2609  2621  2623	 2631  2656  2665 +
							   2677	 2688  2700  2707
  _BSS			16  062D Word	Public	BSS	   12  #18  #2452  #5271
  _DATA			16  0D3A Word	Public	DATA	   12  #14  #22	 #3380	#5009  #5305
_TEXT			16  15CC Byte	Public	CODE	   #10	13  #112  116  1294  1351  1424	 1471  1528  1629  1696	 1761	  +
							   1811	 1926  1962  1994  2080	 2220  2361  2397  #2455  2459	2958  3046+
							   3193	 3264  #3388  3392  3742  3829	3962  4076  4289  4430	4630  4718+
							   4776	 4834  4923  #5017  5021  5102	5143  5209  #6125
Turbo Assembler	 Version 3.1	    12/05/15 11:08:10	    Page 119
Error Summary



*Warning* command.ASM(3391) Reserved word used as symbol: EXITCODE
