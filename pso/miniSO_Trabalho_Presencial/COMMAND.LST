Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 1
command.ASM



      1				     $comm   macro   name,dist,size,count
      2					     comm    dist name[size]:BYTE:count
      3					     endm
      4					     ?debug  V 300h
      5					     ?debug  S "command.c"
      6					     ?debug  C E957A0794709636F6D6D616E642E63
      7					     ?debug  C E927A07947086D696E69534F2E68
      8					     ?debug  C E9CE9D764709636F6D6D616E642E68
      9					     ?debug  C E9789C7947056C69622E68
     10	0000			     _TEXT   segment byte public 'CODE'
     11	0000			     _TEXT   ends
     12				     DGROUP  group   _DATA,_BSS
     13					     assume  cs:_TEXT,ds:DGROUP
     14	0000			     _DATA   segment word public 'DATA'
     15	0000			     d@	     label   byte
     16	0000			     d@w     label   word
     17	0000			     _DATA   ends
     18	0000			     _BSS    segment word public 'BSS'
     19	0000			     b@	     label   byte
     20	0000			     b@w     label   word
     21	0000			     _BSS    ends
     22	0000			     _DATA   segment word public 'DATA'
     23	0000			     num_var label   word
     24	0000  00			     db	     0
     25	0001  00			     db	     0
     26	0002			     commands	     label   word
     27	0002  009Cr			     dw	     DGROUP:s@
     28	0004  009Er			     dw	     DGROUP:s@+2
     29	0006  07EDr			     dw	     _cmd_help
     30	0008  00C9r			     dw	     DGROUP:s@+45
     31	000A  00CEr			     dw	     DGROUP:s@+50
     32	000C  07EDr			     dw	     _cmd_help
     33	000E  00F6r			     dw	     DGROUP:s@+90
     34	0010  00FAr			     dw	     DGROUP:s@+94
     35	0012  0996r			     dw	     _cmd_ver
     36	0014  0122r			     dw	     DGROUP:s@+134
     37	0016  0127r			     dw	     DGROUP:s@+139
     38	0018  0845r			     dw	     _cmd_date
     39	001A  0145r			     dw	     DGROUP:s@+169
     40	001C  014Ar			     dw	     DGROUP:s@+174
     41	001E  08E0r			     dw	     _cmd_time
     42	0020  0168r			     dw	     DGROUP:s@+204
     43	0022  016Cr			     dw	     DGROUP:s@+208
     44	0024  0980r			     dw	     _cmd_cls
     45	0026  018Ar			     dw	     DGROUP:s@+238
     46	0028  0190r			     dw	     DGROUP:s@+244
     47	002A  0980r			     dw	     _cmd_cls
     48	002C  01ACr			     dw	     DGROUP:s@+272
     49	002E  01B3r			     dw	     DGROUP:s@+279
     50	0030  07C2r			     dw	     _cmd_reboot
     51	0032  01D8r			     dw	     DGROUP:s@+316
     52	0034  01DDr			     dw	     DGROUP:s@+321
     53	0036  07D8r			     dw	     _cmd_exit
     54	0038  0200r			     dw	     DGROUP:s@+356
     55	003A  0205r			     dw	     DGROUP:s@+361
     56	003C  07D8r			     dw	     _cmd_exit
     57	003E  0228r			     dw	     DGROUP:s@+396
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 2
command.ASM



     58	0040  022Br			     dw	     DGROUP:s@+399
     59	0042  09C5r			     dw	     _cmd_ps
     60	0044  0261r			     dw	     DGROUP:s@+453
     61	0046  0266r			     dw	     DGROUP:s@+458
     62	0048  0C21r			     dw	     _cmd_kill
     63	004A  0291r			     dw	     DGROUP:s@+501
     64	004C  0296r			     dw	     DGROUP:s@+506
     65	004E  0F9Ar			     dw	     _cmd_demo
     66	0050  02CFr			     dw	     DGROUP:s@+563
     67	0052  02D3r			     dw	     DGROUP:s@+567
     68	0054  0C69r			     dw	     _cmd_set
     69	0056  0312r			     dw	     DGROUP:s@+630
     70	0058  0318r			     dw	     DGROUP:s@+636
     71	005A  0D02r			     dw	     _cmd_unset
     72	005C  0338r			     dw	     DGROUP:s@+668
     73	005E  033Dr			     dw	     DGROUP:s@+673
     74	0060  0D42r			     dw	     _cmd_echo
     75	0062  0360r			     dw	     DGROUP:s@+708
     76	0064  0368r			     dw	     DGROUP:s@+716
     77	0066  0FEEr			     dw	     _cmd_waitpid
     78	0068  0399r			     dw	     DGROUP:s@+765
     79	006A  039Er			     dw	     DGROUP:s@+770
     80	006C  107Dr			     dw	     _cmd_wait
     81	006E  03CBr			     dw	     DGROUP:s@+815
     82	0070  03D1r			     dw	     DGROUP:s@+821
     83	0072  10F5r			     dw	     _cmd_semls
     84	0074  03FAr			     dw	     DGROUP:s@+862
     85	0076  0404r			     dw	     DGROUP:s@+872
     86	0078  11EBr			     dw	     _cmd_semcreate
     87	007A  0420r			     dw	     DGROUP:s@+900
     88	007C  0428r			     dw	     DGROUP:s@+908
     89	007E  1383r			     dw	     _cmd_semtest
     90	0080  0457r			     dw	     DGROUP:s@+955
     91	0082  045Dr			     dw	     DGROUP:s@+961
     92	0084  13D7r			     dw	     _cmd_semup
     93	0086  048Er			     dw	     DGROUP:s@+1010
     94	0088  0499r			     dw	     DGROUP:s@+1021
     95	008A  1410r			     dw	     _cmd_semdestroy
     96	008C  04B7r			     dw	     DGROUP:s@+1051
     97	008E  04BCr			     dw	     DGROUP:s@+1056
     98	0090  1449r			     dw	     _cmd_stop
     99	0092  04E8r			     dw	     DGROUP:s@+1100
    100	0094  04EFr			     dw	     DGROUP:s@+1107
    101	0096  1491r			     dw	     _cmd_resume
    102	0098			     _DATA   ends
    103	0000			     _TEXT   segment byte public 'CODE'
    104					;
    105					;    void command()
    106					;
    107					     assume  cs:_TEXT
    108	0000			     _command	     proc    near
    109	0000  55			     push    bp
    110	0001  8B EC			     mov     bp,sp
    111	0003  83 EC 22			     sub     sp,34
    112	0006  56			     push    si
    113	0007  57			     push    di
    114					;
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 3
command.ASM



    115					;    {
    116					;      char car,str[10];
    117					;      int numcar;
    118					;      int i,achou,pos;
    119					;      int novalinha,res,argc;
    120					;      char far	*ptrline,far *var;
    121					;
    122					;      /* InicializaÁıes... */
    123					;      numcar =	0;
    124					;
    125	0008  33 F6			     xor     si,si
    126					;
    127					;      end_command = 0;
    128					;
    129	000A  C7 06 0625r 0000		     mov     word ptr DGROUP:end_command,0
    130					;
    131					;      history_ini = 0;
    132					;
    133	0010  C7 06 020Er 0000		     mov     word ptr DGROUP:history_ini,0
    134					;
    135					;      history_nxt = 0;
    136					;
    137	0016  C7 06 020Cr 0000		     mov     word ptr DGROUP:history_nxt,0
    138					;
    139					;      history_pos = -1;
    140					;
    141	001C  C7 06 020Ar FFFF		     mov     word ptr DGROUP:history_pos,-1
    142					;
    143					;      /* Mensagem inicial */
    144					;      setcolor(7);
    145					;
    146	0022  B8 0007			     mov     ax,7
    147	0025  50			     push    ax
    148	0026  E8 0000e			     call    near ptr _setcolor
    149	0029  59			     pop     cx
    150					;
    151					;      clrscr();
    152					;
    153	002A  E8 0000e			     call    near ptr _clrscr
    154					;
    155					;      setcolor(LOGOCOLOR);
    156					;
    157	002D  B8 0001			     mov     ax,1
    158	0030  50			     push    ax
    159	0031  E8 0000e			     call    near ptr _setcolor
    160	0034  59			     pop     cx
    161					;
    162					;      putstr("			 ‹‹‹‹‹‹‹  ‹‹‹‹‹‹\n");
    163					;
    164	0035  1E			     push    ds
    165	0036  B8 0519r			     mov     ax,offset DGROUP:s@+1149
    166	0039  50			     push    ax
    167	003A  E8 0000e			     call    near ptr _putstr
    168	003D  59			     pop     cx
    169	003E  59			     pop     cx
    170					;
    171					;      putstr("	‹‹‹‹‹  ‹  ‹‹‹  ‹ €€   ﬂﬂ  €€  €€  "); setcolor(7); putstr("MinisSistema	    +
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 4
command.ASM



    172				     Operacional\n"); setcolor(LOGOCOLOR);
    173					;
    174	003F  1E			     push    ds
    175	0040  B8 053Cr			     mov     ax,offset DGROUP:s@+1184
    176	0043  50			     push    ax
    177	0044  E8 0000e			     call    near ptr _putstr
    178	0047  59			     pop     cx
    179	0048  59			     pop     cx
    180	0049  B8 0007			     mov     ax,7
    181	004C  50			     push    ax
    182	004D  E8 0000e			     call    near ptr _setcolor
    183	0050  59			     pop     cx
    184	0051  1E			     push    ds
    185	0052  B8 0560r			     mov     ax,offset DGROUP:s@+1220
    186	0055  50			     push    ax
    187	0056  E8 0000e			     call    near ptr _putstr
    188	0059  59			     pop     cx
    189	005A  59			     pop     cx
    190	005B  B8 0001			     mov     ax,1
    191	005E  50			     push    ax
    192	005F  E8 0000e			     call    near ptr _setcolor
    193	0062  59			     pop     cx
    194					;
    195					;      putstr("‹€ € € ‹€ ‹€ € ‹€ ﬂﬂﬂﬂ€€€ €€€  €€  "); setcolor(7); putstr("Vs "); putstr    +
    196				     (miniSO_VERSION); putstr("\n"); setcolor(LOGO
    197					;
    198	0063  1E			     push    ds
    199	0064  B8 057Ar			     mov     ax,offset DGROUP:s@+1246
    200	0067  50			     push    ax
    201	0068  E8 0000e			     call    near ptr _putstr
    202	006B  59			     pop     cx
    203	006C  59			     pop     cx
    204	006D  B8 0007			     mov     ax,7
    205	0070  50			     push    ax
    206	0071  E8 0000e			     call    near ptr _setcolor
    207	0074  59			     pop     cx
    208	0075  1E			     push    ds
    209	0076  B8 059Er			     mov     ax,offset DGROUP:s@+1282
    210	0079  50			     push    ax
    211	007A  E8 0000e			     call    near ptr _putstr
    212	007D  59			     pop     cx
    213	007E  59			     pop     cx
    214	007F  1E			     push    ds
    215	0080  B8 05A2r			     mov     ax,offset DGROUP:s@+1286
    216	0083  50			     push    ax
    217	0084  E8 0000e			     call    near ptr _putstr
    218	0087  59			     pop     cx
    219	0088  59			     pop     cx
    220	0089  1E			     push    ds
    221	008A  B8 05A7r			     mov     ax,offset DGROUP:s@+1291
    222	008D  50			     push    ax
    223	008E  E8 0000e			     call    near ptr _putstr
    224	0091  59			     pop     cx
    225	0092  59			     pop     cx
    226	0093  B8 0001			     mov     ax,1
    227	0096  50			     push    ax
    228	0097  E8 0000e			     call    near ptr _setcolor
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 5
command.ASM



    229	009A  59			     pop     cx
    230					;
    231					;      putstr("€€ € € €€ €€ € €€ €€‹‹€€€ €€€‹‹€€  "); setcolor(7); putstr("por Roland	    +
    232				     Teodorowitsch\n");
    233					;
    234	009B  1E			     push    ds
    235	009C  B8 05A9r			     mov     ax,offset DGROUP:s@+1293
    236	009F  50			     push    ax
    237	00A0  E8 0000e			     call    near ptr _putstr
    238	00A3  59			     pop     cx
    239	00A4  59			     pop     cx
    240	00A5  B8 0007			     mov     ax,7
    241	00A8  50			     push    ax
    242	00A9  E8 0000e			     call    near ptr _setcolor
    243	00AC  59			     pop     cx
    244	00AD  1E			     push    ds
    245	00AE  B8 05CDr			     mov     ax,offset DGROUP:s@+1329
    246	00B1  50			     push    ax
    247	00B2  E8 0000e			     call    near ptr _putstr
    248	00B5  59			     pop     cx
    249	00B6  59			     pop     cx
    250					;
    251					;
    252					;      putstr("\nDigite	'help' ou '?' para ajuda...\n\n");
    253					;
    254	00B7  1E			     push    ds
    255	00B8  B8 05E7r			     mov     ax,offset DGROUP:s@+1355
    256	00BB  50			     push    ax
    257	00BC  E8 0000e			     call    near ptr _putstr
    258	00BF  59			     pop     cx
    259	00C0  59			     pop     cx
    260					;
    261					;      /* Inicializa vari·veis de ambiente */
    262					;      command_var_init();
    263					;
    264	00C1  E8 04F7			     call    near ptr command_var_init
    265					;
    266					;      command_var_set("PROMPT","miniSO>");
    267					;
    268	00C4  1E			     push    ds
    269	00C5  B8 0614r			     mov     ax,offset DGROUP:s@+1400
    270	00C8  50			     push    ax
    271	00C9  1E			     push    ds
    272	00CA  B8 060Dr			     mov     ax,offset DGROUP:s@+1393
    273	00CD  50			     push    ax
    274	00CE  E8 066B			     call    near ptr command_var_set
    275	00D1  83 C4 08			     add     sp,8
    276					;
    277					;      command_var_set("ERRORLEVEL","0");
    278					;
    279	00D4  1E			     push    ds
    280	00D5  B8 0627r			     mov     ax,offset DGROUP:s@+1419
    281	00D8  50			     push    ax
    282	00D9  1E			     push    ds
    283	00DA  B8 061Cr			     mov     ax,offset DGROUP:s@+1408
    284	00DD  50			     push    ax
    285	00DE  E8 065B			     call    near ptr command_var_set
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 6
command.ASM



    286	00E1  83 C4 08			     add     sp,8
    287					;
    288					;      /* Imprime sinal	de pronto */
    289					;      command_showprompt();
    290					;
    291	00E4  E8 0488			     call    near ptr command_showprompt
    292	00E7  E9 0427			     jmp     @1@3362
    293	00EA			     @1@58:
    294					;
    295					;      /* LaÁo para interpretaÁ„o de comandos */
    296					;      while ( !end_command )  {
    297					;	     car=getch();
    298					;
    299	00EA  E8 0000e			     call    near ptr _getch
    300	00ED  88 46 FF			     mov     byte ptr [bp-1],al
    301					;
    302					;	     switch (car)  {
    303					;
    304	00F0  8A 46 FF			     mov     al,byte ptr [bp-1]
    305	00F3  98			     cbw
    306	00F4  89 46 E0			     mov     word ptr [bp-32],ax
    307	00F7  B9 0005			     mov     cx,5
    308	00FA  BB 0531r			     mov     bx,offset @1@C3234
    309	00FD			     @1@142:
    310	00FD  2E: 8B 07			     mov     ax,word ptr cs:[bx]
    311	0100  3B 46 E0			     cmp     ax,word ptr [bp-32]
    312	0103  74 08			     je	     short @1@226
    313	0105  83 C3 02			     add     bx,2
    314	0108  E2 F3			     loop    short @1@142
    315	010A  E9 03EE			     jmp     @1@3306
    316	010D			     @1@226:
    317	010D  2E: FF 67	0A		     jmp     word ptr cs:[bx+10]
    318	0111			     @1@254:
    319					;
    320					;		    case 9:
    321					;			 break;
    322					;
    323	0111  E9 03FD			     jmp     @1@3362
    324	0114			     @1@282:
    325					;
    326					;		    case 8:
    327					;			 if (numcar>0)	{
    328					;
    329	0114  0B F6			     or	     si,si
    330	0116  7E 04			     jle     short @1@338
    331					;
    332					;			    --numcar;
    333					;
    334	0118  4E			     dec     si
    335					;
    336					;			    command_backspace();
    337					;
    338	0119  E8 0429			     call    near ptr command_backspace
    339	011C			     @1@338:
    340					;
    341					;			 }
    342					;			 break;
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 7
command.ASM



    343					;
    344	011C  E9 03F2			     jmp     @1@3362
    345	011F			     @1@366:
    346	011F  EB 04			     jmp     short @1@422
    347	0121			     @1@394:
    348					;
    349					;		    case 27:
    350					;			 /* Limpa a linha de comandos */
    351					;			 while (numcar>0)  {
    352					;			       --numcar;
    353					;
    354	0121  4E			     dec     si
    355					;
    356					;			       command_backspace();
    357					;
    358	0122  E8 0420			     call    near ptr command_backspace
    359	0125			     @1@422:
    360	0125  0B F6			     or	     si,si
    361	0127  7F F8			     jg	     short @1@394
    362					;
    363					;			 }
    364					;			 break;
    365					;
    366	0129  E9 03E5			     jmp     @1@3362
    367	012C			     @1@478:
    368					;
    369					;		    case 0:
    370					;			 car=getch();
    371					;
    372	012C  E8 0000e			     call    near ptr _getch
    373	012F  88 46 FF			     mov     byte ptr [bp-1],al
    374					;
    375					;			 switch	(car)  {
    376					;
    377	0132  8A 46 FF			     mov     al,byte ptr [bp-1]
    378	0135  98			     cbw
    379	0136  89 46 DE			     mov     word ptr [bp-34],ax
    380	0139  B9 0004			     mov     cx,4
    381	013C  BB 0521r			     mov     bx,offset @1@C3330
    382	013F			     @1@562:
    383	013F  2E: 8B 07			     mov     ax,word ptr cs:[bx]
    384	0142  3B 46 DE			     cmp     ax,word ptr [bp-34]
    385	0145  74 08			     je	     short @1@646
    386	0147  83 C3 02			     add     bx,2
    387	014A  E2 F3			     loop    short @1@562
    388	014C  E9 01C0			     jmp     @1@2102
    389	014F			     @1@646:
    390	014F  2E: FF 67	08		     jmp     word ptr cs:[bx+8]
    391	0153			     @1@674:
    392					;
    393					;				case 65: /* F7 */
    394					;				     history_pos = -1;
    395					;
    396	0153  C7 06 020Ar FFFF		     mov     word ptr DGROUP:history_pos,-1
    397	0159  EB 04			     jmp     short @1@730
    398	015B			     @1@702:
    399					;
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 8
command.ASM



    400					;				     /*	Limpa a	linha de comandos */
    401					;				     while (numcar>0)  {
    402					;					   --numcar;
    403					;
    404	015B  4E			     dec     si
    405					;
    406					;					   command_backspace();
    407					;
    408	015C  E8 03E6			     call    near ptr command_backspace
    409	015F			     @1@730:
    410	015F  0B F6			     or	     si,si
    411	0161  7F F8			     jg	     short @1@702
    412					;
    413					;				     }
    414					;				     putch('\n');
    415					;
    416	0163  B8 000A			     mov     ax,10
    417	0166  50			     push    ax
    418	0167  E8 0000e			     call    near ptr _putch
    419	016A  59			     pop     cx
    420					;
    421					;				     /*	Imprime	o histÛrico */
    422					;				     for (i=0;i<history_len;++i)  {
    423					;
    424	016B  33 FF			     xor     di,di
    425	016D  EB 25			     jmp     short @1@842
    426	016F			     @1@786:
    427					;
    428					;					 putstr(history[(history_ini+i)%MAXHISTORY]);
    429					;
    430	016F  1E			     push    ds
    431	0170  A1 020Er			     mov     ax,word ptr DGROUP:history_ini
    432	0173  03 C7			     add     ax,di
    433	0175  BB 000A			     mov     bx,10
    434	0178  99			     cwd
    435	0179  F7 FB			     idiv    bx
    436	017B  BB 001F			     mov     bx,31
    437	017E  8B C2			     mov     ax,dx
    438	0180  F7 EB			     imul    bx
    439	0182  05 0212r			     add     ax,offset DGROUP:history
    440	0185  50			     push    ax
    441	0186  E8 0000e			     call    near ptr _putstr
    442	0189  59			     pop     cx
    443	018A  59			     pop     cx
    444					;
    445					;					 putch('\n');
    446					;
    447	018B  B8 000A			     mov     ax,10
    448	018E  50			     push    ax
    449	018F  E8 0000e			     call    near ptr _putch
    450	0192  59			     pop     cx
    451	0193  47			     inc     di
    452	0194			     @1@842:
    453	0194  3B 3E 0210r		     cmp     di,word ptr DGROUP:history_len
    454	0198  7C D5			     jl	     short @1@786
    455					;
    456					;				     }
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 9
command.ASM



    457					;				     command_showprompt();
    458					;
    459	019A  E8 03D2			     call    near ptr command_showprompt
    460					;
    461					;				     break;
    462					;
    463	019D  E9 016F			     jmp     @1@2102
    464	01A0			     @1@898:
    465					;
    466					;				case 75: /* Seta para esquerda */
    467					;				     if	(numcar>0)  {
    468					;
    469	01A0  0B F6			     or	     si,si
    470	01A2  7E 04			     jle     short @1@954
    471					;
    472					;					--numcar;
    473					;
    474	01A4  4E			     dec     si
    475					;
    476					;					command_backspace();
    477					;
    478	01A5  E8 039D			     call    near ptr command_backspace
    479	01A8			     @1@954:
    480					;
    481					;				     }
    482					;				     break;
    483					;
    484	01A8  E9 0164			     jmp     @1@2102
    485	01AB			     @1@982:
    486					;
    487					;				case 72: /* Seta para cima */
    488					;				     if	(history_len>0)	 {
    489					;
    490	01AB  83 3E 0210r 00		     cmp     word ptr DGROUP:history_len,0
    491	01B0  7F 03			     jg	     @@0
    492	01B2  E9 00C3			     jmp     @1@1598
    493	01B5			     @@0:
    494					;
    495					;					novalinha=0;
    496					;
    497	01B5  C7 46 EE 0000		     mov     word ptr [bp-18],0
    498					;
    499					;					if (history_len<MAXHISTORY)  {
    500					;
    501	01BA  83 3E 0210r 0A		     cmp     word ptr DGROUP:history_len,10
    502	01BF  7D 27			     jge     short @1@1178
    503					;
    504					;					   if (history_pos==-1)	 {
    505					;
    506	01C1  83 3E 020Ar FF		     cmp     word ptr DGROUP:history_pos,-1
    507	01C6  75 0E			     jne     short @1@1094
    508					;
    509					;					      history_pos=history_nxt-1;
    510					;
    511	01C8  A1 020Cr			     mov     ax,word ptr DGROUP:history_nxt
    512	01CB  48			     dec     ax
    513	01CC  A3 020Ar			     mov     word ptr DGROUP:history_pos,ax
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 10
command.ASM



    514					;
    515					;					      novalinha=1;
    516					;
    517	01CF  C7 46 EE 0001		     mov     word ptr [bp-18],1
    518					;
    519					;					   }
    520					;
    521	01D4  EB 10			     jmp     short @1@1150
    522	01D6			     @1@1094:
    523					;
    524					;					   else	 {
    525					;					      if (history_pos>0)  {
    526					;
    527	01D6  83 3E 020Ar 00		     cmp     word ptr DGROUP:history_pos,0
    528	01DB  7E 09			     jle     short @1@1150
    529					;
    530					;						 history_pos--;
    531					;
    532	01DD  FF 0E 020Ar		     dec     word ptr DGROUP:history_pos
    533					;
    534					;						 novalinha=1;
    535					;
    536	01E1  C7 46 EE 0001		     mov     word ptr [bp-18],1
    537	01E6			     @1@1150:
    538					;
    539					;					      }
    540					;					   }
    541					;					}
    542					;
    543	01E6  EB 52			     jmp     short @1@1458
    544	01E8			     @1@1178:
    545					;
    546					;					else  {
    547					;					   if (history_pos==-1)	 {
    548					;
    549	01E8  83 3E 020Ar FF		     cmp     word ptr DGROUP:history_pos,-1
    550	01ED  75 1B			     jne     short @1@1290
    551					;
    552					;					      history_pos=history_nxt-1;
    553					;
    554	01EF  A1 020Cr			     mov     ax,word ptr DGROUP:history_nxt
    555	01F2  48			     dec     ax
    556	01F3  A3 020Ar			     mov     word ptr DGROUP:history_pos,ax
    557					;
    558					;					      if (history_pos<0)
    559					;
    560	01F6  83 3E 020Ar 00		     cmp     word ptr DGROUP:history_pos,0
    561	01FB  7D 06			     jge     short @1@1262
    562					;
    563					;						 history_pos=MAXHISTORY-1;
    564					;
    565	01FD  C7 06 020Ar 0009		     mov     word ptr DGROUP:history_pos,9
    566	0203			     @1@1262:
    567					;
    568					;					      novalinha=1;
    569					;
    570	0203  C7 46 EE 0001		     mov     word ptr [bp-18],1
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 11
command.ASM



    571					;
    572					;					   }
    573					;
    574	0208  EB 30			     jmp     short @1@1458
    575	020A			     @1@1290:
    576					;
    577					;					   else	 {
    578					;					      if (history_pos!=history_ini)  {
    579					;
    580	020A  A1 020Ar			     mov     ax,word ptr DGROUP:history_pos
    581	020D  3B 06 020Er		     cmp     ax,word ptr DGROUP:history_ini
    582	0211  74 27			     je	     short @1@1458
    583					;
    584					;						 novalinha=1;
    585					;
    586	0213  C7 46 EE 0001		     mov     word ptr [bp-18],1
    587					;
    588					;						 if (history_pos>history_ini)
    589					;
    590	0218  A1 020Ar			     mov     ax,word ptr DGROUP:history_pos
    591	021B  3B 06 020Er		     cmp     ax,word ptr DGROUP:history_ini
    592	021F  7E 06			     jle     short @1@1374
    593					;
    594					;						    --history_pos;
    595					;
    596	0221  FF 0E 020Ar		     dec     word ptr DGROUP:history_pos
    597	0225  EB 13			     jmp     short @1@1458
    598	0227			     @1@1374:
    599					;
    600					;						 else  {  /* history_pos<history_ini */
    601					;						    if (history_pos>0)
    602					;
    603	0227  83 3E 020Ar 00		     cmp     word ptr DGROUP:history_pos,0
    604	022C  7E 06			     jle     short @1@1430
    605					;
    606					;						       history_pos--;
    607					;
    608	022E  FF 0E 020Ar		     dec     word ptr DGROUP:history_pos
    609	0232  EB 06			     jmp     short @1@1458
    610	0234			     @1@1430:
    611					;
    612					;						    else
    613					;						       history_pos=MAXHISTORY-1;
    614					;
    615	0234  C7 06 020Ar 0009		     mov     word ptr DGROUP:history_pos,9
    616	023A			     @1@1458:
    617					;
    618					;						  }
    619					;					      }
    620					;					   }
    621					;					}
    622					;					if (novalinha)	{
    623					;
    624	023A  83 7E EE 00		     cmp     word ptr [bp-18],0
    625	023E  74 38			     je	     short @1@1598
    626	0240  EB 04			     jmp     short @1@1542
    627	0242			     @1@1514:
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 12
command.ASM



    628					;
    629					;					   /* Limpa a linha de comandos	*/
    630					;					   while (numcar>0)  {
    631					;						 --numcar;
    632					;
    633	0242  4E			     dec     si
    634					;
    635					;						 command_backspace();
    636					;
    637	0243  E8 02FF			     call    near ptr command_backspace
    638	0246			     @1@1542:
    639	0246  0B F6			     or	     si,si
    640	0248  7F F8			     jg	     short @1@1514
    641					;
    642					;					   }
    643					;					   strcpy(cmdline,history[history_pos]);
    644					;
    645	024A  1E			     push    ds
    646	024B  A1 020Ar			     mov     ax,word ptr DGROUP:history_pos
    647	024E  BA 001F			     mov     dx,31
    648	0251  F7 EA			     imul    dx
    649	0253  05 0212r			     add     ax,offset DGROUP:history
    650	0256  50			     push    ax
    651	0257  1E			     push    ds
    652	0258  B8 0606r			     mov     ax,offset DGROUP:cmdline
    653	025B  50			     push    ax
    654	025C  E8 0000e			     call    near ptr _strcpy
    655	025F  83 C4 08			     add     sp,8
    656					;
    657					;					   putstr(cmdline);
    658					;
    659	0262  1E			     push    ds
    660	0263  B8 0606r			     mov     ax,offset DGROUP:cmdline
    661	0266  50			     push    ax
    662	0267  E8 0000e			     call    near ptr _putstr
    663	026A  59			     pop     cx
    664	026B  59			     pop     cx
    665					;
    666					;					   numcar=strlen(cmdline);
    667					;
    668	026C  1E			     push    ds
    669	026D  B8 0606r			     mov     ax,offset DGROUP:cmdline
    670	0270  50			     push    ax
    671	0271  E8 0000e			     call    near ptr _strlen
    672	0274  59			     pop     cx
    673	0275  59			     pop     cx
    674	0276  8B F0			     mov     si,ax
    675	0278			     @1@1598:
    676					;
    677					;					}
    678					;				     }
    679					;				     break;
    680					;
    681	0278  E9 0094			     jmp     @1@2102
    682	027B			     @1@1626:
    683					;
    684					;				case 80: /* Seta para baixo */
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 13
command.ASM



    685					;				     if	(history_len>0 && history_pos!=-1)  {
    686					;
    687	027B  83 3E 0210r 00		     cmp     word ptr DGROUP:history_len,0
    688	0280  7F 03			     jg	     @@1
    689	0282  E9 0088			     jmp     @1@2074
    690	0285			     @@1:
    691	0285  83 3E 020Ar FF		     cmp     word ptr DGROUP:history_pos,-1
    692	028A  75 03			     jne     @@2
    693	028C  EB 7F 90			     jmp     @1@2074
    694	028F			     @@2:
    695					;
    696					;					if (history_len<MAXHISTORY)  {
    697					;
    698	028F  83 3E 0210r 0A		     cmp     word ptr DGROUP:history_len,10
    699	0294  7D 18			     jge     short @1@1822
    700					;
    701					;					   if (history_pos<history_len-1)
    702					;
    703	0296  A1 0210r			     mov     ax,word ptr DGROUP:history_len
    704	0299  48			     dec     ax
    705	029A  3B 06 020Ar		     cmp     ax,word ptr DGROUP:history_pos
    706	029E  7E 06			     jle     short @1@1766
    707					;
    708					;					      history_pos++;
    709					;
    710	02A0  FF 06 020Ar		     inc     word ptr DGROUP:history_pos
    711	02A4  EB 06			     jmp     short @1@1794
    712	02A6			     @1@1766:
    713					;
    714					;					   else
    715					;					      history_pos = -1;
    716					;
    717	02A6  C7 06 020Ar FFFF		     mov     word ptr DGROUP:history_pos,-1
    718	02AC			     @1@1794:
    719					;
    720					;					}
    721					;
    722	02AC  EB 20			     jmp     short @1@1934
    723	02AE			     @1@1822:
    724					;
    725					;					else  {
    726					;					   history_pos++;
    727					;
    728	02AE  FF 06 020Ar		     inc     word ptr DGROUP:history_pos
    729					;
    730					;					   if (history_pos>=MAXHISTORY)
    731					;
    732	02B2  83 3E 020Ar 0A		     cmp     word ptr DGROUP:history_pos,10
    733	02B7  7C 06			     jl	     short @1@1878
    734					;
    735					;					      history_pos = 0;
    736					;
    737	02B9  C7 06 020Ar 0000		     mov     word ptr DGROUP:history_pos,0
    738	02BF			     @1@1878:
    739					;
    740					;					   if (history_pos==history_nxt)
    741					;
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 14
command.ASM



    742	02BF  A1 020Ar			     mov     ax,word ptr DGROUP:history_pos
    743	02C2  3B 06 020Cr		     cmp     ax,word ptr DGROUP:history_nxt
    744	02C6  75 06			     jne     short @1@1934
    745					;
    746					;					      history_pos = -1;
    747					;
    748	02C8  C7 06 020Ar FFFF		     mov     word ptr DGROUP:history_pos,-1
    749	02CE			     @1@1934:
    750	02CE  EB 04			     jmp     short @1@1990
    751	02D0			     @1@1962:
    752					;
    753					;					}
    754					;					/* Limpa a linha de comandos */
    755					;					while (numcar>0)  {
    756					;					      --numcar;
    757					;
    758	02D0  4E			     dec     si
    759					;
    760					;					      command_backspace();
    761					;
    762	02D1  E8 0271			     call    near ptr command_backspace
    763	02D4			     @1@1990:
    764	02D4  0B F6			     or	     si,si
    765	02D6  7F F8			     jg	     short @1@1962
    766					;
    767					;					}
    768					;					if (history_pos!=-1)  {
    769					;
    770	02D8  83 3E 020Ar FF		     cmp     word ptr DGROUP:history_pos,-1
    771	02DD  74 2E			     je	     short @1@2074
    772					;
    773					;					   strcpy(cmdline,history[history_pos]);
    774					;
    775	02DF  1E			     push    ds
    776	02E0  A1 020Ar			     mov     ax,word ptr DGROUP:history_pos
    777	02E3  BA 001F			     mov     dx,31
    778	02E6  F7 EA			     imul    dx
    779	02E8  05 0212r			     add     ax,offset DGROUP:history
    780	02EB  50			     push    ax
    781	02EC  1E			     push    ds
    782	02ED  B8 0606r			     mov     ax,offset DGROUP:cmdline
    783	02F0  50			     push    ax
    784	02F1  E8 0000e			     call    near ptr _strcpy
    785	02F4  83 C4 08			     add     sp,8
    786					;
    787					;					   putstr(cmdline);
    788					;
    789	02F7  1E			     push    ds
    790	02F8  B8 0606r			     mov     ax,offset DGROUP:cmdline
    791	02FB  50			     push    ax
    792	02FC  E8 0000e			     call    near ptr _putstr
    793	02FF  59			     pop     cx
    794	0300  59			     pop     cx
    795					;
    796					;					   numcar=strlen(cmdline);
    797					;
    798	0301  1E			     push    ds
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 15
command.ASM



    799	0302  B8 0606r			     mov     ax,offset DGROUP:cmdline
    800	0305  50			     push    ax
    801	0306  E8 0000e			     call    near ptr _strlen
    802	0309  59			     pop     cx
    803	030A  59			     pop     cx
    804	030B  8B F0			     mov     si,ax
    805	030D			     @1@2074:
    806					;
    807					;					}
    808					;				     }
    809					;				     break;
    810					;
    811	030D  EB 00			     jmp     short @1@2102
    812	030F			     @1@2102:
    813					;
    814					;			 }
    815					;			 break;
    816					;
    817	030F  E9 01FF			     jmp     @1@3362
    818	0312			     @1@2130:
    819					;
    820					;		    case 13:
    821					;			 history_pos = -1;
    822					;
    823	0312  C7 06 020Ar FFFF		     mov     word ptr DGROUP:history_pos,-1
    824					;
    825					;			 putch('\n');
    826					;
    827	0318  B8 000A			     mov     ax,10
    828	031B  50			     push    ax
    829	031C  E8 0000e			     call    near ptr _putch
    830	031F  59			     pop     cx
    831					;
    832					;			 cmdline[numcar]='\0';
    833					;
    834	0320  C6 84 0606r 00		     mov     byte ptr DGROUP:cmdline[si],0
    835					;
    836					;			 /* Divide a linha de comandos em comando e opÁıes */
    837					;			 ptrline = cmdline;
    838					;
    839	0325  8C 5E E8			     mov     word ptr [bp-24],ds
    840	0328  C7 46 E6 0606r		     mov     word ptr [bp-26],offset DGROUP:cmdline
    841					;
    842					;			 argc =	0;
    843					;
    844	032D  C7 46 EA 0000		     mov     word ptr [bp-22],0
    845					;
    846					;			 pos = 0;
    847					;
    848	0332  C7 46 F0 0000		     mov     word ptr [bp-16],0
    849	0337			     @1@2158:
    850	0337  EB 03			     jmp     short @1@2214
    851	0339			     @1@2186:
    852					;
    853					;			 while (1) {
    854					;			       while (*ptrline!='\0' &&	(*ptrline==' ' || *ptrline=='\t'))
    855					;				     ++ptrline;
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 16
command.ASM



    856					;
    857	0339  FF 46 E6			     inc     word ptr [bp-26]
    858	033C			     @1@2214:
    859	033C  C4 5E E6			     les     bx,dword ptr [bp-26]
    860	033F  26: 80 3F	00		     cmp     byte ptr es:[bx],0
    861	0343  74 12			     je	     short @1@2298
    862	0345  C4 5E E6			     les     bx,dword ptr [bp-26]
    863	0348  26: 80 3F	20		     cmp     byte ptr es:[bx],32
    864	034C  74 EB			     je	     short @1@2186
    865	034E  C4 5E E6			     les     bx,dword ptr [bp-26]
    866	0351  26: 80 3F	09		     cmp     byte ptr es:[bx],9
    867	0355  74 E2			     je	     short @1@2186
    868	0357			     @1@2298:
    869					;
    870					;			       if (*ptrline=='\0')
    871					;
    872	0357  C4 5E E6			     les     bx,dword ptr [bp-26]
    873	035A  26: 80 3F	00		     cmp     byte ptr es:[bx],0
    874	035E  75 03			     jne     short @1@2354
    875					;
    876					;				  break;
    877					;
    878	0360  E9 00B4			     jmp     @1@2718
    879	0363			     @1@2354:
    880					;
    881					;			       i = 0;
    882					;
    883	0363  33 FF			     xor     di,di
    884	0365  EB 0E			     jmp     short @1@2410
    885	0367			     @1@2382:
    886					;
    887					;			       while (*ptrline!='\0' &&	*ptrline!=' ' && *ptrline!='\t')  {
    888					;				     palavra[i++] = *ptrline;
    889					;
    890	0367  C4 5E E6			     les     bx,dword ptr [bp-26]
    891	036A  26: 8A 07			     mov     al,byte ptr es:[bx]
    892	036D  88 85 05E7r		     mov     byte ptr DGROUP:palavra[di],al
    893	0371  47			     inc     di
    894					;
    895					;				     ++ptrline;
    896					;
    897	0372  FF 46 E6			     inc     word ptr [bp-26]
    898	0375			     @1@2410:
    899	0375  C4 5E E6			     les     bx,dword ptr [bp-26]
    900	0378  26: 80 3F	00		     cmp     byte ptr es:[bx],0
    901	037C  74 12			     je	     short @1@2494
    902	037E  C4 5E E6			     les     bx,dword ptr [bp-26]
    903	0381  26: 80 3F	20		     cmp     byte ptr es:[bx],32
    904	0385  74 09			     je	     short @1@2494
    905	0387  C4 5E E6			     les     bx,dword ptr [bp-26]
    906	038A  26: 80 3F	09		     cmp     byte ptr es:[bx],9
    907	038E  75 D7			     jne     short @1@2382
    908	0390			     @1@2494:
    909					;
    910					;			       }
    911					;			       palavra[i] = '\0';
    912					;
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 17
command.ASM



    913	0390  C6 85 05E7r 00		     mov     byte ptr DGROUP:palavra[di],0
    914					;
    915					;			       if (palavra[0]=='$')  {
    916					;
    917	0395  80 3E 05E7r 24		     cmp     byte ptr DGROUP:palavra,36
    918	039A  75 39			     jne     short @1@2606
    919					;
    920					;				  var =	command_var_value(&palavra[1]);
    921					;
    922	039C  1E			     push    ds
    923	039D  B8 05E8r			     mov     ax,offset DGROUP:palavra+1
    924	03A0  50			     push    ax
    925	03A1  E8 036B			     call    near ptr command_var_value
    926	03A4  59			     pop     cx
    927	03A5  59			     pop     cx
    928	03A6  89 56 E4			     mov     word ptr [bp-28],dx
    929	03A9  89 46 E2			     mov     word ptr [bp-30],ax
    930					;
    931					;				  if (var!=NULL)  {
    932					;
    933	03AC  8B 46 E2			     mov     ax,word ptr [bp-30]
    934	03AF  0B 46 E4			     or	     ax,word ptr [bp-28]
    935	03B2  74 1F			     je	     short @1@2578
    936					;
    937					;				     strcpy(palavra,var);
    938					;
    939	03B4  FF 76 E4			     push    word ptr [bp-28]
    940	03B7  FF 76 E2			     push    word ptr [bp-30]
    941	03BA  1E			     push    ds
    942	03BB  B8 05E7r			     mov     ax,offset DGROUP:palavra
    943	03BE  50			     push    ax
    944	03BF  E8 0000e			     call    near ptr _strcpy
    945	03C2  83 C4 08			     add     sp,8
    946					;
    947					;				     i = strlen(palavra);
    948					;
    949	03C5  1E			     push    ds
    950	03C6  B8 05E7r			     mov     ax,offset DGROUP:palavra
    951	03C9  50			     push    ax
    952	03CA  E8 0000e			     call    near ptr _strlen
    953	03CD  59			     pop     cx
    954	03CE  59			     pop     cx
    955	03CF  8B F8			     mov     di,ax
    956					;
    957					;				  }
    958					;
    959	03D1  EB 02			     jmp     short @1@2606
    960	03D3			     @1@2578:
    961					;
    962					;				  else
    963					;				     continue;
    964					;
    965	03D3  EB 3F			     jmp     short @1@2690
    966	03D5			     @1@2606:
    967					;
    968					;
    969					;			       }
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 18
command.ASM



    970					;			       strcpy(&argline[pos],palavra);
    971					;
    972	03D5  1E			     push    ds
    973	03D6  B8 05E7r			     mov     ax,offset DGROUP:palavra
    974	03D9  50			     push    ax
    975	03DA  1E			     push    ds
    976	03DB  8B 46 F0			     mov     ax,word ptr [bp-16]
    977	03DE  05 0388r			     add     ax,offset DGROUP:argline
    978	03E1  50			     push    ax
    979	03E2  E8 0000e			     call    near ptr _strcpy
    980	03E5  83 C4 08			     add     sp,8
    981					;
    982					;			       argv[argc++] = &argline[pos];
    983					;
    984	03E8  8B 46 F0			     mov     ax,word ptr [bp-16]
    985	03EB  05 0388r			     add     ax,offset DGROUP:argline
    986	03EE  8B 5E EA			     mov     bx,word ptr [bp-22]
    987	03F1  B1 02			     mov     cl,2
    988	03F3  D3 E3			     shl     bx,cl
    989	03F5  8C 9F 034Ar		     mov     word ptr DGROUP:argv[bx+2],ds
    990	03F9  89 87 0348r		     mov     word ptr DGROUP:argv[bx],ax
    991	03FD  FF 46 EA			     inc     word ptr [bp-22]
    992					;
    993					;			       pos+= (i+1);
    994					;
    995	0400  8B C7			     mov     ax,di
    996	0402  40			     inc     ax
    997	0403  01 46 F0			     add     word ptr [bp-16],ax
    998					;
    999					;			       if (*ptrline=='\0')
   1000					;
   1001	0406  C4 5E E6			     les     bx,dword ptr [bp-26]
   1002	0409  26: 80 3F	00		     cmp     byte ptr es:[bx],0
   1003	040D  75 02			     jne     short @1@2662
   1004					;
   1005					;				  break;
   1006					;
   1007	040F  EB 06			     jmp     short @1@2718
   1008	0411			     @1@2662:
   1009					;
   1010					;			       ++ptrline;
   1011					;
   1012	0411  FF 46 E6			     inc     word ptr [bp-26]
   1013	0414			     @1@2690:
   1014	0414  E9 FF20			     jmp     @1@2158
   1015	0417			     @1@2718:
   1016					;
   1017					;			 }
   1018					;			 /* Se È comando vazio n„o faz nada */
   1019					;			 if (argc==0)  {
   1020					;
   1021	0417  83 7E EA 00		     cmp     word ptr [bp-22],0
   1022	041B  75 06			     jne     short @1@2774
   1023					;
   1024					;			    command_showprompt();
   1025					;
   1026	041D  E8 014F			     call    near ptr command_showprompt
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 19
command.ASM



   1027					;
   1028					;			    break;
   1029					;
   1030	0420  E9 00EE			     jmp     @1@3362
   1031	0423			     @1@2774:
   1032					;
   1033					;			 }
   1034					;			 /* Salva linha	de comando no histÛrico	*/
   1035					;			 strcpy	(history[history_nxt],cmdline);
   1036					;
   1037	0423  1E			     push    ds
   1038	0424  B8 0606r			     mov     ax,offset DGROUP:cmdline
   1039	0427  50			     push    ax
   1040	0428  1E			     push    ds
   1041	0429  A1 020Cr			     mov     ax,word ptr DGROUP:history_nxt
   1042	042C  BA 001F			     mov     dx,31
   1043	042F  F7 EA			     imul    dx
   1044	0431  05 0212r			     add     ax,offset DGROUP:history
   1045	0434  50			     push    ax
   1046	0435  E8 0000e			     call    near ptr _strcpy
   1047	0438  83 C4 08			     add     sp,8
   1048					;
   1049					;			 if (history_len<MAXHISTORY)
   1050					;
   1051	043B  83 3E 0210r 0A		     cmp     word ptr DGROUP:history_len,10
   1052	0440  7D 06			     jge     short @1@2830
   1053					;
   1054					;			    ++history_len;
   1055					;
   1056	0442  FF 06 0210r		     inc     word ptr DGROUP:history_len
   1057	0446  EB 13			     jmp     short @1@2914
   1058	0448			     @1@2830:
   1059					;
   1060					;			 else  {
   1061					;			    if (history_ini==MAXHISTORY-1)
   1062					;
   1063	0448  83 3E 020Er 09		     cmp     word ptr DGROUP:history_ini,9
   1064	044D  75 08			     jne     short @1@2886
   1065					;
   1066					;			       history_ini = 0;
   1067					;
   1068	044F  C7 06 020Er 0000		     mov     word ptr DGROUP:history_ini,0
   1069	0455  EB 04			     jmp     short @1@2914
   1070	0457			     @1@2886:
   1071					;
   1072					;			    else
   1073					;			       ++history_ini;
   1074					;
   1075	0457  FF 06 020Er		     inc     word ptr DGROUP:history_ini
   1076	045B			     @1@2914:
   1077					;
   1078					;			 }
   1079					;			 if (history_nxt==MAXHISTORY-1)
   1080					;
   1081	045B  83 3E 020Cr 09		     cmp     word ptr DGROUP:history_nxt,9
   1082	0460  75 08			     jne     short @1@2970
   1083					;
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 20
command.ASM



   1084					;			    history_nxt	= 0;
   1085					;
   1086	0462  C7 06 020Cr 0000		     mov     word ptr DGROUP:history_nxt,0
   1087	0468  EB 04			     jmp     short @1@2998
   1088	046A			     @1@2970:
   1089					;
   1090					;			 else
   1091					;			    ++history_nxt;
   1092					;
   1093	046A  FF 06 020Cr		     inc     word ptr DGROUP:history_nxt
   1094	046E			     @1@2998:
   1095					;
   1096					;			 /* Verifica qual È o comando ... */
   1097					;			 achou = 0;
   1098					;
   1099	046E  C7 46 F2 0000		     mov     word ptr [bp-14],0
   1100					;
   1101					;			 for (i=0;i<MAXCOMMANDS;++i)  {
   1102					;
   1103	0473  33 FF			     xor     di,di
   1104	0475  EB 28			     jmp     short @1@3110
   1105	0477			     @1@3026:
   1106					;
   1107					;			     if	(strcmp(argv[0],commands[i].name)==0)  {
   1108					;
   1109	0477  1E			     push    ds
   1110	0478  8B C7			     mov     ax,di
   1111	047A  BA 0006			     mov     dx,6
   1112	047D  F7 EA			     imul    dx
   1113	047F  8B D8			     mov     bx,ax
   1114	0481  FF B7 0002r		     push    word ptr DGROUP:commands[bx]
   1115	0485  FF 36 034Ar		     push    word ptr DGROUP:argv+2
   1116	0489  FF 36 0348r		     push    word ptr DGROUP:argv
   1117	048D  E8 0000e			     call    near ptr _strcmp
   1118	0490  83 C4 08			     add     sp,8
   1119	0493  0B C0			     or	     ax,ax
   1120	0495  75 07			     jne     short @1@3082
   1121					;
   1122					;				achou=1;
   1123					;
   1124	0497  C7 46 F2 0001		     mov     word ptr [bp-14],1
   1125					;
   1126					;				break;
   1127					;
   1128	049C  EB 06			     jmp     short @1@3138
   1129	049E			     @1@3082:
   1130	049E  47			     inc     di
   1131	049F			     @1@3110:
   1132	049F  83 FF 19			     cmp     di,25
   1133	04A2  7C D3			     jl	     short @1@3026
   1134	04A4			     @1@3138:
   1135					;
   1136					;			     }
   1137					;			 }
   1138					;
   1139					;			 /* Executa o comando */
   1140					;			 if (achou)  {
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 21
command.ASM



   1141					;
   1142	04A4  83 7E F2 00		     cmp     word ptr [bp-14],0
   1143	04A8  74 39			     je	     short @1@3194
   1144					;
   1145					;			    res	= commands[i].code(argc,argv);
   1146					;
   1147	04AA  B8 0348r			     mov     ax,offset DGROUP:argv
   1148	04AD  50			     push    ax
   1149	04AE  FF 76 EA			     push    word ptr [bp-22]
   1150	04B1  8B C7			     mov     ax,di
   1151	04B3  BA 0006			     mov     dx,6
   1152	04B6  F7 EA			     imul    dx
   1153	04B8  8B D8			     mov     bx,ax
   1154	04BA  FF 97 0006r		     call    word ptr DGROUP:commands[bx+4]
   1155	04BE  59			     pop     cx
   1156	04BF  59			     pop     cx
   1157	04C0  89 46 EC			     mov     word ptr [bp-20],ax
   1158					;
   1159					;			    inttostr(str,res);
   1160					;
   1161	04C3  FF 76 EC			     push    word ptr [bp-20]
   1162	04C6  16			     push    ss
   1163	04C7  8D 46 F4			     lea     ax,word ptr [bp-12]
   1164	04CA  50			     push    ax
   1165	04CB  E8 0000e			     call    near ptr _inttostr
   1166	04CE  83 C4 06			     add     sp,6
   1167					;
   1168					;			    command_var_set("ERRORLEVEL",str);
   1169					;
   1170	04D1  16			     push    ss
   1171	04D2  8D 46 F4			     lea     ax,word ptr [bp-12]
   1172	04D5  50			     push    ax
   1173	04D6  1E			     push    ds
   1174	04D7  B8 0629r			     mov     ax,offset DGROUP:s@+1421
   1175	04DA  50			     push    ax
   1176	04DB  E8 025E			     call    near ptr command_var_set
   1177	04DE  83 C4 08			     add     sp,8
   1178					;
   1179					;			 }
   1180					;
   1181	04E1  EB 0A			     jmp     short @1@3222
   1182	04E3			     @1@3194:
   1183					;
   1184					;			 else
   1185					;			    putstr("Erro: comando desconhecido!\n");
   1186					;
   1187	04E3  1E			     push    ds
   1188	04E4  B8 0634r			     mov     ax,offset DGROUP:s@+1432
   1189	04E7  50			     push    ax
   1190	04E8  E8 0000e			     call    near ptr _putstr
   1191	04EB  59			     pop     cx
   1192	04EC  59			     pop     cx
   1193	04ED			     @1@3222:
   1194					;
   1195					;
   1196					;			 if (!end_command)
   1197					;
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 22
command.ASM



   1198	04ED  83 3E 0625r 00		     cmp     word ptr DGROUP:end_command,0
   1199	04F2  75 03			     jne     short @1@3278
   1200					;
   1201					;			    command_showprompt();
   1202					;
   1203	04F4  E8 0078			     call    near ptr command_showprompt
   1204	04F7			     @1@3278:
   1205					;
   1206					;
   1207					;			 numcar=0;
   1208					;
   1209	04F7  33 F6			     xor     si,si
   1210					;
   1211					;			 break;
   1212					;
   1213	04F9  EB 16			     jmp     short @1@3362
   1214	04FB			     @1@3306:
   1215					;
   1216					;		    default:
   1217					;			 if (numcar<MAXLINE)  {
   1218					;
   1219	04FB  83 FE 1E			     cmp     si,30
   1220	04FE  7D 11			     jge     short @1@3362
   1221					;
   1222					;			    putch(car);
   1223					;
   1224	0500  8A 46 FF			     mov     al,byte ptr [bp-1]
   1225	0503  98			     cbw
   1226	0504  50			     push    ax
   1227	0505  E8 0000e			     call    near ptr _putch
   1228	0508  59			     pop     cx
   1229					;
   1230					;			    cmdline[numcar++]=car;
   1231					;
   1232	0509  8A 46 FF			     mov     al,byte ptr [bp-1]
   1233	050C  88 84 0606r		     mov     byte ptr DGROUP:cmdline[si],al
   1234	0510  46			     inc     si
   1235	0511			     @1@3362:
   1236	0511  83 3E 0625r 00		     cmp     word ptr DGROUP:end_command,0
   1237	0516  75 03			     jne     @@3
   1238	0518  E9 FBCF			     jmp     @1@58
   1239	051B			     @@3:
   1240					;
   1241					;			 }
   1242					;	     }
   1243					;      }
   1244					;
   1245					;    }
   1246					;
   1247	051B  5F			     pop     di
   1248	051C  5E			     pop     si
   1249	051D  8B E5			     mov     sp,bp
   1250	051F  5D			     pop     bp
   1251	0520  C3			     ret
   1252	0521			     _command	     endp
   1253	0521			     @1@C3330	     label   word
   1254	0521  41			     db	     65
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 23
command.ASM



   1255	0522  00			     db	     0
   1256	0523  48			     db	     72
   1257	0524  00			     db	     0
   1258	0525  4B			     db	     75
   1259	0526  00			     db	     0
   1260	0527  50			     db	     80
   1261	0528  00			     db	     0
   1262	0529  0153r			     dw	     @1@674
   1263	052B  01ABr			     dw	     @1@982
   1264	052D  01A0r			     dw	     @1@898
   1265	052F  027Br			     dw	     @1@1626
   1266	0531			     @1@C3234	     label   word
   1267	0531  00			     db	     0
   1268	0532  00			     db	     0
   1269	0533  08			     db	     8
   1270	0534  00			     db	     0
   1271	0535  09			     db	     9
   1272	0536  00			     db	     0
   1273	0537  0D			     db	     13
   1274	0538  00			     db	     0
   1275	0539  1B			     db	     27
   1276	053A  00			     db	     0
   1277	053B  012Cr			     dw	     @1@478
   1278	053D  0114r			     dw	     @1@282
   1279	053F  0111r			     dw	     @1@254
   1280	0541  0312r			     dw	     @1@2130
   1281	0543  011Fr			     dw	     @1@366
   1282					;
   1283					;    static void command_backspace()
   1284					;
   1285					     assume  cs:_TEXT
   1286	0545			     command_backspace	     proc    near
   1287	0545  55			     push    bp
   1288	0546  8B EC			     mov     bp,sp
   1289	0548  56			     push    si
   1290	0549  57			     push    di
   1291					;
   1292					;    {
   1293					;      int x,y;
   1294					;
   1295					;      x = wherex();
   1296					;
   1297	054A  E8 0000e			     call    near ptr _wherex
   1298	054D  8B F0			     mov     si,ax
   1299					;
   1300					;      y = wherey();
   1301					;
   1302	054F  E8 0000e			     call    near ptr _wherey
   1303	0552  8B F8			     mov     di,ax
   1304					;
   1305					;      --x;
   1306					;
   1307	0554  4E			     dec     si
   1308					;
   1309					;      gotoxy(x,y);
   1310					;
   1311	0555  57			     push    di
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 24
command.ASM



   1312	0556  56			     push    si
   1313	0557  E8 0000e			     call    near ptr _gotoxy
   1314	055A  59			     pop     cx
   1315	055B  59			     pop     cx
   1316					;
   1317					;      putch(' ');
   1318					;
   1319	055C  B8 0020			     mov     ax,32
   1320	055F  50			     push    ax
   1321	0560  E8 0000e			     call    near ptr _putch
   1322	0563  59			     pop     cx
   1323					;
   1324					;      gotoxy(x,y);
   1325					;
   1326	0564  57			     push    di
   1327	0565  56			     push    si
   1328	0566  E8 0000e			     call    near ptr _gotoxy
   1329	0569  59			     pop     cx
   1330	056A  59			     pop     cx
   1331					;
   1332					;    }
   1333					;
   1334	056B  5F			     pop     di
   1335	056C  5E			     pop     si
   1336	056D  5D			     pop     bp
   1337	056E  C3			     ret
   1338	056F			     command_backspace	     endp
   1339					;
   1340					;    static void command_showprompt()
   1341					;
   1342					     assume  cs:_TEXT
   1343	056F			     command_showprompt	     proc    near
   1344	056F  55			     push    bp
   1345	0570  8B EC			     mov     bp,sp
   1346	0572  83 EC 06			     sub     sp,6
   1347					;
   1348					;    {
   1349					;      char cor;
   1350					;      char far	*prompt;
   1351					;
   1352					;      prompt =	command_var_value("PROMPT");
   1353					;
   1354	0575  1E			     push    ds
   1355	0576  B8 0651r			     mov     ax,offset DGROUP:s@+1461
   1356	0579  50			     push    ax
   1357	057A  E8 0192			     call    near ptr command_var_value
   1358	057D  59			     pop     cx
   1359	057E  59			     pop     cx
   1360	057F  89 56 FC			     mov     word ptr [bp-4],dx
   1361	0582  89 46 FA			     mov     word ptr [bp-6],ax
   1362					;
   1363					;      if (prompt!=NULL)  {
   1364					;
   1365	0585  8B 46 FA			     mov     ax,word ptr [bp-6]
   1366	0588  0B 46 FC			     or	     ax,word ptr [bp-4]
   1367	058B  74 22			     je	     short @3@86
   1368					;
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 25
command.ASM



   1369					;	  cor =	getcolor();
   1370					;
   1371	058D  E8 0000e			     call    near ptr _getcolor
   1372	0590  88 46 FF			     mov     byte ptr [bp-1],al
   1373					;
   1374					;	  setcolor(PROMPTCOLOR);
   1375					;
   1376	0593  B8 0009			     mov     ax,9
   1377	0596  50			     push    ax
   1378	0597  E8 0000e			     call    near ptr _setcolor
   1379	059A  59			     pop     cx
   1380					;
   1381					;	  putstr(prompt);
   1382					;
   1383	059B  FF 76 FC			     push    word ptr [bp-4]
   1384	059E  FF 76 FA			     push    word ptr [bp-6]
   1385	05A1  E8 0000e			     call    near ptr _putstr
   1386	05A4  59			     pop     cx
   1387	05A5  59			     pop     cx
   1388					;
   1389					;	  setcolor(cor);
   1390					;
   1391	05A6  8A 46 FF			     mov     al,byte ptr [bp-1]
   1392	05A9  98			     cbw
   1393	05AA  50			     push    ax
   1394	05AB  E8 0000e			     call    near ptr _setcolor
   1395	05AE  59			     pop     cx
   1396	05AF			     @3@86:
   1397					;
   1398					;      }
   1399					;      putch(' ');
   1400					;
   1401	05AF  B8 0020			     mov     ax,32
   1402	05B2  50			     push    ax
   1403	05B3  E8 0000e			     call    near ptr _putch
   1404	05B6  59			     pop     cx
   1405					;
   1406					;    }
   1407					;
   1408	05B7  8B E5			     mov     sp,bp
   1409	05B9  5D			     pop     bp
   1410	05BA  C3			     ret
   1411	05BB			     command_showprompt	     endp
   1412					;
   1413					;    static void command_var_init()
   1414					;
   1415					     assume  cs:_TEXT
   1416	05BB			     command_var_init	     proc    near
   1417	05BB  55			     push    bp
   1418	05BC  8B EC			     mov     bp,sp
   1419					;
   1420					;    {
   1421					;      int i;
   1422					;
   1423					;      for (i=0;i<VAR_MAX;++i)	{
   1424					;
   1425	05BE  33 C9			     xor     cx,cx
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 26
command.ASM



   1426	05C0  EB 1D			     jmp     short @4@114
   1427	05C2			     @4@58:
   1428					;
   1429					;	   var[i].name[0]='\0';
   1430					;
   1431	05C2  8B C1			     mov     ax,cx
   1432	05C4  BA 0032			     mov     dx,50
   1433	05C7  F7 EA			     imul    dx
   1434	05C9  8B D8			     mov     bx,ax
   1435	05CB  C6 87 0016r 00		     mov     byte ptr DGROUP:var[bx],0
   1436					;
   1437					;	   var[i].value[0]='\0';
   1438					;
   1439	05D0  8B C1			     mov     ax,cx
   1440	05D2  BA 0032			     mov     dx,50
   1441	05D5  F7 EA			     imul    dx
   1442	05D7  8B D8			     mov     bx,ax
   1443	05D9  C6 87 0023r 00		     mov     byte ptr DGROUP:var[bx+13],0
   1444	05DE  41			     inc     cx
   1445	05DF			     @4@114:
   1446	05DF  83 F9 0A			     cmp     cx,10
   1447	05E2  7C DE			     jl	     short @4@58
   1448					;
   1449					;      }
   1450					;      num_var = 0;
   1451					;
   1452	05E4  C7 06 0000r 0000		     mov     word ptr DGROUP:num_var,0
   1453					;
   1454					;    }
   1455					;
   1456	05EA  5D			     pop     bp
   1457	05EB  C3			     ret
   1458	05EC			     command_var_init	     endp
   1459					;
   1460					;    static int	command_var_nextfree()
   1461					;
   1462					     assume  cs:_TEXT
   1463	05EC			     command_var_nextfree    proc    near
   1464	05EC  55			     push    bp
   1465	05ED  8B EC			     mov     bp,sp
   1466					;
   1467					;    {
   1468					;      int i;
   1469					;
   1470					;      if (num_var>=VAR_MAX)
   1471					;
   1472	05EF  83 3E 0000r 0A		     cmp     word ptr DGROUP:num_var,10
   1473	05F4  7C 05			     jl	     short @5@114
   1474	05F6			     @5@58:
   1475					;
   1476					;	  return -1;
   1477					;
   1478	05F6  B8 FFFF			     mov     ax,-1
   1479	05F9			     @5@86:
   1480	05F9  EB 20			     jmp     short @5@282
   1481	05FB			     @5@114:
   1482					;
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 27
command.ASM



   1483					;      for (i=0;i<VAR_MAX;++i)
   1484					;
   1485	05FB  33 C9			     xor     cx,cx
   1486	05FD  EB 15			     jmp     short @5@226
   1487	05FF			     @5@142:
   1488					;
   1489					;	   if (var[i].name[0]=='\0')
   1490					;
   1491	05FF  8B C1			     mov     ax,cx
   1492	0601  BA 0032			     mov     dx,50
   1493	0604  F7 EA			     imul    dx
   1494	0606  8B D8			     mov     bx,ax
   1495	0608  80 BF 0016r 00		     cmp     byte ptr DGROUP:var[bx],0
   1496	060D  75 04			     jne     short @5@198
   1497					;
   1498					;	      return i;
   1499					;
   1500	060F  8B C1			     mov     ax,cx
   1501	0611  EB E6			     jmp     short @5@86
   1502	0613			     @5@198:
   1503	0613  41			     inc     cx
   1504	0614			     @5@226:
   1505	0614  83 F9 0A			     cmp     cx,10
   1506	0617  7C E6			     jl	     short @5@142
   1507	0619  EB DB			     jmp     short @5@58
   1508	061B			     @5@282:
   1509					;
   1510					;      return -1;
   1511					;    }
   1512					;
   1513	061B  5D			     pop     bp
   1514	061C  C3			     ret
   1515	061D			     command_var_nextfree    endp
   1516					;
   1517					;    static void command_var_list()
   1518					;
   1519					     assume  cs:_TEXT
   1520	061D			     command_var_list	     proc    near
   1521	061D  55			     push    bp
   1522	061E  8B EC			     mov     bp,sp
   1523	0620  83 EC 02			     sub     sp,2
   1524	0623  56			     push    si
   1525					;
   1526					;    {
   1527					;      int i;
   1528					;      char cor;
   1529					;
   1530					;      cor = getcolor();
   1531					;
   1532	0624  E8 0000e			     call    near ptr _getcolor
   1533	0627  88 46 FF			     mov     byte ptr [bp-1],al
   1534					;
   1535					;      for (i=0;i<VAR_MAX;++i)	{
   1536					;
   1537	062A  33 F6			     xor     si,si
   1538	062C  EB 54			     jmp     short @6@142
   1539	062E			     @6@58:
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 28
command.ASM



   1540					;
   1541					;	   if (var[i].name[0]!='\0')  {
   1542					;
   1543	062E  8B C6			     mov     ax,si
   1544	0630  BA 0032			     mov     dx,50
   1545	0633  F7 EA			     imul    dx
   1546	0635  8B D8			     mov     bx,ax
   1547	0637  80 BF 0016r 00		     cmp     byte ptr DGROUP:var[bx],0
   1548	063C  74 43			     je	     short @6@114
   1549					;
   1550					;	      putstr(var[i].name);
   1551					;
   1552	063E  1E			     push    ds
   1553	063F  8B C6			     mov     ax,si
   1554	0641  BA 0032			     mov     dx,50
   1555	0644  F7 EA			     imul    dx
   1556	0646  05 0016r			     add     ax,offset DGROUP:var
   1557	0649  50			     push    ax
   1558	064A  E8 0000e			     call    near ptr _putstr
   1559	064D  59			     pop     cx
   1560	064E  59			     pop     cx
   1561					;
   1562					;	      putch('=');
   1563					;
   1564	064F  B8 003D			     mov     ax,61
   1565	0652  50			     push    ax
   1566	0653  E8 0000e			     call    near ptr _putch
   1567	0656  59			     pop     cx
   1568					;
   1569					;	      setcolor(VARCOLOR);
   1570					;
   1571	0657  B8 000E			     mov     ax,14
   1572	065A  50			     push    ax
   1573	065B  E8 0000e			     call    near ptr _setcolor
   1574	065E  59			     pop     cx
   1575					;
   1576					;	      putstr(var[i].value);
   1577					;
   1578	065F  1E			     push    ds
   1579	0660  8B C6			     mov     ax,si
   1580	0662  BA 0032			     mov     dx,50
   1581	0665  F7 EA			     imul    dx
   1582	0667  05 0023r			     add     ax,offset DGROUP:var+13
   1583	066A  50			     push    ax
   1584	066B  E8 0000e			     call    near ptr _putstr
   1585	066E  59			     pop     cx
   1586	066F  59			     pop     cx
   1587					;
   1588					;	      setcolor(cor);
   1589					;
   1590	0670  8A 46 FF			     mov     al,byte ptr [bp-1]
   1591	0673  98			     cbw
   1592	0674  50			     push    ax
   1593	0675  E8 0000e			     call    near ptr _setcolor
   1594	0678  59			     pop     cx
   1595					;
   1596					;	      putch('\n');
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 29
command.ASM



   1597					;
   1598	0679  B8 000A			     mov     ax,10
   1599	067C  50			     push    ax
   1600	067D  E8 0000e			     call    near ptr _putch
   1601	0680  59			     pop     cx
   1602	0681			     @6@114:
   1603	0681  46			     inc     si
   1604	0682			     @6@142:
   1605	0682  83 FE 0A			     cmp     si,10
   1606	0685  7C A7			     jl	     short @6@58
   1607					;
   1608					;	   }
   1609					;      }
   1610					;    }
   1611					;
   1612	0687  5E			     pop     si
   1613	0688  8B E5			     mov     sp,bp
   1614	068A  5D			     pop     bp
   1615	068B  C3			     ret
   1616	068C			     command_var_list	     endp
   1617					;
   1618					;    static int	 command_var_search(char far *nome)
   1619					;
   1620					     assume  cs:_TEXT
   1621	068C			     command_var_search	     proc    near
   1622	068C  55			     push    bp
   1623	068D  8B EC			     mov     bp,sp
   1624	068F  56			     push    si
   1625					;
   1626					;    {
   1627					;      int i;
   1628					;
   1629					;      if (nome[0] == '\0')
   1630					;
   1631	0690  C4 5E 04			     les     bx,dword ptr [bp+4]
   1632	0693  26: 80 3F	00		     cmp     byte ptr es:[bx],0
   1633	0697  75 05			     jne     short @7@114
   1634	0699			     @7@58:
   1635					;
   1636					;	  return -1;
   1637					;
   1638	0699  B8 FFFF			     mov     ax,-1
   1639	069C			     @7@86:
   1640	069C  EB 2C			     jmp     short @7@282
   1641	069E			     @7@114:
   1642					;
   1643					;      for (i=0;i<VAR_MAX;++i)	{
   1644					;
   1645	069E  33 F6			     xor     si,si
   1646	06A0  EB 21			     jmp     short @7@226
   1647	06A2			     @7@142:
   1648					;
   1649					;	   if (strcmp(nome,var[i].name)==0)
   1650					;
   1651	06A2  1E			     push    ds
   1652	06A3  8B C6			     mov     ax,si
   1653	06A5  BA 0032			     mov     dx,50
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 30
command.ASM



   1654	06A8  F7 EA			     imul    dx
   1655	06AA  05 0016r			     add     ax,offset DGROUP:var
   1656	06AD  50			     push    ax
   1657	06AE  FF 76 06			     push    word ptr [bp+6]
   1658	06B1  FF 76 04			     push    word ptr [bp+4]
   1659	06B4  E8 0000e			     call    near ptr _strcmp
   1660	06B7  83 C4 08			     add     sp,8
   1661	06BA  0B C0			     or	     ax,ax
   1662	06BC  75 04			     jne     short @7@198
   1663					;
   1664					;	      return i;
   1665					;
   1666	06BE  8B C6			     mov     ax,si
   1667	06C0  EB DA			     jmp     short @7@86
   1668	06C2			     @7@198:
   1669	06C2  46			     inc     si
   1670	06C3			     @7@226:
   1671	06C3  83 FE 0A			     cmp     si,10
   1672	06C6  7C DA			     jl	     short @7@142
   1673	06C8  EB CF			     jmp     short @7@58
   1674	06CA			     @7@282:
   1675					;
   1676					;      }
   1677					;      return -1;
   1678					;    }
   1679					;
   1680	06CA  5E			     pop     si
   1681	06CB  5D			     pop     bp
   1682	06CC  C3			     ret
   1683	06CD			     command_var_search	     endp
   1684					;
   1685					;    static int	 command_var_unset(char	far *nome)
   1686					;
   1687					     assume  cs:_TEXT
   1688	06CD			     command_var_unset	     proc    near
   1689	06CD  55			     push    bp
   1690	06CE  8B EC			     mov     bp,sp
   1691	06D0  56			     push    si
   1692					;
   1693					;    {
   1694					;      int i;
   1695					;
   1696					;      i = command_var_search(nome);
   1697					;
   1698	06D1  FF 76 06			     push    word ptr [bp+6]
   1699	06D4  FF 76 04			     push    word ptr [bp+4]
   1700	06D7  E8 FFB2			     call    near ptr command_var_search
   1701	06DA  59			     pop     cx
   1702	06DB  59			     pop     cx
   1703	06DC  8B F0			     mov     si,ax
   1704					;
   1705					;      if (i==-1)
   1706					;
   1707	06DE  83 FE FF			     cmp     si,-1
   1708	06E1  75 05			     jne     short @8@114
   1709					;
   1710					;	  return -1;
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 31
command.ASM



   1711					;
   1712	06E3  B8 FFFF			     mov     ax,-1
   1713	06E6			     @8@86:
   1714	06E6  EB 24			     jmp     short @8@142
   1715	06E8			     @8@114:
   1716					;
   1717					;      var[i].name[0]='\0';
   1718					;
   1719	06E8  8B C6			     mov     ax,si
   1720	06EA  BA 0032			     mov     dx,50
   1721	06ED  F7 EA			     imul    dx
   1722	06EF  8B D8			     mov     bx,ax
   1723	06F1  C6 87 0016r 00		     mov     byte ptr DGROUP:var[bx],0
   1724					;
   1725					;      var[i].value[0]='\0';
   1726					;
   1727	06F6  8B C6			     mov     ax,si
   1728	06F8  BA 0032			     mov     dx,50
   1729	06FB  F7 EA			     imul    dx
   1730	06FD  8B D8			     mov     bx,ax
   1731	06FF  C6 87 0023r 00		     mov     byte ptr DGROUP:var[bx+13],0
   1732					;
   1733					;      --num_var;
   1734					;
   1735	0704  FF 0E 0000r		     dec     word ptr DGROUP:num_var
   1736					;
   1737					;      return 0;
   1738					;
   1739	0708  33 C0			     xor     ax,ax
   1740	070A  EB DA			     jmp     short @8@86
   1741	070C			     @8@142:
   1742					;
   1743					;    }
   1744					;
   1745	070C  5E			     pop     si
   1746	070D  5D			     pop     bp
   1747	070E  C3			     ret
   1748	070F			     command_var_unset	     endp
   1749					;
   1750					;    static char far *command_var_value(char far *nome)
   1751					;
   1752					     assume  cs:_TEXT
   1753	070F			     command_var_value	     proc    near
   1754	070F  55			     push    bp
   1755	0710  8B EC			     mov     bp,sp
   1756	0712  56			     push    si
   1757					;
   1758					;    {
   1759					;      int i;
   1760					;
   1761					;      i = command_var_search(nome);
   1762					;
   1763	0713  FF 76 06			     push    word ptr [bp+6]
   1764	0716  FF 76 04			     push    word ptr [bp+4]
   1765	0719  E8 FF70			     call    near ptr command_var_search
   1766	071C  59			     pop     cx
   1767	071D  59			     pop     cx
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 32
command.ASM



   1768	071E  8B F0			     mov     si,ax
   1769					;
   1770					;      if (i==-1)
   1771					;
   1772	0720  83 FE FF			     cmp     si,-1
   1773	0723  75 06			     jne     short @9@114
   1774					;
   1775					;	  return NULL;
   1776					;
   1777	0725  33 D2			     xor     dx,dx
   1778	0727  33 C0			     xor     ax,ax
   1779	0729			     @9@86:
   1780	0729  EB 0E			     jmp     short @9@142
   1781	072B			     @9@114:
   1782					;
   1783					;      return var[i].value;
   1784					;
   1785	072B  8B C6			     mov     ax,si
   1786	072D  BA 0032			     mov     dx,50
   1787	0730  F7 EA			     imul    dx
   1788	0732  05 0023r			     add     ax,offset DGROUP:var+13
   1789	0735  8C DA			     mov     dx,ds
   1790	0737  EB F0			     jmp     short @9@86
   1791	0739			     @9@142:
   1792					;
   1793					;    }
   1794					;
   1795	0739  5E			     pop     si
   1796	073A  5D			     pop     bp
   1797	073B  C3			     ret
   1798	073C			     command_var_value	     endp
   1799					;
   1800					;    static int	command_var_set(char far *nome,char far	*valor)
   1801					;
   1802					     assume  cs:_TEXT
   1803	073C			     command_var_set proc    near
   1804	073C  55			     push    bp
   1805	073D  8B EC			     mov     bp,sp
   1806	073F  56			     push    si
   1807					;
   1808					;    {
   1809					;      int i;
   1810					;
   1811					;      if (strlen(nome)>VAR_NOME_TAM)
   1812					;
   1813	0740  FF 76 06			     push    word ptr [bp+6]
   1814	0743  FF 76 04			     push    word ptr [bp+4]
   1815	0746  E8 0000e			     call    near ptr _strlen
   1816	0749  59			     pop     cx
   1817	074A  59			     pop     cx
   1818	074B  3D 000C			     cmp     ax,12
   1819	074E  76 05			     jbe     short @10@114
   1820					;
   1821					;	  return -3;
   1822					;
   1823	0750  B8 FFFD			     mov     ax,-3
   1824	0753			     @10@86:
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 33
command.ASM



   1825	0753  EB 6A			     jmp     short @10@310
   1826	0755			     @10@114:
   1827					;
   1828					;      if (strlen(valor)>VAR_VALOR_TAM)
   1829					;
   1830	0755  FF 76 0A			     push    word ptr [bp+10]
   1831	0758  FF 76 08			     push    word ptr [bp+8]
   1832	075B  E8 0000e			     call    near ptr _strlen
   1833	075E  59			     pop     cx
   1834	075F  59			     pop     cx
   1835	0760  3D 0024			     cmp     ax,36
   1836	0763  76 05			     jbe     short @10@170
   1837					;
   1838					;	  return -4;
   1839					;
   1840	0765  B8 FFFC			     mov     ax,-4
   1841	0768  EB E9			     jmp     short @10@86
   1842	076A			     @10@170:
   1843					;
   1844					;      i = command_var_search(nome);
   1845					;
   1846	076A  FF 76 06			     push    word ptr [bp+6]
   1847	076D  FF 76 04			     push    word ptr [bp+4]
   1848	0770  E8 FF19			     call    near ptr command_var_search
   1849	0773  59			     pop     cx
   1850	0774  59			     pop     cx
   1851	0775  8B F0			     mov     si,ax
   1852					;
   1853					;      if (i==-1)  {
   1854					;
   1855	0777  83 FE FF			     cmp     si,-1
   1856	077A  75 27			     jne     short @10@282
   1857					;
   1858					;	  i = command_var_nextfree();
   1859					;
   1860	077C  E8 FE6D			     call    near ptr command_var_nextfree
   1861	077F  8B F0			     mov     si,ax
   1862					;
   1863					;	  if (i==-1)
   1864					;
   1865	0781  83 FE FF			     cmp     si,-1
   1866	0784  75 05			     jne     short @10@254
   1867					;
   1868					;	     return -2;
   1869					;
   1870	0786  B8 FFFE			     mov     ax,-2
   1871	0789  EB C8			     jmp     short @10@86
   1872	078B			     @10@254:
   1873					;
   1874					;	  strcpy(var[i].name,nome);
   1875					;
   1876	078B  FF 76 06			     push    word ptr [bp+6]
   1877	078E  FF 76 04			     push    word ptr [bp+4]
   1878	0791  1E			     push    ds
   1879	0792  8B C6			     mov     ax,si
   1880	0794  BA 0032			     mov     dx,50
   1881	0797  F7 EA			     imul    dx
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 34
command.ASM



   1882	0799  05 0016r			     add     ax,offset DGROUP:var
   1883	079C  50			     push    ax
   1884	079D  E8 0000e			     call    near ptr _strcpy
   1885	07A0  83 C4 08			     add     sp,8
   1886	07A3			     @10@282:
   1887					;
   1888					;      }
   1889					;      strcpy(var[i].value,valor);
   1890					;
   1891	07A3  FF 76 0A			     push    word ptr [bp+10]
   1892	07A6  FF 76 08			     push    word ptr [bp+8]
   1893	07A9  1E			     push    ds
   1894	07AA  8B C6			     mov     ax,si
   1895	07AC  BA 0032			     mov     dx,50
   1896	07AF  F7 EA			     imul    dx
   1897	07B1  05 0023r			     add     ax,offset DGROUP:var+13
   1898	07B4  50			     push    ax
   1899	07B5  E8 0000e			     call    near ptr _strcpy
   1900	07B8  83 C4 08			     add     sp,8
   1901					;
   1902					;      return 0;
   1903					;
   1904	07BB  33 C0			     xor     ax,ax
   1905	07BD  EB 94			     jmp     short @10@86
   1906	07BF			     @10@310:
   1907					;
   1908					;    }
   1909					;
   1910	07BF  5E			     pop     si
   1911	07C0  5D			     pop     bp
   1912	07C1  C3			     ret
   1913	07C2			     command_var_set endp
   1914					;
   1915					;    int cmd_reboot(int	argc, char far *argv[])
   1916					;
   1917					     assume  cs:_TEXT
   1918	07C2			     _cmd_reboot     proc    near
   1919	07C2  55			     push    bp
   1920	07C3  8B EC			     mov     bp,sp
   1921	07C5  56			     push    si
   1922	07C6  57			     push    di
   1923	07C7  8B 76 04			     mov     si,word ptr [bp+4]
   1924	07CA  8B 7E 06			     mov     di,word ptr [bp+6]
   1925					;
   1926					;    {
   1927					;      argc=argc;
   1928					;
   1929					;
   1930					;      argv=argv;
   1931					;
   1932					;
   1933					;      reboot();
   1934					;
   1935	07CD  E8 0000e			     call    near ptr _reboot
   1936					;
   1937					;      return 0;
   1938					;
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 35
command.ASM



   1939	07D0  33 C0			     xor     ax,ax
   1940	07D2  EB 00			     jmp     short @11@58
   1941	07D4			     @11@58:
   1942					;
   1943					;    }
   1944					;
   1945	07D4  5F			     pop     di
   1946	07D5  5E			     pop     si
   1947	07D6  5D			     pop     bp
   1948	07D7  C3			     ret
   1949	07D8			     _cmd_reboot     endp
   1950					;
   1951					;    int cmd_exit(int argc, char far *argv[])
   1952					;
   1953					     assume  cs:_TEXT
   1954	07D8			     _cmd_exit	     proc    near
   1955	07D8  55			     push    bp
   1956	07D9  8B EC			     mov     bp,sp
   1957	07DB  8B 56 04			     mov     dx,word ptr [bp+4]
   1958	07DE  8B 5E 06			     mov     bx,word ptr [bp+6]
   1959					;
   1960					;    {
   1961					;      argc=argc;
   1962					;
   1963					;
   1964					;      argv=argv;
   1965					;
   1966					;
   1967					;      end_command = 1;
   1968					;
   1969	07E1  C7 06 0625r 0001		     mov     word ptr DGROUP:end_command,1
   1970					;
   1971					;      return 0;
   1972					;
   1973	07E7  33 C0			     xor     ax,ax
   1974	07E9  EB 00			     jmp     short @12@58
   1975	07EB			     @12@58:
   1976					;
   1977					;    }
   1978					;
   1979	07EB  5D			     pop     bp
   1980	07EC  C3			     ret
   1981	07ED			     _cmd_exit	     endp
   1982					;
   1983					;    int cmd_help(int argc, char far *argv[])
   1984					;
   1985					     assume  cs:_TEXT
   1986	07ED			     _cmd_help	     proc    near
   1987	07ED  55			     push    bp
   1988	07EE  8B EC			     mov     bp,sp
   1989	07F0  56			     push    si
   1990	07F1  57			     push    di
   1991	07F2  8B 7E 04			     mov     di,word ptr [bp+4]
   1992					;
   1993					;    {
   1994					;      int i;
   1995					;
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 36
command.ASM



   1996					;      argc=argc;
   1997					;
   1998					;
   1999					;      argv=argv;
   2000					;
   2001	07F5  8B 46 06			     mov     ax,word ptr [bp+6]
   2002	07F8  89 46 06			     mov     word ptr [bp+6],ax
   2003					;
   2004					;      putstr("Comandos	do minisSistema	Operacional:\n");
   2005					;
   2006	07FB  1E			     push    ds
   2007	07FC  B8 0658r			     mov     ax,offset DGROUP:s@+1468
   2008	07FF  50			     push    ax
   2009	0800  E8 0000e			     call    near ptr _putstr
   2010	0803  59			     pop     cx
   2011	0804  59			     pop     cx
   2012					;
   2013					;      for (i=0;i<MAXCOMMANDS;++i)  {
   2014					;
   2015	0805  33 F6			     xor     si,si
   2016	0807  EB 2F			     jmp     short @13@114
   2017	0809			     @13@58:
   2018					;
   2019					;	   putstr(commands[i].name);
   2020					;
   2021	0809  1E			     push    ds
   2022	080A  8B C6			     mov     ax,si
   2023	080C  BA 0006			     mov     dx,6
   2024	080F  F7 EA			     imul    dx
   2025	0811  8B D8			     mov     bx,ax
   2026	0813  FF B7 0002r		     push    word ptr DGROUP:commands[bx]
   2027	0817  E8 0000e			     call    near ptr _putstr
   2028	081A  59			     pop     cx
   2029	081B  59			     pop     cx
   2030					;
   2031					;	   putstr(commands[i].help);
   2032					;
   2033	081C  1E			     push    ds
   2034	081D  8B C6			     mov     ax,si
   2035	081F  BA 0006			     mov     dx,6
   2036	0822  F7 EA			     imul    dx
   2037	0824  8B D8			     mov     bx,ax
   2038	0826  FF B7 0004r		     push    word ptr DGROUP:commands[bx+2]
   2039	082A  E8 0000e			     call    near ptr _putstr
   2040	082D  59			     pop     cx
   2041	082E  59			     pop     cx
   2042					;
   2043					;	   putch('\n');
   2044					;
   2045	082F  B8 000A			     mov     ax,10
   2046	0832  50			     push    ax
   2047	0833  E8 0000e			     call    near ptr _putch
   2048	0836  59			     pop     cx
   2049	0837  46			     inc     si
   2050	0838			     @13@114:
   2051	0838  83 FE 19			     cmp     si,25
   2052	083B  7C CC			     jl	     short @13@58
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 37
command.ASM



   2053					;
   2054					;      }
   2055					;      return 0;
   2056					;
   2057	083D  33 C0			     xor     ax,ax
   2058	083F  EB 00			     jmp     short @13@170
   2059	0841			     @13@170:
   2060					;
   2061					;    }
   2062					;
   2063	0841  5F			     pop     di
   2064	0842  5E			     pop     si
   2065	0843  5D			     pop     bp
   2066	0844  C3			     ret
   2067	0845			     _cmd_help	     endp
   2068					;
   2069					;    int cmd_date(int argc, char far *argv[])
   2070					;
   2071					     assume  cs:_TEXT
   2072	0845			     _cmd_date	     proc    near
   2073	0845  55			     push    bp
   2074	0846  8B EC			     mov     bp,sp
   2075	0848  83 EC 18			     sub     sp,24
   2076	084B  56			     push    si
   2077	084C  57			     push    di
   2078	084D  8B 76 04			     mov     si,word ptr [bp+4]
   2079	0850  8B 7E 06			     mov     di,word ptr [bp+6]
   2080					;
   2081					;    {
   2082					;      struct date d;
   2083					;      char str[20];
   2084					;
   2085					;      argc=argc;
   2086					;
   2087					;
   2088					;      argv=argv;
   2089					;
   2090					;
   2091					;
   2092					;
   2093					;
   2094					;      getdate(&d);
   2095					;
   2096	0853  16			     push    ss
   2097	0854  8D 46 FC			     lea     ax,word ptr [bp-4]
   2098	0857  50			     push    ax
   2099	0858  E8 0000e			     call    near ptr _getdate
   2100	085B  59			     pop     cx
   2101	085C  59			     pop     cx
   2102					;
   2103					;      unsignedtostr(str,d.da_day,2,'0');
   2104					;
   2105	085D  B0 30			     mov     al,48
   2106	085F  50			     push    ax
   2107	0860  B8 0002			     mov     ax,2
   2108	0863  50			     push    ax
   2109	0864  8A 46 FE			     mov     al,byte ptr [bp-2]
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 38
command.ASM



   2110	0867  98			     cbw
   2111	0868  50			     push    ax
   2112	0869  16			     push    ss
   2113	086A  8D 46 E8			     lea     ax,word ptr [bp-24]
   2114	086D  50			     push    ax
   2115	086E  E8 0000e			     call    near ptr _unsignedtostr
   2116	0871  83 C4 0A			     add     sp,10
   2117					;
   2118					;      putstr(str);
   2119					;
   2120	0874  16			     push    ss
   2121	0875  8D 46 E8			     lea     ax,word ptr [bp-24]
   2122	0878  50			     push    ax
   2123	0879  E8 0000e			     call    near ptr _putstr
   2124	087C  59			     pop     cx
   2125	087D  59			     pop     cx
   2126					;
   2127					;      putch('/');
   2128					;
   2129	087E  B8 002F			     mov     ax,47
   2130	0881  50			     push    ax
   2131	0882  E8 0000e			     call    near ptr _putch
   2132	0885  59			     pop     cx
   2133					;
   2134					;      unsignedtostr(str,d.da_mon,2,'0');
   2135					;
   2136	0886  B0 30			     mov     al,48
   2137	0888  50			     push    ax
   2138	0889  B8 0002			     mov     ax,2
   2139	088C  50			     push    ax
   2140	088D  8A 46 FF			     mov     al,byte ptr [bp-1]
   2141	0890  98			     cbw
   2142	0891  50			     push    ax
   2143	0892  16			     push    ss
   2144	0893  8D 46 E8			     lea     ax,word ptr [bp-24]
   2145	0896  50			     push    ax
   2146	0897  E8 0000e			     call    near ptr _unsignedtostr
   2147	089A  83 C4 0A			     add     sp,10
   2148					;
   2149					;      putstr(str);
   2150					;
   2151	089D  16			     push    ss
   2152	089E  8D 46 E8			     lea     ax,word ptr [bp-24]
   2153	08A1  50			     push    ax
   2154	08A2  E8 0000e			     call    near ptr _putstr
   2155	08A5  59			     pop     cx
   2156	08A6  59			     pop     cx
   2157					;
   2158					;      putch('/');
   2159					;
   2160	08A7  B8 002F			     mov     ax,47
   2161	08AA  50			     push    ax
   2162	08AB  E8 0000e			     call    near ptr _putch
   2163	08AE  59			     pop     cx
   2164					;
   2165					;      unsignedtostr(str,d.da_year,4,'0');
   2166					;
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 39
command.ASM



   2167	08AF  B0 30			     mov     al,48
   2168	08B1  50			     push    ax
   2169	08B2  B8 0004			     mov     ax,4
   2170	08B5  50			     push    ax
   2171	08B6  FF 76 FC			     push    word ptr [bp-4]
   2172	08B9  16			     push    ss
   2173	08BA  8D 46 E8			     lea     ax,word ptr [bp-24]
   2174	08BD  50			     push    ax
   2175	08BE  E8 0000e			     call    near ptr _unsignedtostr
   2176	08C1  83 C4 0A			     add     sp,10
   2177					;
   2178					;      putstr(str);
   2179					;
   2180	08C4  16			     push    ss
   2181	08C5  8D 46 E8			     lea     ax,word ptr [bp-24]
   2182	08C8  50			     push    ax
   2183	08C9  E8 0000e			     call    near ptr _putstr
   2184	08CC  59			     pop     cx
   2185	08CD  59			     pop     cx
   2186					;
   2187					;      putch('\n');
   2188					;
   2189	08CE  B8 000A			     mov     ax,10
   2190	08D1  50			     push    ax
   2191	08D2  E8 0000e			     call    near ptr _putch
   2192	08D5  59			     pop     cx
   2193					;
   2194					;      return 0;
   2195					;
   2196	08D6  33 C0			     xor     ax,ax
   2197	08D8  EB 00			     jmp     short @14@58
   2198	08DA			     @14@58:
   2199					;
   2200					;    }
   2201					;
   2202	08DA  5F			     pop     di
   2203	08DB  5E			     pop     si
   2204	08DC  8B E5			     mov     sp,bp
   2205	08DE  5D			     pop     bp
   2206	08DF  C3			     ret
   2207	08E0			     _cmd_date	     endp
   2208					;
   2209					;    int cmd_time(int argc, char far *argv[])
   2210					;
   2211					     assume  cs:_TEXT
   2212	08E0			     _cmd_time	     proc    near
   2213	08E0  55			     push    bp
   2214	08E1  8B EC			     mov     bp,sp
   2215	08E3  83 EC 18			     sub     sp,24
   2216	08E6  56			     push    si
   2217	08E7  57			     push    di
   2218	08E8  8B 76 04			     mov     si,word ptr [bp+4]
   2219	08EB  8B 7E 06			     mov     di,word ptr [bp+6]
   2220					;
   2221					;    {
   2222					;      struct time t;
   2223					;      char str[20];
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 40
command.ASM



   2224					;
   2225					;      argc=argc;
   2226					;
   2227					;
   2228					;      argv=argv;
   2229					;
   2230					;
   2231					;      gettime(&t);
   2232					;
   2233	08EE  16			     push    ss
   2234	08EF  8D 46 FC			     lea     ax,word ptr [bp-4]
   2235	08F2  50			     push    ax
   2236	08F3  E8 0000e			     call    near ptr _gettime
   2237	08F6  59			     pop     cx
   2238	08F7  59			     pop     cx
   2239					;
   2240					;      unsignedtostr(str,t.ti_hour,2,'0');
   2241					;
   2242	08F8  B0 30			     mov     al,48
   2243	08FA  50			     push    ax
   2244	08FB  B8 0002			     mov     ax,2
   2245	08FE  50			     push    ax
   2246	08FF  8A 46 FD			     mov     al,byte ptr [bp-3]
   2247	0902  B4 00			     mov     ah,0
   2248	0904  50			     push    ax
   2249	0905  16			     push    ss
   2250	0906  8D 46 E8			     lea     ax,word ptr [bp-24]
   2251	0909  50			     push    ax
   2252	090A  E8 0000e			     call    near ptr _unsignedtostr
   2253	090D  83 C4 0A			     add     sp,10
   2254					;
   2255					;      putstr(str);
   2256					;
   2257	0910  16			     push    ss
   2258	0911  8D 46 E8			     lea     ax,word ptr [bp-24]
   2259	0914  50			     push    ax
   2260	0915  E8 0000e			     call    near ptr _putstr
   2261	0918  59			     pop     cx
   2262	0919  59			     pop     cx
   2263					;
   2264					;      putch(':');
   2265					;
   2266	091A  B8 003A			     mov     ax,58
   2267	091D  50			     push    ax
   2268	091E  E8 0000e			     call    near ptr _putch
   2269	0921  59			     pop     cx
   2270					;
   2271					;
   2272					;
   2273					;      unsignedtostr(str,t.ti_min,2,'0');
   2274					;
   2275	0922  B0 30			     mov     al,48
   2276	0924  50			     push    ax
   2277	0925  B8 0002			     mov     ax,2
   2278	0928  50			     push    ax
   2279	0929  8A 46 FC			     mov     al,byte ptr [bp-4]
   2280	092C  B4 00			     mov     ah,0
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 41
command.ASM



   2281	092E  50			     push    ax
   2282	092F  16			     push    ss
   2283	0930  8D 46 E8			     lea     ax,word ptr [bp-24]
   2284	0933  50			     push    ax
   2285	0934  E8 0000e			     call    near ptr _unsignedtostr
   2286	0937  83 C4 0A			     add     sp,10
   2287					;
   2288					;      putstr(str);
   2289					;
   2290	093A  16			     push    ss
   2291	093B  8D 46 E8			     lea     ax,word ptr [bp-24]
   2292	093E  50			     push    ax
   2293	093F  E8 0000e			     call    near ptr _putstr
   2294	0942  59			     pop     cx
   2295	0943  59			     pop     cx
   2296					;
   2297					;      putch(':');
   2298					;
   2299	0944  B8 003A			     mov     ax,58
   2300	0947  50			     push    ax
   2301	0948  E8 0000e			     call    near ptr _putch
   2302	094B  59			     pop     cx
   2303					;
   2304					;      unsignedtostr(str,t.ti_sec,2,'0');
   2305					;
   2306	094C  B0 30			     mov     al,48
   2307	094E  50			     push    ax
   2308	094F  B8 0002			     mov     ax,2
   2309	0952  50			     push    ax
   2310	0953  8A 46 FF			     mov     al,byte ptr [bp-1]
   2311	0956  B4 00			     mov     ah,0
   2312	0958  50			     push    ax
   2313	0959  16			     push    ss
   2314	095A  8D 46 E8			     lea     ax,word ptr [bp-24]
   2315	095D  50			     push    ax
   2316	095E  E8 0000e			     call    near ptr _unsignedtostr
   2317	0961  83 C4 0A			     add     sp,10
   2318					;
   2319					;      putstr(str);
   2320					;
   2321	0964  16			     push    ss
   2322	0965  8D 46 E8			     lea     ax,word ptr [bp-24]
   2323	0968  50			     push    ax
   2324	0969  E8 0000e			     call    near ptr _putstr
   2325	096C  59			     pop     cx
   2326	096D  59			     pop     cx
   2327					;
   2328					;      putch('\n');
   2329					;
   2330	096E  B8 000A			     mov     ax,10
   2331	0971  50			     push    ax
   2332	0972  E8 0000e			     call    near ptr _putch
   2333	0975  59			     pop     cx
   2334					;
   2335					;      return 0;
   2336					;
   2337	0976  33 C0			     xor     ax,ax
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 42
command.ASM



   2338	0978  EB 00			     jmp     short @15@58
   2339	097A			     @15@58:
   2340					;
   2341					;    }
   2342					;
   2343	097A  5F			     pop     di
   2344	097B  5E			     pop     si
   2345	097C  8B E5			     mov     sp,bp
   2346	097E  5D			     pop     bp
   2347	097F  C3			     ret
   2348	0980			     _cmd_time	     endp
   2349					;
   2350					;    int cmd_cls(int argc, char	far *argv[])
   2351					;
   2352					     assume  cs:_TEXT
   2353	0980			     _cmd_cls	     proc    near
   2354	0980  55			     push    bp
   2355	0981  8B EC			     mov     bp,sp
   2356	0983  56			     push    si
   2357	0984  57			     push    di
   2358	0985  8B 76 04			     mov     si,word ptr [bp+4]
   2359	0988  8B 7E 06			     mov     di,word ptr [bp+6]
   2360					;
   2361					;    {
   2362					;      argc=argc;
   2363					;
   2364					;
   2365					;      argv=argv;
   2366					;
   2367					;
   2368					;      clrscr();
   2369					;
   2370	098B  E8 0000e			     call    near ptr _clrscr
   2371					;
   2372					;      return 0;
   2373					;
   2374	098E  33 C0			     xor     ax,ax
   2375	0990  EB 00			     jmp     short @16@58
   2376	0992			     @16@58:
   2377					;
   2378					;    }
   2379					;
   2380	0992  5F			     pop     di
   2381	0993  5E			     pop     si
   2382	0994  5D			     pop     bp
   2383	0995  C3			     ret
   2384	0996			     _cmd_cls	     endp
   2385					;
   2386					;    int cmd_ver(int argc, char	far *argv[])
   2387					;
   2388					     assume  cs:_TEXT
   2389	0996			     _cmd_ver	     proc    near
   2390	0996  55			     push    bp
   2391	0997  8B EC			     mov     bp,sp
   2392	0999  56			     push    si
   2393	099A  57			     push    di
   2394	099B  8B 76 04			     mov     si,word ptr [bp+4]
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 43
command.ASM



   2395	099E  8B 7E 06			     mov     di,word ptr [bp+6]
   2396					;
   2397					;    {
   2398					;      argc=argc;
   2399					;
   2400					;
   2401					;      argv=argv;
   2402					;
   2403					;
   2404					;      putstr("minisSistema Operacional	- Vs ");
   2405					;
   2406	09A1  1E			     push    ds
   2407	09A2  B8 067Fr			     mov     ax,offset DGROUP:s@+1507
   2408	09A5  50			     push    ax
   2409	09A6  E8 0000e			     call    near ptr _putstr
   2410	09A9  59			     pop     cx
   2411	09AA  59			     pop     cx
   2412					;
   2413					;      putstr(miniSO_VERSION);
   2414					;
   2415	09AB  1E			     push    ds
   2416	09AC  B8 069Er			     mov     ax,offset DGROUP:s@+1538
   2417	09AF  50			     push    ax
   2418	09B0  E8 0000e			     call    near ptr _putstr
   2419	09B3  59			     pop     cx
   2420	09B4  59			     pop     cx
   2421					;
   2422					;      putch('\n');
   2423					;
   2424	09B5  B8 000A			     mov     ax,10
   2425	09B8  50			     push    ax
   2426	09B9  E8 0000e			     call    near ptr _putch
   2427	09BC  59			     pop     cx
   2428					;
   2429					;      return 0;
   2430					;
   2431	09BD  33 C0			     xor     ax,ax
   2432	09BF  EB 00			     jmp     short @17@58
   2433	09C1			     @17@58:
   2434					;
   2435					;    }
   2436					;
   2437	09C1  5F			     pop     di
   2438	09C2  5E			     pop     si
   2439	09C3  5D			     pop     bp
   2440	09C4  C3			     ret
   2441	09C5			     _cmd_ver	     endp
   2442	09C5			     _TEXT   ends
   2443	0000			     _BSS    segment word public 'BSS'
   2444	0000  14*(??)			     db	     20	dup (?)
   2445	0014			     _BSS    ends
   2446	09C5			     _TEXT   segment byte public 'CODE'
   2447					;
   2448					;    int cmd_ps(int argc, char far *argv[])
   2449					;
   2450					     assume  cs:_TEXT
   2451	09C5			     _cmd_ps proc    near
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 44
command.ASM



   2452	09C5  55			     push    bp
   2453	09C6  8B EC			     mov     bp,sp
   2454	09C8  56			     push    si
   2455	09C9  57			     push    di
   2456					;
   2457					;    {
   2458					;      int i,l;
   2459					;      static char str[20];
   2460					;      extern miniSO_PCB miniSO_thread[];
   2461					;
   2462					;      argc=argc;
   2463					;
   2464	09CA  8B 46 04			     mov     ax,word ptr [bp+4]
   2465	09CD  89 46 04			     mov     word ptr [bp+4],ax
   2466					;
   2467					;      argv=argv;
   2468					;
   2469	09D0  8B 46 06			     mov     ax,word ptr [bp+6]
   2470	09D3  89 46 06			     mov     word ptr [bp+6],ax
   2471					;
   2472					;      putstr("	BCP   PID   PPID  STATUS   ZLIST  PREV	 NEXT\n");
   2473					;
   2474	09D6  1E			     push    ds
   2475	09D7  B8 06A3r			     mov     ax,offset DGROUP:s@+1543
   2476	09DA  50			     push    ax
   2477	09DB  E8 0000e			     call    near ptr _putstr
   2478	09DE  59			     pop     cx
   2479	09DF  59			     pop     cx
   2480					;
   2481					;      for (i=0;i<miniSO_MAXTHREADS;++i)  {
   2482					;
   2483	09E0  33 FF			     xor     di,di
   2484	09E2  E9 021C			     jmp     @18@1010
   2485	09E5			     @18@58:
   2486					;
   2487					;	   if (miniSO_thread[i].status!=FREE)  {
   2488					;
   2489	09E5  8B C7			     mov     ax,di
   2490	09E7  BA 001A			     mov     dx,26
   2491	09EA  F7 EA			     imul    dx
   2492	09EC  8B D8			     mov     bx,ax
   2493	09EE  83 BF 0004e FF		     cmp     word ptr DGROUP:_miniSO_thread[bx+4],-1
   2494	09F3  75 03			     jne     @@4
   2495	09F5  E9 0208			     jmp     @18@982
   2496	09F8			     @@4:
   2497					;
   2498					;	      inttostr(str,i);
   2499					;
   2500	09F8  57			     push    di
   2501	09F9  1E			     push    ds
   2502	09FA  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2503	09FD  50			     push    ax
   2504	09FE  E8 0000e			     call    near ptr _inttostr
   2505	0A01  83 C4 06			     add     sp,6
   2506					;
   2507					;	      l=strlen(str);
   2508					;
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 45
command.ASM



   2509	0A04  1E			     push    ds
   2510	0A05  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2511	0A08  50			     push    ax
   2512	0A09  E8 0000e			     call    near ptr _strlen
   2513	0A0C  59			     pop     cx
   2514	0A0D  59			     pop     cx
   2515	0A0E  8B F0			     mov     si,ax
   2516	0A10  EB 08			     jmp     short @18@142
   2517	0A12			     @18@114:
   2518					;
   2519					;	      while (l++<3)
   2520					;		    putch(' ');
   2521					;
   2522	0A12  B8 0020			     mov     ax,32
   2523	0A15  50			     push    ax
   2524	0A16  E8 0000e			     call    near ptr _putch
   2525	0A19  59			     pop     cx
   2526	0A1A			     @18@142:
   2527	0A1A  8B C6			     mov     ax,si
   2528	0A1C  46			     inc     si
   2529	0A1D  3D 0003			     cmp     ax,3
   2530	0A20  7C F0			     jl	     short @18@114
   2531					;
   2532					;	      putstr(str);
   2533					;
   2534	0A22  1E			     push    ds
   2535	0A23  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2536	0A26  50			     push    ax
   2537	0A27  E8 0000e			     call    near ptr _putstr
   2538	0A2A  59			     pop     cx
   2539	0A2B  59			     pop     cx
   2540					;
   2541					;	      putstr("	");
   2542					;
   2543	0A2C  1E			     push    ds
   2544	0A2D  B8 06D3r			     mov     ax,offset DGROUP:s@+1591
   2545	0A30  50			     push    ax
   2546	0A31  E8 0000e			     call    near ptr _putstr
   2547	0A34  59			     pop     cx
   2548	0A35  59			     pop     cx
   2549					;
   2550					;	      inttostr(str,miniSO_thread[i].pid);
   2551					;
   2552	0A36  8B C7			     mov     ax,di
   2553	0A38  BA 001A			     mov     dx,26
   2554	0A3B  F7 EA			     imul    dx
   2555	0A3D  8B D8			     mov     bx,ax
   2556	0A3F  FF B7 0000e		     push    word ptr DGROUP:_miniSO_thread[bx]
   2557	0A43  1E			     push    ds
   2558	0A44  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2559	0A47  50			     push    ax
   2560	0A48  E8 0000e			     call    near ptr _inttostr
   2561	0A4B  83 C4 06			     add     sp,6
   2562					;
   2563					;	      l=strlen(str);
   2564					;
   2565	0A4E  1E			     push    ds
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 46
command.ASM



   2566	0A4F  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2567	0A52  50			     push    ax
   2568	0A53  E8 0000e			     call    near ptr _strlen
   2569	0A56  59			     pop     cx
   2570	0A57  59			     pop     cx
   2571	0A58  8B F0			     mov     si,ax
   2572	0A5A  EB 08			     jmp     short @18@226
   2573	0A5C			     @18@198:
   2574					;
   2575					;	      while (l++<5)
   2576					;		    putch(' ');
   2577					;
   2578	0A5C  B8 0020			     mov     ax,32
   2579	0A5F  50			     push    ax
   2580	0A60  E8 0000e			     call    near ptr _putch
   2581	0A63  59			     pop     cx
   2582	0A64			     @18@226:
   2583	0A64  8B C6			     mov     ax,si
   2584	0A66  46			     inc     si
   2585	0A67  3D 0005			     cmp     ax,5
   2586	0A6A  7C F0			     jl	     short @18@198
   2587					;
   2588					;	      putstr(str);
   2589					;
   2590	0A6C  1E			     push    ds
   2591	0A6D  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2592	0A70  50			     push    ax
   2593	0A71  E8 0000e			     call    near ptr _putstr
   2594	0A74  59			     pop     cx
   2595	0A75  59			     pop     cx
   2596					;
   2597					;	      putstr("	");
   2598					;
   2599	0A76  1E			     push    ds
   2600	0A77  B8 06D6r			     mov     ax,offset DGROUP:s@+1594
   2601	0A7A  50			     push    ax
   2602	0A7B  E8 0000e			     call    near ptr _putstr
   2603	0A7E  59			     pop     cx
   2604	0A7F  59			     pop     cx
   2605					;
   2606					;	      inttostr(str,miniSO_thread[i].ppid);
   2607					;
   2608	0A80  8B C7			     mov     ax,di
   2609	0A82  BA 001A			     mov     dx,26
   2610	0A85  F7 EA			     imul    dx
   2611	0A87  8B D8			     mov     bx,ax
   2612	0A89  FF B7 0002e		     push    word ptr DGROUP:_miniSO_thread[bx+2]
   2613	0A8D  1E			     push    ds
   2614	0A8E  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2615	0A91  50			     push    ax
   2616	0A92  E8 0000e			     call    near ptr _inttostr
   2617	0A95  83 C4 06			     add     sp,6
   2618					;
   2619					;	      l=strlen(str);
   2620					;
   2621	0A98  1E			     push    ds
   2622	0A99  B8 0000r			     mov     ax,offset DGROUP:b@w+0
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 47
command.ASM



   2623	0A9C  50			     push    ax
   2624	0A9D  E8 0000e			     call    near ptr _strlen
   2625	0AA0  59			     pop     cx
   2626	0AA1  59			     pop     cx
   2627	0AA2  8B F0			     mov     si,ax
   2628	0AA4  EB 08			     jmp     short @18@310
   2629	0AA6			     @18@282:
   2630					;
   2631					;	      while (l++<5)
   2632					;		    putch(' ');
   2633					;
   2634	0AA6  B8 0020			     mov     ax,32
   2635	0AA9  50			     push    ax
   2636	0AAA  E8 0000e			     call    near ptr _putch
   2637	0AAD  59			     pop     cx
   2638	0AAE			     @18@310:
   2639	0AAE  8B C6			     mov     ax,si
   2640	0AB0  46			     inc     si
   2641	0AB1  3D 0005			     cmp     ax,5
   2642	0AB4  7C F0			     jl	     short @18@282
   2643					;
   2644					;	      putstr(str);
   2645					;
   2646	0AB6  1E			     push    ds
   2647	0AB7  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2648	0ABA  50			     push    ax
   2649	0ABB  E8 0000e			     call    near ptr _putstr
   2650	0ABE  59			     pop     cx
   2651	0ABF  59			     pop     cx
   2652					;
   2653					;	      putstr("	");
   2654					;
   2655	0AC0  1E			     push    ds
   2656	0AC1  B8 06D9r			     mov     ax,offset DGROUP:s@+1597
   2657	0AC4  50			     push    ax
   2658	0AC5  E8 0000e			     call    near ptr _putstr
   2659	0AC8  59			     pop     cx
   2660	0AC9  59			     pop     cx
   2661					;
   2662					;	      switch(miniSO_thread[i].status)  {
   2663					;
   2664	0ACA  8B C7			     mov     ax,di
   2665	0ACC  BA 001A			     mov     dx,26
   2666	0ACF  F7 EA			     imul    dx
   2667	0AD1  8B D8			     mov     bx,ax
   2668	0AD3  8B 9F 0004e		     mov     bx,word ptr DGROUP:_miniSO_thread[bx+4]
   2669	0AD7  43			     inc     bx
   2670	0AD8  83 FB 07			     cmp     bx,7
   2671	0ADB  77 3D			     ja	     short @18@702
   2672	0ADD  D1 E3			     shl     bx,1
   2673	0ADF  2E: FF A7	0C11r		     jmp     word ptr cs:@18@C1170[bx]
   2674	0AE4			     @18@450:
   2675					;
   2676					;		    case FREE:	  putstr(strFREE);    break;
   2677					;
   2678	0AE4  1E			     push    ds
   2679	0AE5  B8 06DCr			     mov     ax,offset DGROUP:s@+1600
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 48
command.ASM



   2680	0AE8			     @18@478:
   2681	0AE8  50			     push    ax
   2682	0AE9  E8 0000e			     call    near ptr _putstr
   2683	0AEC  59			     pop     cx
   2684	0AED  59			     pop     cx
   2685	0AEE  EB 2A			     jmp     short @18@702
   2686	0AF0			     @18@506:
   2687					;
   2688					;		    case READY:	  putstr(strREADY);   break;
   2689					;
   2690	0AF0  1E			     push    ds
   2691	0AF1  B8 06E4r			     mov     ax,offset DGROUP:s@+1608
   2692	0AF4  EB F2			     jmp     short @18@478
   2693	0AF6			     @18@534:
   2694					;
   2695					;		    case RUNNING: putstr(strRUNNING); break;
   2696					;
   2697	0AF6  1E			     push    ds
   2698	0AF7  B8 06ECr			     mov     ax,offset DGROUP:s@+1616
   2699	0AFA  EB EC			     jmp     short @18@478
   2700	0AFC			     @18@562:
   2701					;
   2702					;		    case ZOMBIE:  putstr(strZOMBIE);  break;
   2703					;
   2704	0AFC  1E			     push    ds
   2705	0AFD  B8 06F4r			     mov     ax,offset DGROUP:s@+1624
   2706	0B00  EB E6			     jmp     short @18@478
   2707	0B02			     @18@590:
   2708					;
   2709					;		    case WAIT:	  putstr(strWAIT);    break;
   2710					;
   2711	0B02  1E			     push    ds
   2712	0B03  B8 06FCr			     mov     ax,offset DGROUP:s@+1632
   2713	0B06  EB E0			     jmp     short @18@478
   2714	0B08			     @18@618:
   2715					;
   2716					;		    case WAITSIG: putstr(strWAITSIG); break;
   2717					;
   2718	0B08  1E			     push    ds
   2719	0B09  B8 0704r			     mov     ax,offset DGROUP:s@+1640
   2720	0B0C  EB DA			     jmp     short @18@478
   2721	0B0E			     @18@646:
   2722					;
   2723					;		    case WAITSEM: putstr(strWAITSEM); break;
   2724					;
   2725	0B0E  1E			     push    ds
   2726	0B0F  B8 070Cr			     mov     ax,offset DGROUP:s@+1648
   2727	0B12  EB D4			     jmp     short @18@478
   2728	0B14			     @18@674:
   2729					;
   2730					;		    case STOPPED: putstr(strSTOPPED); break;
   2731					;
   2732	0B14  1E			     push    ds
   2733	0B15  B8 0714r			     mov     ax,offset DGROUP:s@+1656
   2734	0B18  EB CE			     jmp     short @18@478
   2735	0B1A			     @18@702:
   2736					;
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 49
command.ASM



   2737					;	      }
   2738					;	      putstr("	");
   2739					;
   2740	0B1A  1E			     push    ds
   2741	0B1B  B8 071Cr			     mov     ax,offset DGROUP:s@+1664
   2742	0B1E  50			     push    ax
   2743	0B1F  E8 0000e			     call    near ptr _putstr
   2744	0B22  59			     pop     cx
   2745	0B23  59			     pop     cx
   2746					;
   2747					;	      inttostr(str,miniSO_thread[i].zombies);
   2748					;
   2749	0B24  8B C7			     mov     ax,di
   2750	0B26  BA 001A			     mov     dx,26
   2751	0B29  F7 EA			     imul    dx
   2752	0B2B  8B D8			     mov     bx,ax
   2753	0B2D  FF B7 0014e		     push    word ptr DGROUP:_miniSO_thread[bx+20]
   2754	0B31  1E			     push    ds
   2755	0B32  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2756	0B35  50			     push    ax
   2757	0B36  E8 0000e			     call    near ptr _inttostr
   2758	0B39  83 C4 06			     add     sp,6
   2759					;
   2760					;	      l=strlen(str);
   2761					;
   2762	0B3C  1E			     push    ds
   2763	0B3D  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2764	0B40  50			     push    ax
   2765	0B41  E8 0000e			     call    near ptr _strlen
   2766	0B44  59			     pop     cx
   2767	0B45  59			     pop     cx
   2768	0B46  8B F0			     mov     si,ax
   2769	0B48  EB 08			     jmp     short @18@758
   2770	0B4A			     @18@730:
   2771					;
   2772					;	      while (l++<5)
   2773					;		    putch(' ');
   2774					;
   2775	0B4A  B8 0020			     mov     ax,32
   2776	0B4D  50			     push    ax
   2777	0B4E  E8 0000e			     call    near ptr _putch
   2778	0B51  59			     pop     cx
   2779	0B52			     @18@758:
   2780	0B52  8B C6			     mov     ax,si
   2781	0B54  46			     inc     si
   2782	0B55  3D 0005			     cmp     ax,5
   2783	0B58  7C F0			     jl	     short @18@730
   2784					;
   2785					;	      putstr(str);
   2786					;
   2787	0B5A  1E			     push    ds
   2788	0B5B  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2789	0B5E  50			     push    ax
   2790	0B5F  E8 0000e			     call    near ptr _putstr
   2791	0B62  59			     pop     cx
   2792	0B63  59			     pop     cx
   2793					;
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 50
command.ASM



   2794					;
   2795					;	      putstr(" ");
   2796					;
   2797	0B64  1E			     push    ds
   2798	0B65  B8 071Fr			     mov     ax,offset DGROUP:s@+1667
   2799	0B68  50			     push    ax
   2800	0B69  E8 0000e			     call    near ptr _putstr
   2801	0B6C  59			     pop     cx
   2802	0B6D  59			     pop     cx
   2803					;
   2804					;	      inttostr(str,miniSO_thread[i].prev);
   2805					;
   2806	0B6E  8B C7			     mov     ax,di
   2807	0B70  BA 001A			     mov     dx,26
   2808	0B73  F7 EA			     imul    dx
   2809	0B75  8B D8			     mov     bx,ax
   2810	0B77  FF B7 0016e		     push    word ptr DGROUP:_miniSO_thread[bx+22]
   2811	0B7B  1E			     push    ds
   2812	0B7C  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2813	0B7F  50			     push    ax
   2814	0B80  E8 0000e			     call    near ptr _inttostr
   2815	0B83  83 C4 06			     add     sp,6
   2816					;
   2817					;	      l=strlen(str);
   2818					;
   2819	0B86  1E			     push    ds
   2820	0B87  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2821	0B8A  50			     push    ax
   2822	0B8B  E8 0000e			     call    near ptr _strlen
   2823	0B8E  59			     pop     cx
   2824	0B8F  59			     pop     cx
   2825	0B90  8B F0			     mov     si,ax
   2826	0B92  EB 08			     jmp     short @18@842
   2827	0B94			     @18@814:
   2828					;
   2829					;	      while (l++<5)
   2830					;		    putch(' ');
   2831					;
   2832	0B94  B8 0020			     mov     ax,32
   2833	0B97  50			     push    ax
   2834	0B98  E8 0000e			     call    near ptr _putch
   2835	0B9B  59			     pop     cx
   2836	0B9C			     @18@842:
   2837	0B9C  8B C6			     mov     ax,si
   2838	0B9E  46			     inc     si
   2839	0B9F  3D 0005			     cmp     ax,5
   2840	0BA2  7C F0			     jl	     short @18@814
   2841					;
   2842					;	      putstr(str);
   2843					;
   2844	0BA4  1E			     push    ds
   2845	0BA5  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2846	0BA8  50			     push    ax
   2847	0BA9  E8 0000e			     call    near ptr _putstr
   2848	0BAC  59			     pop     cx
   2849	0BAD  59			     pop     cx
   2850					;
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 51
command.ASM



   2851					;
   2852					;	      putstr("	");
   2853					;
   2854	0BAE  1E			     push    ds
   2855	0BAF  B8 0721r			     mov     ax,offset DGROUP:s@+1669
   2856	0BB2  50			     push    ax
   2857	0BB3  E8 0000e			     call    near ptr _putstr
   2858	0BB6  59			     pop     cx
   2859	0BB7  59			     pop     cx
   2860					;
   2861					;	      inttostr(str,miniSO_thread[i].next);
   2862					;
   2863	0BB8  8B C7			     mov     ax,di
   2864	0BBA  BA 001A			     mov     dx,26
   2865	0BBD  F7 EA			     imul    dx
   2866	0BBF  8B D8			     mov     bx,ax
   2867	0BC1  FF B7 0018e		     push    word ptr DGROUP:_miniSO_thread[bx+24]
   2868	0BC5  1E			     push    ds
   2869	0BC6  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2870	0BC9  50			     push    ax
   2871	0BCA  E8 0000e			     call    near ptr _inttostr
   2872	0BCD  83 C4 06			     add     sp,6
   2873					;
   2874					;	      l=strlen(str);
   2875					;
   2876	0BD0  1E			     push    ds
   2877	0BD1  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2878	0BD4  50			     push    ax
   2879	0BD5  E8 0000e			     call    near ptr _strlen
   2880	0BD8  59			     pop     cx
   2881	0BD9  59			     pop     cx
   2882	0BDA  8B F0			     mov     si,ax
   2883	0BDC  EB 08			     jmp     short @18@926
   2884	0BDE			     @18@898:
   2885					;
   2886					;	      while (l++<5)
   2887					;		    putch(' ');
   2888					;
   2889	0BDE  B8 0020			     mov     ax,32
   2890	0BE1  50			     push    ax
   2891	0BE2  E8 0000e			     call    near ptr _putch
   2892	0BE5  59			     pop     cx
   2893	0BE6			     @18@926:
   2894	0BE6  8B C6			     mov     ax,si
   2895	0BE8  46			     inc     si
   2896	0BE9  3D 0005			     cmp     ax,5
   2897	0BEC  7C F0			     jl	     short @18@898
   2898					;
   2899					;	      putstr(str);
   2900					;
   2901	0BEE  1E			     push    ds
   2902	0BEF  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2903	0BF2  50			     push    ax
   2904	0BF3  E8 0000e			     call    near ptr _putstr
   2905	0BF6  59			     pop     cx
   2906	0BF7  59			     pop     cx
   2907					;
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 52
command.ASM



   2908					;	      putch('\n');
   2909					;
   2910	0BF8  B8 000A			     mov     ax,10
   2911	0BFB  50			     push    ax
   2912	0BFC  E8 0000e			     call    near ptr _putch
   2913	0BFF  59			     pop     cx
   2914	0C00			     @18@982:
   2915	0C00  47			     inc     di
   2916	0C01			     @18@1010:
   2917	0C01  83 FF 10			     cmp     di,16
   2918	0C04  7D 03			     jge     @@5
   2919	0C06  E9 FDDC			     jmp     @18@58
   2920	0C09			     @@5:
   2921					;
   2922					;	   }
   2923					;      }
   2924					;      return 0;
   2925					;
   2926	0C09  33 C0			     xor     ax,ax
   2927	0C0B  EB 00			     jmp     short @18@1066
   2928	0C0D			     @18@1066:
   2929					;
   2930					;    }
   2931					;
   2932	0C0D  5F			     pop     di
   2933	0C0E  5E			     pop     si
   2934	0C0F  5D			     pop     bp
   2935	0C10  C3			     ret
   2936	0C11			     _cmd_ps endp
   2937	0C11			     @18@C1170	     label   word
   2938	0C11  0AE4r			     dw	     @18@450
   2939	0C13  0AF0r			     dw	     @18@506
   2940	0C15  0AF6r			     dw	     @18@534
   2941	0C17  0AFCr			     dw	     @18@562
   2942	0C19  0B02r			     dw	     @18@590
   2943	0C1B  0B08r			     dw	     @18@618
   2944	0C1D  0B0Er			     dw	     @18@646
   2945	0C1F  0B14r			     dw	     @18@674
   2946					;
   2947					;    int cmd_kill(int argc, char far *argv[])
   2948					;
   2949					     assume  cs:_TEXT
   2950	0C21			     _cmd_kill	     proc    near
   2951	0C21  55			     push    bp
   2952	0C22  8B EC			     mov     bp,sp
   2953	0C24  56			     push    si
   2954	0C25  57			     push    di
   2955					;
   2956					;    {
   2957					;      int t=0;
   2958					;
   2959	0C26  33 F6			     xor     si,si
   2960					;
   2961					;      pid_t pid=0;
   2962					;
   2963	0C28  33 FF			     xor     di,di
   2964					;
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 53
command.ASM



   2965					;      char str[10];
   2966					;
   2967					;      if (argc<=1)  {
   2968					;
   2969	0C2A  83 7E 04 01		     cmp     word ptr [bp+4],1
   2970	0C2E  7F 0F			     jg	     short @19@142
   2971					;
   2972					;	  putstr("Erro em kill:	parametro nao fornecido!\n");
   2973					;
   2974	0C30  1E			     push    ds
   2975	0C31  B8 0724r			     mov     ax,offset DGROUP:s@+1672
   2976	0C34			     @19@86:
   2977	0C34  50			     push    ax
   2978	0C35  E8 0000e			     call    near ptr _putstr
   2979	0C38  59			     pop     cx
   2980	0C39  59			     pop     cx
   2981					;
   2982					;	  return 1;
   2983					;
   2984	0C3A  B8 0001			     mov     ax,1
   2985	0C3D			     @19@114:
   2986	0C3D  EB 26			     jmp     short @19@226
   2987	0C3F			     @19@142:
   2988					;
   2989					;      }
   2990					;      pid = atoi(argv[1]);
   2991					;
   2992	0C3F  8B 5E 06			     mov     bx,word ptr [bp+6]
   2993	0C42  FF 77 06			     push    word ptr [bx+6]
   2994	0C45  FF 77 04			     push    word ptr [bx+4]
   2995	0C48  E8 0000e			     call    near ptr _atoi
   2996	0C4B  59			     pop     cx
   2997	0C4C  59			     pop     cx
   2998	0C4D  8B F8			     mov     di,ax
   2999					;
   3000					;      t = kill(pid);
   3001					;
   3002	0C4F  57			     push    di
   3003	0C50  E8 0000e			     call    near ptr _kill
   3004	0C53  59			     pop     cx
   3005	0C54  8B F0			     mov     si,ax
   3006					;
   3007					;      if (t==miniSO_ERROR)  {
   3008					;
   3009	0C56  83 FE FF			     cmp     si,-1
   3010	0C59  75 06			     jne     short @19@198
   3011					;
   3012					;	  putstr("kill:	impossivel matar o processo/thread\n");
   3013					;
   3014	0C5B  1E			     push    ds
   3015	0C5C  B8 074Cr			     mov     ax,offset DGROUP:s@+1712
   3016	0C5F  EB D3			     jmp     short @19@86
   3017	0C61			     @19@198:
   3018					;
   3019					;	  return 1;
   3020					;      }
   3021					;      return 0;
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 54
command.ASM



   3022					;
   3023	0C61  33 C0			     xor     ax,ax
   3024	0C63  EB D8			     jmp     short @19@114
   3025	0C65			     @19@226:
   3026					;
   3027					;    }
   3028					;
   3029	0C65  5F			     pop     di
   3030	0C66  5E			     pop     si
   3031	0C67  5D			     pop     bp
   3032	0C68  C3			     ret
   3033	0C69			     _cmd_kill	     endp
   3034					;
   3035					;    int cmd_set(int argc, char	far *argv[])
   3036					;
   3037					     assume  cs:_TEXT
   3038	0C69			     _cmd_set	     proc    near
   3039	0C69  55			     push    bp
   3040	0C6A  8B EC			     mov     bp,sp
   3041	0C6C  83 EC 02			     sub     sp,2
   3042	0C6F  56			     push    si
   3043	0C70  57			     push    di
   3044	0C71  8B 76 04			     mov     si,word ptr [bp+4]
   3045	0C74  8B 7E 06			     mov     di,word ptr [bp+6]
   3046					;
   3047					;    {
   3048					;      int res;
   3049					;
   3050					;      if (argc	== 1)  {
   3051					;
   3052	0C77  83 FE 01			     cmp     si,1
   3053	0C7A  75 07			     jne     short @20@142
   3054					;
   3055					;	  command_var_list();
   3056					;
   3057	0C7C  E8 F99E			     call    near ptr command_var_list
   3058					;
   3059					;	  return 0;
   3060					;
   3061	0C7F			     @20@86:
   3062	0C7F  33 C0			     xor     ax,ax
   3063	0C81			     @20@114:
   3064	0C81  EB 71			     jmp     short @20@534
   3065	0C83			     @20@142:
   3066					;
   3067					;      }
   3068					;      if (argc	== 2)
   3069					;
   3070	0C83  83 FE 02			     cmp     si,2
   3071	0C86  75 16			     jne     short @20@198
   3072					;
   3073					;	  res =	command_var_set(argv[1],"");
   3074					;
   3075	0C88  1E			     push    ds
   3076	0C89  B8 0776r			     mov     ax,offset DGROUP:s@+1754
   3077	0C8C  50			     push    ax
   3078	0C8D  FF 75 06			     push    word ptr [di+6]
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 55
command.ASM



   3079	0C90  FF 75 04			     push    word ptr [di+4]
   3080	0C93  E8 FAA6			     call    near ptr command_var_set
   3081	0C96  83 C4 08			     add     sp,8
   3082	0C99  89 46 FE			     mov     word ptr [bp-2],ax
   3083	0C9C  EB 21			     jmp     short @20@282
   3084	0C9E			     @20@198:
   3085					;
   3086					;      else if (argc ==	3)
   3087					;
   3088	0C9E  83 FE 03			     cmp     si,3
   3089	0CA1  75 17			     jne     short @20@254
   3090					;
   3091					;	    res	= command_var_set(argv[1],argv[2]);
   3092					;
   3093	0CA3  FF 75 0A			     push    word ptr [di+10]
   3094	0CA6  FF 75 08			     push    word ptr [di+8]
   3095	0CA9  FF 75 06			     push    word ptr [di+6]
   3096	0CAC  FF 75 04			     push    word ptr [di+4]
   3097	0CAF  E8 FA8A			     call    near ptr command_var_set
   3098	0CB2  83 C4 08			     add     sp,8
   3099	0CB5  89 46 FE			     mov     word ptr [bp-2],ax
   3100	0CB8  EB 05			     jmp     short @20@282
   3101	0CBA			     @20@254:
   3102					;
   3103					;      else
   3104					;	  res =	-5;
   3105					;
   3106	0CBA  C7 46 FE FFFB		     mov     word ptr [bp-2],-5
   3107	0CBF			     @20@282:
   3108					;
   3109					;      switch (res)  {
   3110					;
   3111	0CBF  8B 5E FE			     mov     bx,word ptr [bp-2]
   3112	0CC2  83 EB FB			     sub     bx,-5
   3113	0CC5  83 FB 03			     cmp     bx,3
   3114	0CC8  77 28			     ja	     short @20@506
   3115	0CCA  D1 E3			     shl     bx,1
   3116	0CCC  2E: FF A7	0CFAr		     jmp     word ptr cs:@20@C482[bx]
   3117	0CD1			     @20@366:
   3118					;
   3119					;	      case -2:
   3120					;		   putstr("Erro	em set:	nao ha espaco para novas variaveis!\n");
   3121					;
   3122	0CD1  1E			     push    ds
   3123	0CD2  B8 0777r			     mov     ax,offset DGROUP:s@+1755
   3124	0CD5  EB 10			     jmp     short @20@478
   3125	0CD7			     @20@394:
   3126					;
   3127					;		   return 1;
   3128					;	      case -3:
   3129					;		   putstr("Erro	em set:	o tamanho do nome da variavel e	muito grande!\n");
   3130					;
   3131	0CD7  1E			     push    ds
   3132	0CD8  B8 07A9r			     mov     ax,offset DGROUP:s@+1805
   3133	0CDB  EB 0A			     jmp     short @20@478
   3134	0CDD			     @20@422:
   3135					;
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 56
command.ASM



   3136					;		   return 1;
   3137					;	      case -4:
   3138					;		   putstr("Erro	em set:	o tamanho do conteudo da variavel e muito	    +
   3139				     grande!\n");
   3140					;
   3141	0CDD  1E			     push    ds
   3142	0CDE  B8 07E5r			     mov     ax,offset DGROUP:s@+1865
   3143	0CE1  EB 04			     jmp     short @20@478
   3144	0CE3			     @20@450:
   3145					;
   3146					;		   return 1;
   3147					;	      case -5:
   3148					;		   putstr("Erro	em set:	argumentos demais na linha de comando!\n");
   3149					;
   3150	0CE3  1E			     push    ds
   3151	0CE4  B8 0825r			     mov     ax,offset DGROUP:s@+1929
   3152	0CE7			     @20@478:
   3153	0CE7  50			     push    ax
   3154	0CE8  E8 0000e			     call    near ptr _putstr
   3155	0CEB  59			     pop     cx
   3156	0CEC  59			     pop     cx
   3157					;
   3158					;		   return 1;
   3159					;
   3160	0CED  B8 0001			     mov     ax,1
   3161	0CF0  EB 8F			     jmp     short @20@114
   3162	0CF2			     @20@506:
   3163	0CF2  EB 8B			     jmp     short @20@86
   3164	0CF4			     @20@534:
   3165					;
   3166					;      }
   3167					;      return 0;
   3168					;    }
   3169					;
   3170	0CF4  5F			     pop     di
   3171	0CF5  5E			     pop     si
   3172	0CF6  8B E5			     mov     sp,bp
   3173	0CF8  5D			     pop     bp
   3174	0CF9  C3			     ret
   3175	0CFA			     _cmd_set	     endp
   3176	0CFA			     @20@C482	     label   word
   3177	0CFA  0CE3r			     dw	     @20@450
   3178	0CFC  0CDDr			     dw	     @20@422
   3179	0CFE  0CD7r			     dw	     @20@394
   3180	0D00  0CD1r			     dw	     @20@366
   3181					;
   3182					;    int cmd_unset(int argc, char far *argv[])
   3183					;
   3184					     assume  cs:_TEXT
   3185	0D02			     _cmd_unset	     proc    near
   3186	0D02  55			     push    bp
   3187	0D03  8B EC			     mov     bp,sp
   3188	0D05  83 EC 02			     sub     sp,2
   3189					;
   3190					;    {
   3191					;      int res;
   3192					;
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 57
command.ASM



   3193					;      if (argc	!= 2)  {
   3194					;
   3195	0D08  83 7E 04 02		     cmp     word ptr [bp+4],2
   3196	0D0C  74 0F			     je	     short @21@142
   3197					;
   3198					;	  putstr("Erro em unset: numero	invalido de argumentos!\n");
   3199					;
   3200	0D0E  1E			     push    ds
   3201	0D0F  B8 085Ar			     mov     ax,offset DGROUP:s@+1982
   3202	0D12			     @21@86:
   3203	0D12  50			     push    ax
   3204	0D13  E8 0000e			     call    near ptr _putstr
   3205	0D16  59			     pop     cx
   3206	0D17  59			     pop     cx
   3207					;
   3208					;	  return 1;
   3209					;
   3210	0D18  B8 0001			     mov     ax,1
   3211	0D1B			     @21@114:
   3212	0D1B  EB 21			     jmp     short @21@226
   3213	0D1D			     @21@142:
   3214					;
   3215					;      }
   3216					;      res = command_var_unset(argv[1]);
   3217					;
   3218	0D1D  8B 5E 06			     mov     bx,word ptr [bp+6]
   3219	0D20  FF 77 06			     push    word ptr [bx+6]
   3220	0D23  FF 77 04			     push    word ptr [bx+4]
   3221	0D26  E8 F9A4			     call    near ptr command_var_unset
   3222	0D29  59			     pop     cx
   3223	0D2A  59			     pop     cx
   3224	0D2B  89 46 FE			     mov     word ptr [bp-2],ax
   3225					;
   3226					;      if (res == -1)  {
   3227					;
   3228	0D2E  83 7E FE FF		     cmp     word ptr [bp-2],-1
   3229	0D32  75 06			     jne     short @21@198
   3230					;
   3231					;	  putstr("Erro em unset: variavel inexistente!\n");
   3232					;
   3233	0D34  1E			     push    ds
   3234	0D35  B8 0889r			     mov     ax,offset DGROUP:s@+2029
   3235	0D38  EB D8			     jmp     short @21@86
   3236	0D3A			     @21@198:
   3237					;
   3238					;	  return 1;
   3239					;      }
   3240					;      return 0;
   3241					;
   3242	0D3A  33 C0			     xor     ax,ax
   3243	0D3C  EB DD			     jmp     short @21@114
   3244	0D3E			     @21@226:
   3245					;
   3246					;    }
   3247					;
   3248	0D3E  8B E5			     mov     sp,bp
   3249	0D40  5D			     pop     bp
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 58
command.ASM



   3250	0D41  C3			     ret
   3251	0D42			     _cmd_unset	     endp
   3252					;
   3253					;    int cmd_echo(int argc, char far *argv[])
   3254					;
   3255					     assume  cs:_TEXT
   3256	0D42			     _cmd_echo	     proc    near
   3257	0D42  55			     push    bp
   3258	0D43  8B EC			     mov     bp,sp
   3259	0D45  83 EC 02			     sub     sp,2
   3260	0D48  56			     push    si
   3261	0D49  57			     push    di
   3262	0D4A  8B 7E 06			     mov     di,word ptr [bp+6]
   3263					;
   3264					;    {
   3265					;      int i,control_n=1;
   3266					;
   3267	0D4D  C7 46 FE 0001		     mov     word ptr [bp-2],1
   3268					;
   3269					;
   3270					;      if (argc>1)  {
   3271					;
   3272	0D52  83 7E 04 01		     cmp     word ptr [bp+4],1
   3273	0D56  7E 55			     jle     short @22@338
   3274					;
   3275					;	  if (strcmp(argv[1],"-n")==0)
   3276					;
   3277	0D58  1E			     push    ds
   3278	0D59  B8 08AFr			     mov     ax,offset DGROUP:s@+2067
   3279	0D5C  50			     push    ax
   3280	0D5D  FF 75 06			     push    word ptr [di+6]
   3281	0D60  FF 75 04			     push    word ptr [di+4]
   3282	0D63  E8 0000e			     call    near ptr _strcmp
   3283	0D66  83 C4 08			     add     sp,8
   3284	0D69  0B C0			     or	     ax,ax
   3285	0D6B  75 07			     jne     short @22@114
   3286					;
   3287					;	     control_n = 0;
   3288					;
   3289	0D6D  C7 46 FE 0000		     mov     word ptr [bp-2],0
   3290	0D72  EB 0B			     jmp     short @22@142
   3291	0D74			     @22@114:
   3292					;
   3293					;	  else
   3294					;	     putstr(argv[1]);
   3295					;
   3296	0D74  FF 75 06			     push    word ptr [di+6]
   3297	0D77  FF 75 04			     push    word ptr [di+4]
   3298	0D7A  E8 0000e			     call    near ptr _putstr
   3299	0D7D  59			     pop     cx
   3300	0D7E  59			     pop     cx
   3301	0D7F			     @22@142:
   3302					;
   3303					;	  for (i=2;i<argc;++i)	{
   3304					;
   3305	0D7F  BE 0002			     mov     si,2
   3306	0D82  EB 24			     jmp     short @22@310
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 59
command.ASM



   3307	0D84			     @22@170:
   3308					;
   3309					;	      if (i!=2 || control_n)
   3310					;
   3311	0D84  83 FE 02			     cmp     si,2
   3312	0D87  75 06			     jne     short @22@226
   3313	0D89  83 7E FE 00		     cmp     word ptr [bp-2],0
   3314	0D8D  74 08			     je	     short @22@254
   3315	0D8F			     @22@226:
   3316					;
   3317					;		 putch(' ');
   3318					;
   3319	0D8F  B8 0020			     mov     ax,32
   3320	0D92  50			     push    ax
   3321	0D93  E8 0000e			     call    near ptr _putch
   3322	0D96  59			     pop     cx
   3323	0D97			     @22@254:
   3324					;
   3325					;	      putstr(argv[i]);
   3326					;
   3327	0D97  8B DE			     mov     bx,si
   3328	0D99  B1 02			     mov     cl,2
   3329	0D9B  D3 E3			     shl     bx,cl
   3330	0D9D  FF 71 02			     push    word ptr [bx+di+2]
   3331	0DA0  FF 31			     push    word ptr [bx+di]
   3332	0DA2  E8 0000e			     call    near ptr _putstr
   3333	0DA5  59			     pop     cx
   3334	0DA6  59			     pop     cx
   3335	0DA7  46			     inc     si
   3336	0DA8			     @22@310:
   3337	0DA8  3B 76 04			     cmp     si,word ptr [bp+4]
   3338	0DAB  7C D7			     jl	     short @22@170
   3339	0DAD			     @22@338:
   3340					;
   3341					;	  }
   3342					;      }
   3343					;      if (control_n)
   3344					;
   3345	0DAD  83 7E FE 00		     cmp     word ptr [bp-2],0
   3346	0DB1  74 08			     je	     short @22@394
   3347					;
   3348					;	  putch('\n');
   3349					;
   3350	0DB3  B8 000A			     mov     ax,10
   3351	0DB6  50			     push    ax
   3352	0DB7  E8 0000e			     call    near ptr _putch
   3353	0DBA  59			     pop     cx
   3354	0DBB			     @22@394:
   3355					;
   3356					;      return 0;
   3357					;
   3358	0DBB  33 C0			     xor     ax,ax
   3359	0DBD  EB 00			     jmp     short @22@422
   3360	0DBF			     @22@422:
   3361					;
   3362					;    }
   3363					;
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 60
command.ASM



   3364	0DBF  5F			     pop     di
   3365	0DC0  5E			     pop     si
   3366	0DC1  8B E5			     mov     sp,bp
   3367	0DC3  5D			     pop     bp
   3368	0DC4  C3			     ret
   3369	0DC5			     _cmd_echo	     endp
   3370	0DC5			     _TEXT   ends
   3371	0098			     _DATA   segment word public 'DATA'
   3372	0098			     demo_linha	     label   word
   3373	0098  FC			     db	     252
   3374	0099  FF			     db	     255
   3375	009A			     exitcode	     label   word
*Warning* command.ASM(3382) Reserved word used as symbol: EXITCODE
   3376	009A  00			     db	     0
   3377	009B  00			     db	     0
   3378	009C			     _DATA   ends
   3379	0DC5			     _TEXT   segment byte public 'CODE'
   3380					;
   3381					;    void demo()
   3382					;
   3383					     assume  cs:_TEXT
   3384	0DC5			     demo    proc    near
   3385	0DC5  55			     push    bp
   3386	0DC6  8B EC			     mov     bp,sp
   3387	0DC8  83 EC 16			     sub     sp,22
   3388	0DCB  56			     push    si
   3389	0DCC  57			     push    di
   3390					;
   3391					;    {
   3392					;      extern int demo_linha;
   3393					;      extern int exitcode;
   3394					;      unsigned	i;
   3395					;      int ini = demo_linha;
   3396					;
   3397	0DCD  8B 3E 0098r		     mov     di,word ptr DGROUP:demo_linha
   3398					;
   3399					;      char str[20];
   3400					;      int ec =	exitcode;
   3401					;
   3402	0DD1  A1 009Ar			     mov     ax,word ptr DGROUP:exitcode
   3403	0DD4  89 46 FE			     mov     word ptr [bp-2],ax
   3404					;
   3405					;
   3406					;      putstrxy(65,ini+0,"⁄ƒƒ Thread ƒƒƒƒø");
   3407					;
   3408	0DD7  1E			     push    ds
   3409	0DD8  B8 08B2r			     mov     ax,offset DGROUP:s@+2070
   3410	0DDB  50			     push    ax
   3411	0DDC  57			     push    di
   3412	0DDD  B8 0041			     mov     ax,65
   3413	0DE0  50			     push    ax
   3414	0DE1  E8 0000e			     call    near ptr _putstrxy
   3415	0DE4  83 C4 08			     add     sp,8
   3416					;
   3417					;      putstrxy(65,ini+1,"≥ PID	 =	 ≥");
   3418					;
   3419	0DE7  1E			     push    ds
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 61
command.ASM



   3420	0DE8  B8 08C3r			     mov     ax,offset DGROUP:s@+2087
   3421	0DEB  50			     push    ax
   3422	0DEC  8B C7			     mov     ax,di
   3423	0DEE  40			     inc     ax
   3424	0DEF  50			     push    ax
   3425	0DF0  B8 0041			     mov     ax,65
   3426	0DF3  50			     push    ax
   3427	0DF4  E8 0000e			     call    near ptr _putstrxy
   3428	0DF7  83 C4 08			     add     sp,8
   3429					;
   3430					;      putstrxy(65,ini+2,"≥ Execucao:	 ≥");
   3431					;
   3432	0DFA  1E			     push    ds
   3433	0DFB  B8 08D4r			     mov     ax,offset DGROUP:s@+2104
   3434	0DFE  50			     push    ax
   3435	0DFF  8B C7			     mov     ax,di
   3436	0E01  05 0002			     add     ax,2
   3437	0E04  50			     push    ax
   3438	0E05  B8 0041			     mov     ax,65
   3439	0E08  50			     push    ax
   3440	0E09  E8 0000e			     call    near ptr _putstrxy
   3441	0E0C  83 C4 08			     add     sp,8
   3442					;
   3443					;      putstrxy(65,ini+3,"≥		 ≥");
   3444					;
   3445	0E0F  1E			     push    ds
   3446	0E10  B8 08E5r			     mov     ax,offset DGROUP:s@+2121
   3447	0E13  50			     push    ax
   3448	0E14  8B C7			     mov     ax,di
   3449	0E16  05 0003			     add     ax,3
   3450	0E19  50			     push    ax
   3451	0E1A  B8 0041			     mov     ax,65
   3452	0E1D  50			     push    ax
   3453	0E1E  E8 0000e			     call    near ptr _putstrxy
   3454	0E21  83 C4 08			     add     sp,8
   3455					;
   3456					;      putstrxy(65,ini+4,"¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ");
   3457					;
   3458	0E24  1E			     push    ds
   3459	0E25  B8 08F6r			     mov     ax,offset DGROUP:s@+2138
   3460	0E28  50			     push    ax
   3461	0E29  8B C7			     mov     ax,di
   3462	0E2B  05 0004			     add     ax,4
   3463	0E2E  50			     push    ax
   3464	0E2F  B8 0041			     mov     ax,65
   3465	0E32  50			     push    ax
   3466	0E33  E8 0000e			     call    near ptr _putstrxy
   3467	0E36  83 C4 08			     add     sp,8
   3468					;
   3469					;
   3470					;      inttostr(str,getpid());
   3471					;
   3472	0E39  E8 0000e			     call    near ptr _getpid
   3473	0E3C  50			     push    ax
   3474	0E3D  16			     push    ss
   3475	0E3E  8D 46 EA			     lea     ax,word ptr [bp-22]
   3476	0E41  50			     push    ax
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 62
command.ASM



   3477	0E42  E8 0000e			     call    near ptr _inttostr
   3478	0E45  83 C4 06			     add     sp,6
   3479					;
   3480					;      putstrxy(74,ini+1,str);
   3481					;
   3482	0E48  16			     push    ss
   3483	0E49  8D 46 EA			     lea     ax,word ptr [bp-22]
   3484	0E4C  50			     push    ax
   3485	0E4D  8B C7			     mov     ax,di
   3486	0E4F  40			     inc     ax
   3487	0E50  50			     push    ax
   3488	0E51  B8 004A			     mov     ax,74
   3489	0E54  50			     push    ax
   3490	0E55  E8 0000e			     call    near ptr _putstrxy
   3491	0E58  83 C4 08			     add     sp,8
   3492					;
   3493					;
   3494					;      for (i=0;i<60000U;++i)  {
   3495					;
   3496	0E5B  33 F6			     xor     si,si
   3497	0E5D  EB 29			     jmp     short @23@114
   3498	0E5F			     @23@58:
   3499					;
   3500					;	   unsignedtostr(str,i,5,'0');
   3501					;
   3502	0E5F  B0 30			     mov     al,48
   3503	0E61  50			     push    ax
   3504	0E62  B8 0005			     mov     ax,5
   3505	0E65  50			     push    ax
   3506	0E66  56			     push    si
   3507	0E67  16			     push    ss
   3508	0E68  8D 46 EA			     lea     ax,word ptr [bp-22]
   3509	0E6B  50			     push    ax
   3510	0E6C  E8 0000e			     call    near ptr _unsignedtostr
   3511	0E6F  83 C4 0A			     add     sp,10
   3512					;
   3513					;	   putstrxy(70,ini+3,str);
   3514					;
   3515	0E72  16			     push    ss
   3516	0E73  8D 46 EA			     lea     ax,word ptr [bp-22]
   3517	0E76  50			     push    ax
   3518	0E77  8B C7			     mov     ax,di
   3519	0E79  05 0003			     add     ax,3
   3520	0E7C  50			     push    ax
   3521	0E7D  B8 0046			     mov     ax,70
   3522	0E80  50			     push    ax
   3523	0E81  E8 0000e			     call    near ptr _putstrxy
   3524	0E84  83 C4 08			     add     sp,8
   3525	0E87  46			     inc     si
   3526	0E88			     @23@114:
   3527	0E88  81 FE EA60		     cmp     si,-5536
   3528	0E8C  72 D1			     jb	     short @23@58
   3529					;
   3530					;      }
   3531					;      for (i=0;i<60000U;++i)  {
   3532					;
   3533	0E8E  33 F6			     xor     si,si
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 63
command.ASM



   3534	0E90  EB 29			     jmp     short @23@226
   3535	0E92			     @23@170:
   3536					;
   3537					;	   unsignedtostr(str,i,5,'0');
   3538					;
   3539	0E92  B0 30			     mov     al,48
   3540	0E94  50			     push    ax
   3541	0E95  B8 0005			     mov     ax,5
   3542	0E98  50			     push    ax
   3543	0E99  56			     push    si
   3544	0E9A  16			     push    ss
   3545	0E9B  8D 46 EA			     lea     ax,word ptr [bp-22]
   3546	0E9E  50			     push    ax
   3547	0E9F  E8 0000e			     call    near ptr _unsignedtostr
   3548	0EA2  83 C4 0A			     add     sp,10
   3549					;
   3550					;	   putstrxy(70,ini+3,str);
   3551					;
   3552	0EA5  16			     push    ss
   3553	0EA6  8D 46 EA			     lea     ax,word ptr [bp-22]
   3554	0EA9  50			     push    ax
   3555	0EAA  8B C7			     mov     ax,di
   3556	0EAC  05 0003			     add     ax,3
   3557	0EAF  50			     push    ax
   3558	0EB0  B8 0046			     mov     ax,70
   3559	0EB3  50			     push    ax
   3560	0EB4  E8 0000e			     call    near ptr _putstrxy
   3561	0EB7  83 C4 08			     add     sp,8
   3562	0EBA  46			     inc     si
   3563	0EBB			     @23@226:
   3564	0EBB  81 FE EA60		     cmp     si,-5536
   3565	0EBF  72 D1			     jb	     short @23@170
   3566					;
   3567					;      }
   3568					;      for (i=0;i<60000U;++i)  {
   3569					;
   3570	0EC1  33 F6			     xor     si,si
   3571	0EC3  EB 29			     jmp     short @23@338
   3572	0EC5			     @23@282:
   3573					;
   3574					;	   unsignedtostr(str,i,5,'0');
   3575					;
   3576	0EC5  B0 30			     mov     al,48
   3577	0EC7  50			     push    ax
   3578	0EC8  B8 0005			     mov     ax,5
   3579	0ECB  50			     push    ax
   3580	0ECC  56			     push    si
   3581	0ECD  16			     push    ss
   3582	0ECE  8D 46 EA			     lea     ax,word ptr [bp-22]
   3583	0ED1  50			     push    ax
   3584	0ED2  E8 0000e			     call    near ptr _unsignedtostr
   3585	0ED5  83 C4 0A			     add     sp,10
   3586					;
   3587					;	   putstrxy(70,ini+3,str);
   3588					;
   3589	0ED8  16			     push    ss
   3590	0ED9  8D 46 EA			     lea     ax,word ptr [bp-22]
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 64
command.ASM



   3591	0EDC  50			     push    ax
   3592	0EDD  8B C7			     mov     ax,di
   3593	0EDF  05 0003			     add     ax,3
   3594	0EE2  50			     push    ax
   3595	0EE3  B8 0046			     mov     ax,70
   3596	0EE6  50			     push    ax
   3597	0EE7  E8 0000e			     call    near ptr _putstrxy
   3598	0EEA  83 C4 08			     add     sp,8
   3599	0EED  46			     inc     si
   3600	0EEE			     @23@338:
   3601	0EEE  81 FE EA60		     cmp     si,-5536
   3602	0EF2  72 D1			     jb	     short @23@282
   3603					;
   3604					;      }
   3605					;      for (i=0;i<60000U;++i)  {
   3606					;
   3607	0EF4  33 F6			     xor     si,si
   3608	0EF6  EB 29			     jmp     short @23@450
   3609	0EF8			     @23@394:
   3610					;
   3611					;	   unsignedtostr(str,i,5,'0');
   3612					;
   3613	0EF8  B0 30			     mov     al,48
   3614	0EFA  50			     push    ax
   3615	0EFB  B8 0005			     mov     ax,5
   3616	0EFE  50			     push    ax
   3617	0EFF  56			     push    si
   3618	0F00  16			     push    ss
   3619	0F01  8D 46 EA			     lea     ax,word ptr [bp-22]
   3620	0F04  50			     push    ax
   3621	0F05  E8 0000e			     call    near ptr _unsignedtostr
   3622	0F08  83 C4 0A			     add     sp,10
   3623					;
   3624					;	   putstrxy(70,ini+3,str);
   3625					;
   3626	0F0B  16			     push    ss
   3627	0F0C  8D 46 EA			     lea     ax,word ptr [bp-22]
   3628	0F0F  50			     push    ax
   3629	0F10  8B C7			     mov     ax,di
   3630	0F12  05 0003			     add     ax,3
   3631	0F15  50			     push    ax
   3632	0F16  B8 0046			     mov     ax,70
   3633	0F19  50			     push    ax
   3634	0F1A  E8 0000e			     call    near ptr _putstrxy
   3635	0F1D  83 C4 08			     add     sp,8
   3636	0F20  46			     inc     si
   3637	0F21			     @23@450:
   3638	0F21  81 FE EA60		     cmp     si,-5536
   3639	0F25  72 D1			     jb	     short @23@394
   3640					;
   3641					;      }
   3642					;      for (i=0;i<60000U;++i)  {
   3643					;
   3644	0F27  33 F6			     xor     si,si
   3645	0F29  EB 29			     jmp     short @23@562
   3646	0F2B			     @23@506:
   3647					;
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 65
command.ASM



   3648					;	   unsignedtostr(str,i,5,'0');
   3649					;
   3650	0F2B  B0 30			     mov     al,48
   3651	0F2D  50			     push    ax
   3652	0F2E  B8 0005			     mov     ax,5
   3653	0F31  50			     push    ax
   3654	0F32  56			     push    si
   3655	0F33  16			     push    ss
   3656	0F34  8D 46 EA			     lea     ax,word ptr [bp-22]
   3657	0F37  50			     push    ax
   3658	0F38  E8 0000e			     call    near ptr _unsignedtostr
   3659	0F3B  83 C4 0A			     add     sp,10
   3660					;
   3661					;	   putstrxy(70,ini+3,str);
   3662					;
   3663	0F3E  16			     push    ss
   3664	0F3F  8D 46 EA			     lea     ax,word ptr [bp-22]
   3665	0F42  50			     push    ax
   3666	0F43  8B C7			     mov     ax,di
   3667	0F45  05 0003			     add     ax,3
   3668	0F48  50			     push    ax
   3669	0F49  B8 0046			     mov     ax,70
   3670	0F4C  50			     push    ax
   3671	0F4D  E8 0000e			     call    near ptr _putstrxy
   3672	0F50  83 C4 08			     add     sp,8
   3673	0F53  46			     inc     si
   3674	0F54			     @23@562:
   3675	0F54  81 FE EA60		     cmp     si,-5536
   3676	0F58  72 D1			     jb	     short @23@506
   3677					;
   3678					;      }
   3679					;      for (i=0;i<60000U;++i)  {
   3680					;
   3681	0F5A  33 F6			     xor     si,si
   3682	0F5C  EB 29			     jmp     short @23@674
   3683	0F5E			     @23@618:
   3684					;
   3685					;	   unsignedtostr(str,i,5,'0');
   3686					;
   3687	0F5E  B0 30			     mov     al,48
   3688	0F60  50			     push    ax
   3689	0F61  B8 0005			     mov     ax,5
   3690	0F64  50			     push    ax
   3691	0F65  56			     push    si
   3692	0F66  16			     push    ss
   3693	0F67  8D 46 EA			     lea     ax,word ptr [bp-22]
   3694	0F6A  50			     push    ax
   3695	0F6B  E8 0000e			     call    near ptr _unsignedtostr
   3696	0F6E  83 C4 0A			     add     sp,10
   3697					;
   3698					;	   putstrxy(70,ini+3,str);
   3699					;
   3700	0F71  16			     push    ss
   3701	0F72  8D 46 EA			     lea     ax,word ptr [bp-22]
   3702	0F75  50			     push    ax
   3703	0F76  8B C7			     mov     ax,di
   3704	0F78  05 0003			     add     ax,3
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 66
command.ASM



   3705	0F7B  50			     push    ax
   3706	0F7C  B8 0046			     mov     ax,70
   3707	0F7F  50			     push    ax
   3708	0F80  E8 0000e			     call    near ptr _putstrxy
   3709	0F83  83 C4 08			     add     sp,8
   3710	0F86  46			     inc     si
   3711	0F87			     @23@674:
   3712	0F87  81 FE EA60		     cmp     si,-5536
   3713	0F8B  72 D1			     jb	     short @23@618
   3714					;
   3715					;      }
   3716					;      exit(ec);
   3717					;
   3718	0F8D  FF 76 FE			     push    word ptr [bp-2]
   3719	0F90  E8 0000e			     call    near ptr _exit
   3720	0F93  59			     pop     cx
   3721					;
   3722					;    }
   3723					;
   3724	0F94  5F			     pop     di
   3725	0F95  5E			     pop     si
   3726	0F96  8B E5			     mov     sp,bp
   3727	0F98  5D			     pop     bp
   3728	0F99  C3			     ret
   3729	0F9A			     demo    endp
   3730					;
   3731					;    int cmd_demo(int argc, char far *argv[])
   3732					;
   3733					     assume  cs:_TEXT
   3734	0F9A			     _cmd_demo	     proc    near
   3735	0F9A  55			     push    bp
   3736	0F9B  8B EC			     mov     bp,sp
   3737					;
   3738					;    {
   3739					;	     extern int	demo_linha;
   3740					;
   3741					;	     if	     (argc != 2)  {
   3742					;
   3743	0F9D  83 7E 04 02		     cmp     word ptr [bp+4],2
   3744	0FA1  74 0F			     je	     short @24@142
   3745					;
   3746					;		     putstr("Erro em demo: numero invalido de argumentos!\n");
   3747					;
   3748	0FA3  1E			     push    ds
   3749	0FA4  B8 0907r			     mov     ax,offset DGROUP:s@+2155
   3750	0FA7			     @24@86:
   3751	0FA7  50			     push    ax
   3752	0FA8  E8 0000e			     call    near ptr _putstr
   3753	0FAB  59			     pop     cx
   3754	0FAC  59			     pop     cx
   3755					;
   3756					;		     return 1;
   3757					;
   3758	0FAD  B8 0001			     mov     ax,1
   3759	0FB0			     @24@114:
   3760	0FB0  EB 3A			     jmp     short @24@282
   3761	0FB2			     @24@142:
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 67
command.ASM



   3762					;
   3763					;	     }
   3764					;	     demo_linha	+= 5;
   3765					;
   3766	0FB2  83 06 0098r 05		     add     word ptr DGROUP:demo_linha,5
   3767					;
   3768					;	     if	     (demo_linha >21)
   3769					;
   3770	0FB7  83 3E 0098r 15		     cmp     word ptr DGROUP:demo_linha,21
   3771	0FBC  7E 06			     jle     short @24@198
   3772					;
   3773					;		     demo_linha	= 1;
   3774					;
   3775	0FBE  C7 06 0098r 0001		     mov     word ptr DGROUP:demo_linha,1
   3776	0FC4			     @24@198:
   3777					;
   3778					;	     exitcode =	atoi(argv[1]);
   3779					;
   3780	0FC4  8B 5E 06			     mov     bx,word ptr [bp+6]
   3781	0FC7  FF 77 06			     push    word ptr [bx+6]
   3782	0FCA  FF 77 04			     push    word ptr [bx+4]
   3783	0FCD  E8 0000e			     call    near ptr _atoi
   3784	0FD0  59			     pop     cx
   3785	0FD1  59			     pop     cx
   3786	0FD2  A3 009Ar			     mov     word ptr DGROUP:exitcode,ax
   3787					;
   3788					;	     if	     (fork(demo)==miniSO_ERROR)	 {
   3789					;
   3790	0FD5  B8 0DC5r			     mov     ax,offset demo
   3791	0FD8  50			     push    ax
   3792	0FD9  E8 0000e			     call    near ptr _fork
   3793	0FDC  59			     pop     cx
   3794	0FDD  3D FFFF			     cmp     ax,-1
   3795	0FE0  75 06			     jne     short @24@254
   3796					;
   3797					;		     putstr("Erro em demo: fork() nao conseguiu	criar thread!\n");
   3798					;
   3799	0FE2  1E			     push    ds
   3800	0FE3  B8 0935r			     mov     ax,offset DGROUP:s@+2201
   3801	0FE6  EB BF			     jmp     short @24@86
   3802	0FE8			     @24@254:
   3803					;
   3804					;		     return 1;
   3805					;	     }
   3806					;	     return 0;
   3807					;
   3808	0FE8  33 C0			     xor     ax,ax
   3809	0FEA  EB C4			     jmp     short @24@114
   3810	0FEC			     @24@282:
   3811					;
   3812					;    }
   3813					;
   3814	0FEC  5D			     pop     bp
   3815	0FED  C3			     ret
   3816	0FEE			     _cmd_demo	     endp
   3817					;
   3818					;    int cmd_waitpid(int argc, char far	*argv[])
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 68
command.ASM



   3819					;
   3820					     assume  cs:_TEXT
   3821	0FEE			     _cmd_waitpid    proc    near
   3822	0FEE  55			     push    bp
   3823	0FEF  8B EC			     mov     bp,sp
   3824	0FF1  83 EC 16			     sub     sp,22
   3825	0FF4  56			     push    si
   3826					;
   3827					;    {
   3828					;	     int     status;
   3829					;	     pid_t   pid;
   3830					;	     char    str[20];
   3831					;
   3832					;	     if	     (argc != 2)  {
   3833					;
   3834	0FF5  83 7E 04 02		     cmp     word ptr [bp+4],2
   3835	0FF9  74 0F			     je	     short @25@114
   3836					;
   3837					;		     putstr("Erro em waitpid: numero invalido de argumentos!\n");
   3838					;
   3839	0FFB  1E			     push    ds
   3840	0FFC  B8 0967r			     mov     ax,offset DGROUP:s@+2251
   3841	0FFF  50			     push    ax
   3842	1000  E8 0000e			     call    near ptr _putstr
   3843	1003  59			     pop     cx
   3844	1004  59			     pop     cx
   3845					;
   3846					;		     return 1;
   3847					;
   3848	1005  B8 0001			     mov     ax,1
   3849	1008			     @25@86:
   3850	1008  EB 6E			     jmp     short @25@142
   3851	100A			     @25@114:
   3852					;
   3853					;	     }
   3854					;	     pid = atoi(argv[1]);
   3855					;
   3856	100A  8B 5E 06			     mov     bx,word ptr [bp+6]
   3857	100D  FF 77 06			     push    word ptr [bx+6]
   3858	1010  FF 77 04			     push    word ptr [bx+4]
   3859	1013  E8 0000e			     call    near ptr _atoi
   3860	1016  59			     pop     cx
   3861	1017  59			     pop     cx
   3862	1018  8B F0			     mov     si,ax
   3863					;
   3864					;	     pid = waitpid(pid,&status);
   3865					;
   3866	101A  16			     push    ss
   3867	101B  8D 46 FE			     lea     ax,word ptr [bp-2]
   3868	101E  50			     push    ax
   3869	101F  56			     push    si
   3870	1020  E8 0000e			     call    near ptr _waitpid
   3871	1023  83 C4 06			     add     sp,6
   3872	1026  8B F0			     mov     si,ax
   3873					;
   3874					;	     putstr("Processo ");
   3875					;
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 69
command.ASM



   3876	1028  1E			     push    ds
   3877	1029  B8 0998r			     mov     ax,offset DGROUP:s@+2300
   3878	102C  50			     push    ax
   3879	102D  E8 0000e			     call    near ptr _putstr
   3880	1030  59			     pop     cx
   3881	1031  59			     pop     cx
   3882					;
   3883					;	     inttostr(str,pid);
   3884					;
   3885	1032  56			     push    si
   3886	1033  16			     push    ss
   3887	1034  8D 46 EA			     lea     ax,word ptr [bp-22]
   3888	1037  50			     push    ax
   3889	1038  E8 0000e			     call    near ptr _inttostr
   3890	103B  83 C4 06			     add     sp,6
   3891					;
   3892					;	     putstr(str);
   3893					;
   3894	103E  16			     push    ss
   3895	103F  8D 46 EA			     lea     ax,word ptr [bp-22]
   3896	1042  50			     push    ax
   3897	1043  E8 0000e			     call    near ptr _putstr
   3898	1046  59			     pop     cx
   3899	1047  59			     pop     cx
   3900					;
   3901					;	     putstr(" encerrado	com codigo de fim ");
   3902					;
   3903	1048  1E			     push    ds
   3904	1049  B8 09A2r			     mov     ax,offset DGROUP:s@+2310
   3905	104C  50			     push    ax
   3906	104D  E8 0000e			     call    near ptr _putstr
   3907	1050  59			     pop     cx
   3908	1051  59			     pop     cx
   3909					;
   3910					;	     inttostr(str,status);
   3911					;
   3912	1052  FF 76 FE			     push    word ptr [bp-2]
   3913	1055  16			     push    ss
   3914	1056  8D 46 EA			     lea     ax,word ptr [bp-22]
   3915	1059  50			     push    ax
   3916	105A  E8 0000e			     call    near ptr _inttostr
   3917	105D  83 C4 06			     add     sp,6
   3918					;
   3919					;	     putstr(str);
   3920					;
   3921	1060  16			     push    ss
   3922	1061  8D 46 EA			     lea     ax,word ptr [bp-22]
   3923	1064  50			     push    ax
   3924	1065  E8 0000e			     call    near ptr _putstr
   3925	1068  59			     pop     cx
   3926	1069  59			     pop     cx
   3927					;
   3928					;	     putstr("!\n");
   3929					;
   3930	106A  1E			     push    ds
   3931	106B  B8 09C0r			     mov     ax,offset DGROUP:s@+2340
   3932	106E  50			     push    ax
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 70
command.ASM



   3933	106F  E8 0000e			     call    near ptr _putstr
   3934	1072  59			     pop     cx
   3935	1073  59			     pop     cx
   3936					;
   3937					;	     return 0;
   3938					;
   3939	1074  33 C0			     xor     ax,ax
   3940	1076  EB 90			     jmp     short @25@86
   3941	1078			     @25@142:
   3942					;
   3943					;    }
   3944					;
   3945	1078  5E			     pop     si
   3946	1079  8B E5			     mov     sp,bp
   3947	107B  5D			     pop     bp
   3948	107C  C3			     ret
   3949	107D			     _cmd_waitpid    endp
   3950					;
   3951					;    int cmd_wait(int argc, char far *argv[])
   3952					;
   3953					     assume  cs:_TEXT
   3954	107D			     _cmd_wait	     proc    near
   3955	107D  55			     push    bp
   3956	107E  8B EC			     mov     bp,sp
   3957	1080  83 EC 18			     sub     sp,24
   3958	1083  56			     push    si
   3959	1084  57			     push    di
   3960	1085  8B 76 04			     mov     si,word ptr [bp+4]
   3961	1088  8B 7E 06			     mov     di,word ptr [bp+6]
   3962					;
   3963					;    {
   3964					;	     int     status=123;
   3965					;
   3966	108B  C7 46 FE 007B		     mov     word ptr [bp-2],123
   3967					;
   3968					;	     pid_t   pid;
   3969					;	     char    str[20];
   3970					;
   3971					;	     argc=argc;
   3972					;
   3973					;
   3974					;	     argv=argv;
   3975					;
   3976					;
   3977					;	     pid = wait(&status);
   3978					;
   3979	1090  16			     push    ss
   3980	1091  8D 46 FE			     lea     ax,word ptr [bp-2]
   3981	1094  50			     push    ax
   3982	1095  E8 0000e			     call    near ptr _wait
   3983	1098  59			     pop     cx
   3984	1099  59			     pop     cx
   3985	109A  89 46 FC			     mov     word ptr [bp-4],ax
   3986					;
   3987					;	     putstr("Processo ");
   3988					;
   3989	109D  1E			     push    ds
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 71
command.ASM



   3990	109E  B8 09C3r			     mov     ax,offset DGROUP:s@+2343
   3991	10A1  50			     push    ax
   3992	10A2  E8 0000e			     call    near ptr _putstr
   3993	10A5  59			     pop     cx
   3994	10A6  59			     pop     cx
   3995					;
   3996					;	     inttostr(str,pid);
   3997					;
   3998	10A7  FF 76 FC			     push    word ptr [bp-4]
   3999	10AA  16			     push    ss
   4000	10AB  8D 46 E8			     lea     ax,word ptr [bp-24]
   4001	10AE  50			     push    ax
   4002	10AF  E8 0000e			     call    near ptr _inttostr
   4003	10B2  83 C4 06			     add     sp,6
   4004					;
   4005					;	     putstr(str);
   4006					;
   4007	10B5  16			     push    ss
   4008	10B6  8D 46 E8			     lea     ax,word ptr [bp-24]
   4009	10B9  50			     push    ax
   4010	10BA  E8 0000e			     call    near ptr _putstr
   4011	10BD  59			     pop     cx
   4012	10BE  59			     pop     cx
   4013					;
   4014					;	     putstr(" encerrado	com codigo de fim ");
   4015					;
   4016	10BF  1E			     push    ds
   4017	10C0  B8 09CDr			     mov     ax,offset DGROUP:s@+2353
   4018	10C3  50			     push    ax
   4019	10C4  E8 0000e			     call    near ptr _putstr
   4020	10C7  59			     pop     cx
   4021	10C8  59			     pop     cx
   4022					;
   4023					;	     inttostr(str,status);
   4024					;
   4025	10C9  FF 76 FE			     push    word ptr [bp-2]
   4026	10CC  16			     push    ss
   4027	10CD  8D 46 E8			     lea     ax,word ptr [bp-24]
   4028	10D0  50			     push    ax
   4029	10D1  E8 0000e			     call    near ptr _inttostr
   4030	10D4  83 C4 06			     add     sp,6
   4031					;
   4032					;	     putstr(str);
   4033					;
   4034	10D7  16			     push    ss
   4035	10D8  8D 46 E8			     lea     ax,word ptr [bp-24]
   4036	10DB  50			     push    ax
   4037	10DC  E8 0000e			     call    near ptr _putstr
   4038	10DF  59			     pop     cx
   4039	10E0  59			     pop     cx
   4040					;
   4041					;	     putstr("!\n");
   4042					;
   4043	10E1  1E			     push    ds
   4044	10E2  B8 09EBr			     mov     ax,offset DGROUP:s@+2383
   4045	10E5  50			     push    ax
   4046	10E6  E8 0000e			     call    near ptr _putstr
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 72
command.ASM



   4047	10E9  59			     pop     cx
   4048	10EA  59			     pop     cx
   4049					;
   4050					;	     return 0;
   4051					;
   4052	10EB  33 C0			     xor     ax,ax
   4053	10ED  EB 00			     jmp     short @26@58
   4054	10EF			     @26@58:
   4055					;
   4056					;    }
   4057					;
   4058	10EF  5F			     pop     di
   4059	10F0  5E			     pop     si
   4060	10F1  8B E5			     mov     sp,bp
   4061	10F3  5D			     pop     bp
   4062	10F4  C3			     ret
   4063	10F5			     _cmd_wait	     endp
   4064					;
   4065					;    int cmd_semls(int argc, char far *argv[])
   4066					;
   4067					     assume  cs:_TEXT
   4068	10F5			     _cmd_semls	     proc    near
   4069	10F5  55			     push    bp
   4070	10F6  8B EC			     mov     bp,sp
   4071	10F8  83 EC 14			     sub     sp,20
   4072	10FB  56			     push    si
   4073	10FC  57			     push    di
   4074					;
   4075					;    {
   4076					;	     int i,n=0;
   4077					;
   4078	10FD  33 FF			     xor     di,di
   4079					;
   4080					;	     char str[20];
   4081					;	     extern miniSO_SEM miniSO_sem[miniSO_MAXSEMAPHORES];
   4082					;
   4083					;	     argc=argc;
   4084					;
   4085	10FF  8B 46 04			     mov     ax,word ptr [bp+4]
   4086	1102  89 46 04			     mov     word ptr [bp+4],ax
   4087					;
   4088					;	     argv=argv;
   4089					;
   4090	1105  8B 46 06			     mov     ax,word ptr [bp+6]
   4091	1108  89 46 06			     mov     word ptr [bp+6],ax
   4092					;
   4093					;	     putstr("Semaphores:\n");
   4094					;
   4095	110B  1E			     push    ds
   4096	110C  B8 09EEr			     mov     ax,offset DGROUP:s@+2386
   4097	110F  50			     push    ax
   4098	1110  E8 0000e			     call    near ptr _putstr
   4099	1113  59			     pop     cx
   4100	1114  59			     pop     cx
   4101					;
   4102					;	     for     (i=0;i<miniSO_MAXSEMAPHORES;++i)
   4103					;
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 73
command.ASM



   4104	1115  33 F6			     xor     si,si
   4105	1117  E9 0095			     jmp     @27@142
   4106	111A			     @27@58:
   4107					;
   4108					;		     if	     (miniSO_sem[i].status!=FREE) {
   4109					;
   4110	111A  8B DE			     mov     bx,si
   4111	111C  B1 03			     mov     cl,3
   4112	111E  D3 E3			     shl     bx,cl
   4113	1120  83 BF 0000e FF		     cmp     word ptr DGROUP:_miniSO_sem[bx],-1
   4114	1125  75 03			     jne     @@6
   4115	1127  E9 0084			     jmp     @27@114
   4116	112A			     @@6:
   4117					;
   4118					;			     putstr("- id=");
   4119					;
   4120	112A  1E			     push    ds
   4121	112B  B8 09FBr			     mov     ax,offset DGROUP:s@+2399
   4122	112E  50			     push    ax
   4123	112F  E8 0000e			     call    near ptr _putstr
   4124	1132  59			     pop     cx
   4125	1133  59			     pop     cx
   4126					;
   4127					;			     inttostr(str,miniSO_sem[i].semid);
   4128					;
   4129	1134  8B DE			     mov     bx,si
   4130	1136  B1 03			     mov     cl,3
   4131	1138  D3 E3			     shl     bx,cl
   4132	113A  FF B7 0002e		     push    word ptr DGROUP:_miniSO_sem[bx+2]
   4133	113E  16			     push    ss
   4134	113F  8D 46 EC			     lea     ax,word ptr [bp-20]
   4135	1142  50			     push    ax
   4136	1143  E8 0000e			     call    near ptr _inttostr
   4137	1146  83 C4 06			     add     sp,6
   4138					;
   4139					;			     putstr(str);
   4140					;
   4141	1149  16			     push    ss
   4142	114A  8D 46 EC			     lea     ax,word ptr [bp-20]
   4143	114D  50			     push    ax
   4144	114E  E8 0000e			     call    near ptr _putstr
   4145	1151  59			     pop     cx
   4146	1152  59			     pop     cx
   4147					;
   4148					;			     putstr(" value=");
   4149					;
   4150	1153  1E			     push    ds
   4151	1154  B8 0A01r			     mov     ax,offset DGROUP:s@+2405
   4152	1157  50			     push    ax
   4153	1158  E8 0000e			     call    near ptr _putstr
   4154	115B  59			     pop     cx
   4155	115C  59			     pop     cx
   4156					;
   4157					;			     inttostr(str,miniSO_sem[i].value);
   4158					;
   4159	115D  8B DE			     mov     bx,si
   4160	115F  B1 03			     mov     cl,3
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 74
command.ASM



   4161	1161  D3 E3			     shl     bx,cl
   4162	1163  FF B7 0004e		     push    word ptr DGROUP:_miniSO_sem[bx+4]
   4163	1167  16			     push    ss
   4164	1168  8D 46 EC			     lea     ax,word ptr [bp-20]
   4165	116B  50			     push    ax
   4166	116C  E8 0000e			     call    near ptr _inttostr
   4167	116F  83 C4 06			     add     sp,6
   4168					;
   4169					;			     putstr(str);
   4170					;
   4171	1172  16			     push    ss
   4172	1173  8D 46 EC			     lea     ax,word ptr [bp-20]
   4173	1176  50			     push    ax
   4174	1177  E8 0000e			     call    near ptr _putstr
   4175	117A  59			     pop     cx
   4176	117B  59			     pop     cx
   4177					;
   4178					;			     putstr(" queue=");
   4179					;
   4180	117C  1E			     push    ds
   4181	117D  B8 0A09r			     mov     ax,offset DGROUP:s@+2413
   4182	1180  50			     push    ax
   4183	1181  E8 0000e			     call    near ptr _putstr
   4184	1184  59			     pop     cx
   4185	1185  59			     pop     cx
   4186					;
   4187					;			     inttostr(str,miniSO_sem[i].queue);
   4188					;
   4189	1186  8B DE			     mov     bx,si
   4190	1188  B1 03			     mov     cl,3
   4191	118A  D3 E3			     shl     bx,cl
   4192	118C  FF B7 0006e		     push    word ptr DGROUP:_miniSO_sem[bx+6]
   4193	1190  16			     push    ss
   4194	1191  8D 46 EC			     lea     ax,word ptr [bp-20]
   4195	1194  50			     push    ax
   4196	1195  E8 0000e			     call    near ptr _inttostr
   4197	1198  83 C4 06			     add     sp,6
   4198					;
   4199					;			     putstr(str);
   4200					;
   4201	119B  16			     push    ss
   4202	119C  8D 46 EC			     lea     ax,word ptr [bp-20]
   4203	119F  50			     push    ax
   4204	11A0  E8 0000e			     call    near ptr _putstr
   4205	11A3  59			     pop     cx
   4206	11A4  59			     pop     cx
   4207					;
   4208					;			     putch('\n');
   4209					;
   4210	11A5  B8 000A			     mov     ax,10
   4211	11A8  50			     push    ax
   4212	11A9  E8 0000e			     call    near ptr _putch
   4213	11AC  59			     pop     cx
   4214					;
   4215					;			     ++n;
   4216					;
   4217	11AD  47			     inc     di
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 75
command.ASM



   4218	11AE			     @27@114:
   4219	11AE  46			     inc     si
   4220	11AF			     @27@142:
   4221	11AF  83 FE 0A			     cmp     si,10
   4222	11B2  7D 03			     jge     @@7
   4223	11B4  E9 FF63			     jmp     @27@58
   4224	11B7			     @@7:
   4225					;
   4226					;		     }
   4227					;	     putstr("TOTAL=");
   4228					;
   4229	11B7  1E			     push    ds
   4230	11B8  B8 0A11r			     mov     ax,offset DGROUP:s@+2421
   4231	11BB  50			     push    ax
   4232	11BC  E8 0000e			     call    near ptr _putstr
   4233	11BF  59			     pop     cx
   4234	11C0  59			     pop     cx
   4235					;
   4236					;	     inttostr(str,n);
   4237					;
   4238	11C1  57			     push    di
   4239	11C2  16			     push    ss
   4240	11C3  8D 46 EC			     lea     ax,word ptr [bp-20]
   4241	11C6  50			     push    ax
   4242	11C7  E8 0000e			     call    near ptr _inttostr
   4243	11CA  83 C4 06			     add     sp,6
   4244					;
   4245					;	     putstr(str);
   4246					;
   4247	11CD  16			     push    ss
   4248	11CE  8D 46 EC			     lea     ax,word ptr [bp-20]
   4249	11D1  50			     push    ax
   4250	11D2  E8 0000e			     call    near ptr _putstr
   4251	11D5  59			     pop     cx
   4252	11D6  59			     pop     cx
   4253					;
   4254					;	     putstr("\n\n");
   4255					;
   4256	11D7  1E			     push    ds
   4257	11D8  B8 0A18r			     mov     ax,offset DGROUP:s@+2428
   4258	11DB  50			     push    ax
   4259	11DC  E8 0000e			     call    near ptr _putstr
   4260	11DF  59			     pop     cx
   4261	11E0  59			     pop     cx
   4262					;
   4263					;	     return 0;
   4264					;
   4265	11E1  33 C0			     xor     ax,ax
   4266	11E3  EB 00			     jmp     short @27@198
   4267	11E5			     @27@198:
   4268					;
   4269					;    }
   4270					;
   4271	11E5  5F			     pop     di
   4272	11E6  5E			     pop     si
   4273	11E7  8B E5			     mov     sp,bp
   4274	11E9  5D			     pop     bp
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 76
command.ASM



   4275	11EA  C3			     ret
   4276	11EB			     _cmd_semls	     endp
   4277					;
   4278					;    int cmd_semcreate(int argc, char far *argv[])
   4279					;
   4280					     assume  cs:_TEXT
   4281	11EB			     _cmd_semcreate  proc    near
   4282	11EB  55			     push    bp
   4283	11EC  8B EC			     mov     bp,sp
   4284	11EE  83 EC 14			     sub     sp,20
   4285	11F1  56			     push    si
   4286	11F2  57			     push    di
   4287					;
   4288					;    {
   4289					;	     int     res,value;
   4290					;	     semid_t semid;
   4291					;	     char    str[20];
   4292					;
   4293					;	     if	     (argc != 2)     {
   4294					;
   4295	11F3  83 7E 04 02		     cmp     word ptr [bp+4],2
   4296	11F7  74 0F			     je	     short @28@142
   4297					;
   4298					;		     putstr("Erro em semcreate:	numero invalido	de argumentos!\n");
   4299					;
   4300	11F9  1E			     push    ds
   4301	11FA  B8 0A1Br			     mov     ax,offset DGROUP:s@+2431
   4302	11FD  50			     push    ax
   4303	11FE  E8 0000e			     call    near ptr _putstr
   4304	1201  59			     pop     cx
   4305	1202  59			     pop     cx
   4306					;
   4307					;		     return 1;
   4308					;
   4309	1203			     @28@86:
   4310	1203  B8 0001			     mov     ax,1
   4311	1206			     @28@114:
   4312	1206  EB 6C			     jmp     short @28@226
   4313	1208			     @28@142:
   4314					;
   4315					;	     }
   4316					;	     value = atoi(argv[1]);
   4317					;
   4318	1208  8B 5E 06			     mov     bx,word ptr [bp+6]
   4319	120B  FF 77 06			     push    word ptr [bx+6]
   4320	120E  FF 77 04			     push    word ptr [bx+4]
   4321	1211  E8 0000e			     call    near ptr _atoi
   4322	1214  59			     pop     cx
   4323	1215  59			     pop     cx
   4324	1216  8B F0			     mov     si,ax
   4325					;
   4326					;	     semid = semcreate(value);
   4327					;
   4328	1218  56			     push    si
   4329	1219  E8 0000e			     call    near ptr _semcreate
   4330	121C  59			     pop     cx
   4331	121D  8B F8			     mov     di,ax
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 77
command.ASM



   4332					;
   4333					;	     if	     (semid==miniSO_ERROR)
   4334					;
   4335	121F  83 FF FF			     cmp     di,-1
   4336	1222  75 02			     jne     short @28@198
   4337	1224  EB DD			     jmp     short @28@86
   4338	1226			     @28@198:
   4339					;
   4340					;		     return 1;
   4341					;	     putstr("Semaforo id=");
   4342					;
   4343	1226  1E			     push    ds
   4344	1227  B8 0A4Er			     mov     ax,offset DGROUP:s@+2482
   4345	122A  50			     push    ax
   4346	122B  E8 0000e			     call    near ptr _putstr
   4347	122E  59			     pop     cx
   4348	122F  59			     pop     cx
   4349					;
   4350					;	     inttostr(str,semid);
   4351					;
   4352	1230  57			     push    di
   4353	1231  16			     push    ss
   4354	1232  8D 46 EC			     lea     ax,word ptr [bp-20]
   4355	1235  50			     push    ax
   4356	1236  E8 0000e			     call    near ptr _inttostr
   4357	1239  83 C4 06			     add     sp,6
   4358					;
   4359					;	     putstr(str);
   4360					;
   4361	123C  16			     push    ss
   4362	123D  8D 46 EC			     lea     ax,word ptr [bp-20]
   4363	1240  50			     push    ax
   4364	1241  E8 0000e			     call    near ptr _putstr
   4365	1244  59			     pop     cx
   4366	1245  59			     pop     cx
   4367					;
   4368					;	     putstr(" criado (value=");
   4369					;
   4370	1246  1E			     push    ds
   4371	1247  B8 0A5Br			     mov     ax,offset DGROUP:s@+2495
   4372	124A  50			     push    ax
   4373	124B  E8 0000e			     call    near ptr _putstr
   4374	124E  59			     pop     cx
   4375	124F  59			     pop     cx
   4376					;
   4377					;	     inttostr(str,value);
   4378					;
   4379	1250  56			     push    si
   4380	1251  16			     push    ss
   4381	1252  8D 46 EC			     lea     ax,word ptr [bp-20]
   4382	1255  50			     push    ax
   4383	1256  E8 0000e			     call    near ptr _inttostr
   4384	1259  83 C4 06			     add     sp,6
   4385					;
   4386					;	     putstr(str);
   4387					;
   4388	125C  16			     push    ss
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 78
command.ASM



   4389	125D  8D 46 EC			     lea     ax,word ptr [bp-20]
   4390	1260  50			     push    ax
   4391	1261  E8 0000e			     call    near ptr _putstr
   4392	1264  59			     pop     cx
   4393	1265  59			     pop     cx
   4394					;
   4395					;	     putstr(")\n");
   4396					;
   4397	1266  1E			     push    ds
   4398	1267  B8 0A6Br			     mov     ax,offset DGROUP:s@+2511
   4399	126A  50			     push    ax
   4400	126B  E8 0000e			     call    near ptr _putstr
   4401	126E  59			     pop     cx
   4402	126F  59			     pop     cx
   4403					;
   4404					;	     return 0;
   4405					;
   4406	1270  33 C0			     xor     ax,ax
   4407	1272  EB 92			     jmp     short @28@114
   4408	1274			     @28@226:
   4409					;
   4410					;    }
   4411					;
   4412	1274  5F			     pop     di
   4413	1275  5E			     pop     si
   4414	1276  8B E5			     mov     sp,bp
   4415	1278  5D			     pop     bp
   4416	1279  C3			     ret
   4417	127A			     _cmd_semcreate  endp
   4418					;
   4419					;    void sem_aplic()
   4420					;
   4421					     assume  cs:_TEXT
   4422	127A			     _sem_aplic	     proc    near
   4423	127A  55			     push    bp
   4424	127B  8B EC			     mov     bp,sp
   4425	127D  83 EC 14			     sub     sp,20
   4426	1280  56			     push    si
   4427	1281  57			     push    di
   4428					;
   4429					;    {
   4430					;	     extern int	demo_linha;
   4431					;	     extern semid_t semid;
   4432					;	     unsigned i;
   4433					;	     int ini = demo_linha;
   4434					;
   4435	1282  8B 3E 0098r		     mov     di,word ptr DGROUP:demo_linha
   4436					;
   4437					;	     char str[20];
   4438					;
   4439					;	     putstrxy(65,ini+0,"⁄ƒƒ Thread ƒƒƒƒø");
   4440					;
   4441	1286  1E			     push    ds
   4442	1287  B8 0A6Er			     mov     ax,offset DGROUP:s@+2514
   4443	128A  50			     push    ax
   4444	128B  57			     push    di
   4445	128C  B8 0041			     mov     ax,65
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 79
command.ASM



   4446	128F  50			     push    ax
   4447	1290  E8 0000e			     call    near ptr _putstrxy
   4448	1293  83 C4 08			     add     sp,8
   4449					;
   4450					;	     putstrxy(65,ini+1,"≥ PID  =       ≥");
   4451					;
   4452	1296  1E			     push    ds
   4453	1297  B8 0A7Fr			     mov     ax,offset DGROUP:s@+2531
   4454	129A  50			     push    ax
   4455	129B  8B C7			     mov     ax,di
   4456	129D  40			     inc     ax
   4457	129E  50			     push    ax
   4458	129F  B8 0041			     mov     ax,65
   4459	12A2  50			     push    ax
   4460	12A3  E8 0000e			     call    near ptr _putstrxy
   4461	12A6  83 C4 08			     add     sp,8
   4462					;
   4463					;	     putstrxy(65,ini+2,"≥ Execucao:    ≥");
   4464					;
   4465	12A9  1E			     push    ds
   4466	12AA  B8 0A90r			     mov     ax,offset DGROUP:s@+2548
   4467	12AD  50			     push    ax
   4468	12AE  8B C7			     mov     ax,di
   4469	12B0  05 0002			     add     ax,2
   4470	12B3  50			     push    ax
   4471	12B4  B8 0041			     mov     ax,65
   4472	12B7  50			     push    ax
   4473	12B8  E8 0000e			     call    near ptr _putstrxy
   4474	12BB  83 C4 08			     add     sp,8
   4475					;
   4476					;	     putstrxy(65,ini+3,"≥	       ≥");
   4477					;
   4478	12BE  1E			     push    ds
   4479	12BF  B8 0AA1r			     mov     ax,offset DGROUP:s@+2565
   4480	12C2  50			     push    ax
   4481	12C3  8B C7			     mov     ax,di
   4482	12C5  05 0003			     add     ax,3
   4483	12C8  50			     push    ax
   4484	12C9  B8 0041			     mov     ax,65
   4485	12CC  50			     push    ax
   4486	12CD  E8 0000e			     call    near ptr _putstrxy
   4487	12D0  83 C4 08			     add     sp,8
   4488					;
   4489					;	     putstrxy(65,ini+4,"¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ");
   4490					;
   4491	12D3  1E			     push    ds
   4492	12D4  B8 0AB2r			     mov     ax,offset DGROUP:s@+2582
   4493	12D7  50			     push    ax
   4494	12D8  8B C7			     mov     ax,di
   4495	12DA  05 0004			     add     ax,4
   4496	12DD  50			     push    ax
   4497	12DE  B8 0041			     mov     ax,65
   4498	12E1  50			     push    ax
   4499	12E2  E8 0000e			     call    near ptr _putstrxy
   4500	12E5  83 C4 08			     add     sp,8
   4501					;
   4502					;
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 80
command.ASM



   4503					;	     inttostr(str,getpid());
   4504					;
   4505	12E8  E8 0000e			     call    near ptr _getpid
   4506	12EB  50			     push    ax
   4507	12EC  16			     push    ss
   4508	12ED  8D 46 EC			     lea     ax,word ptr [bp-20]
   4509	12F0  50			     push    ax
   4510	12F1  E8 0000e			     call    near ptr _inttostr
   4511	12F4  83 C4 06			     add     sp,6
   4512					;
   4513					;	     putstrxy(74,ini+1,str);
   4514					;
   4515	12F7  16			     push    ss
   4516	12F8  8D 46 EC			     lea     ax,word ptr [bp-20]
   4517	12FB  50			     push    ax
   4518	12FC  8B C7			     mov     ax,di
   4519	12FE  40			     inc     ax
   4520	12FF  50			     push    ax
   4521	1300  B8 004A			     mov     ax,74
   4522	1303  50			     push    ax
   4523	1304  E8 0000e			     call    near ptr _putstrxy
   4524	1307  83 C4 08			     add     sp,8
   4525					;
   4526					;	     for     (i=0;i<30000U;++i)	 {
   4527					;
   4528	130A  33 F6			     xor     si,si
   4529	130C  EB 29			     jmp     short @29@114
   4530	130E			     @29@58:
   4531					;
   4532					;		     unsignedtostr(str,i,5,'0');
   4533					;
   4534	130E  B0 30			     mov     al,48
   4535	1310  50			     push    ax
   4536	1311  B8 0005			     mov     ax,5
   4537	1314  50			     push    ax
   4538	1315  56			     push    si
   4539	1316  16			     push    ss
   4540	1317  8D 46 EC			     lea     ax,word ptr [bp-20]
   4541	131A  50			     push    ax
   4542	131B  E8 0000e			     call    near ptr _unsignedtostr
   4543	131E  83 C4 0A			     add     sp,10
   4544					;
   4545					;		     putstrxy(70,ini+3,str);
   4546					;
   4547	1321  16			     push    ss
   4548	1322  8D 46 EC			     lea     ax,word ptr [bp-20]
   4549	1325  50			     push    ax
   4550	1326  8B C7			     mov     ax,di
   4551	1328  05 0003			     add     ax,3
   4552	132B  50			     push    ax
   4553	132C  B8 0046			     mov     ax,70
   4554	132F  50			     push    ax
   4555	1330  E8 0000e			     call    near ptr _putstrxy
   4556	1333  83 C4 08			     add     sp,8
   4557	1336  46			     inc     si
   4558	1337			     @29@114:
   4559	1337  81 FE 7530		     cmp     si,30000
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 81
command.ASM



   4560	133B  72 D1			     jb	     short @29@58
   4561					;
   4562					;	     }
   4563					;	     semdown(semid);
   4564					;
   4565	133D  FF 36 0014r		     push    word ptr DGROUP:_semid
   4566	1341  E8 0000e			     call    near ptr _semdown
   4567	1344  59			     pop     cx
   4568	1345  EB 29			     jmp     short @29@226
   4569	1347			     @29@170:
   4570					;
   4571					;	     for     (;i<60000U;++i)  {
   4572					;		     unsignedtostr(str,i,5,'0');
   4573					;
   4574	1347  B0 30			     mov     al,48
   4575	1349  50			     push    ax
   4576	134A  B8 0005			     mov     ax,5
   4577	134D  50			     push    ax
   4578	134E  56			     push    si
   4579	134F  16			     push    ss
   4580	1350  8D 46 EC			     lea     ax,word ptr [bp-20]
   4581	1353  50			     push    ax
   4582	1354  E8 0000e			     call    near ptr _unsignedtostr
   4583	1357  83 C4 0A			     add     sp,10
   4584					;
   4585					;		     putstrxy(70,ini+3,str);
   4586					;
   4587	135A  16			     push    ss
   4588	135B  8D 46 EC			     lea     ax,word ptr [bp-20]
   4589	135E  50			     push    ax
   4590	135F  8B C7			     mov     ax,di
   4591	1361  05 0003			     add     ax,3
   4592	1364  50			     push    ax
   4593	1365  B8 0046			     mov     ax,70
   4594	1368  50			     push    ax
   4595	1369  E8 0000e			     call    near ptr _putstrxy
   4596	136C  83 C4 08			     add     sp,8
   4597	136F  46			     inc     si
   4598	1370			     @29@226:
   4599	1370  81 FE EA60		     cmp     si,-5536
   4600	1374  72 D1			     jb	     short @29@170
   4601					;
   4602					;	     }
   4603					;	     exit(0);
   4604					;
   4605	1376  33 C0			     xor     ax,ax
   4606	1378  50			     push    ax
   4607	1379  E8 0000e			     call    near ptr _exit
   4608	137C  59			     pop     cx
   4609					;
   4610					;    }
   4611					;
   4612	137D  5F			     pop     di
   4613	137E  5E			     pop     si
   4614	137F  8B E5			     mov     sp,bp
   4615	1381  5D			     pop     bp
   4616	1382  C3			     ret
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 82
command.ASM



   4617	1383			     _sem_aplic	     endp
   4618					;
   4619					;    int cmd_semtest(int argc, char far	*argv[])
   4620					;
   4621					     assume  cs:_TEXT
   4622	1383			     _cmd_semtest    proc    near
   4623	1383  55			     push    bp
   4624	1384  8B EC			     mov     bp,sp
   4625					;
   4626					;    {
   4627					;	     extern int	demo_linha;
   4628					;	     extern semid_t semid;
   4629					;
   4630					;	     if	     (argc != 2)     {
   4631					;
   4632	1386  83 7E 04 02		     cmp     word ptr [bp+4],2
   4633	138A  74 0F			     je	     short @30@142
   4634					;
   4635					;		     putstr("Erro em semtest: numero invalido de argumentos!\n");
   4636					;
   4637	138C  1E			     push    ds
   4638	138D  B8 0AC3r			     mov     ax,offset DGROUP:s@+2599
   4639	1390			     @30@86:
   4640	1390  50			     push    ax
   4641	1391  E8 0000e			     call    near ptr _putstr
   4642	1394  59			     pop     cx
   4643	1395  59			     pop     cx
   4644					;
   4645					;		     return 1;
   4646					;
   4647	1396  B8 0001			     mov     ax,1
   4648	1399			     @30@114:
   4649	1399  EB 3A			     jmp     short @30@282
   4650	139B			     @30@142:
   4651					;
   4652					;	     }
   4653					;	     semid = atoi(argv[1]);
   4654					;
   4655	139B  8B 5E 06			     mov     bx,word ptr [bp+6]
   4656	139E  FF 77 06			     push    word ptr [bx+6]
   4657	13A1  FF 77 04			     push    word ptr [bx+4]
   4658	13A4  E8 0000e			     call    near ptr _atoi
   4659	13A7  59			     pop     cx
   4660	13A8  59			     pop     cx
   4661	13A9  A3 0014r			     mov     word ptr DGROUP:_semid,ax
   4662					;
   4663					;	     demo_linha	+= 5;
   4664					;
   4665	13AC  83 06 0098r 05		     add     word ptr DGROUP:demo_linha,5
   4666					;
   4667					;	     if	     (demo_linha >21)
   4668					;
   4669	13B1  83 3E 0098r 15		     cmp     word ptr DGROUP:demo_linha,21
   4670	13B6  7E 06			     jle     short @30@198
   4671					;
   4672					;		     demo_linha	= 1;
   4673					;
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 83
command.ASM



   4674	13B8  C7 06 0098r 0001		     mov     word ptr DGROUP:demo_linha,1
   4675	13BE			     @30@198:
   4676					;
   4677					;	     if	     (fork(sem_aplic)==miniSO_ERROR)  {
   4678					;
   4679	13BE  B8 127Ar			     mov     ax,offset _sem_aplic
   4680	13C1  50			     push    ax
   4681	13C2  E8 0000e			     call    near ptr _fork
   4682	13C5  59			     pop     cx
   4683	13C6  3D FFFF			     cmp     ax,-1
   4684	13C9  75 06			     jne     short @30@254
   4685					;
   4686					;		     putstr("Erro em demo: fork() nao conseguiu	criar thread!\n");
   4687					;
   4688	13CB  1E			     push    ds
   4689	13CC  B8 0AF4r			     mov     ax,offset DGROUP:s@+2648
   4690	13CF  EB BF			     jmp     short @30@86
   4691	13D1			     @30@254:
   4692					;
   4693					;		     return 1;
   4694					;	     }
   4695					;	     return 0;
   4696					;
   4697	13D1  33 C0			     xor     ax,ax
   4698	13D3  EB C4			     jmp     short @30@114
   4699	13D5			     @30@282:
   4700					;
   4701					;    }
   4702					;
   4703	13D5  5D			     pop     bp
   4704	13D6  C3			     ret
   4705	13D7			     _cmd_semtest    endp
   4706					;
   4707					;    int cmd_semup(int argc, char far *argv[])
   4708					;
   4709					     assume  cs:_TEXT
   4710	13D7			     _cmd_semup	     proc    near
   4711	13D7  55			     push    bp
   4712	13D8  8B EC			     mov     bp,sp
   4713	13DA  83 EC 02			     sub     sp,2
   4714					;
   4715					;    {
   4716					;	     semid_t semid;
   4717					;
   4718					;	     if	     (argc != 2)     {
   4719					;
   4720	13DD  83 7E 04 02		     cmp     word ptr [bp+4],2
   4721	13E1  74 0F			     je	     short @31@114
   4722					;
   4723					;		     putstr("Erro em semtest: numero invalido de argumentos!\n");
   4724					;
   4725	13E3  1E			     push    ds
   4726	13E4  B8 0B26r			     mov     ax,offset DGROUP:s@+2698
   4727	13E7  50			     push    ax
   4728	13E8  E8 0000e			     call    near ptr _putstr
   4729	13EB  59			     pop     cx
   4730	13EC  59			     pop     cx
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 84
command.ASM



   4731					;
   4732					;		     return 1;
   4733					;
   4734	13ED  B8 0001			     mov     ax,1
   4735	13F0			     @31@86:
   4736	13F0  EB 1A			     jmp     short @31@142
   4737	13F2			     @31@114:
   4738					;
   4739					;	     }
   4740					;	     semid = atoi(argv[1]);
   4741					;
   4742	13F2  8B 5E 06			     mov     bx,word ptr [bp+6]
   4743	13F5  FF 77 06			     push    word ptr [bx+6]
   4744	13F8  FF 77 04			     push    word ptr [bx+4]
   4745	13FB  E8 0000e			     call    near ptr _atoi
   4746	13FE  59			     pop     cx
   4747	13FF  59			     pop     cx
   4748	1400  89 46 FE			     mov     word ptr [bp-2],ax
   4749					;
   4750					;	     return semup(semid);
   4751					;
   4752	1403  FF 76 FE			     push    word ptr [bp-2]
   4753	1406  E8 0000e			     call    near ptr _semup
   4754	1409  59			     pop     cx
   4755	140A  EB E4			     jmp     short @31@86
   4756	140C			     @31@142:
   4757					;
   4758					;    }
   4759					;
   4760	140C  8B E5			     mov     sp,bp
   4761	140E  5D			     pop     bp
   4762	140F  C3			     ret
   4763	1410			     _cmd_semup	     endp
   4764					;
   4765					;    int cmd_semdestroy(int argc, char far *argv[])
   4766					;
   4767					     assume  cs:_TEXT
   4768	1410			     _cmd_semdestroy proc    near
   4769	1410  55			     push    bp
   4770	1411  8B EC			     mov     bp,sp
   4771	1413  83 EC 02			     sub     sp,2
   4772					;
   4773					;    {
   4774					;	     semid_t semid;
   4775					;
   4776					;	     if	     (argc != 2)     {
   4777					;
   4778	1416  83 7E 04 02		     cmp     word ptr [bp+4],2
   4779	141A  74 0F			     je	     short @32@114
   4780					;
   4781					;		     putstr("Erro em semtest: numero invalido de argumentos!\n");
   4782					;
   4783	141C  1E			     push    ds
   4784	141D  B8 0B57r			     mov     ax,offset DGROUP:s@+2747
   4785	1420  50			     push    ax
   4786	1421  E8 0000e			     call    near ptr _putstr
   4787	1424  59			     pop     cx
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 85
command.ASM



   4788	1425  59			     pop     cx
   4789					;
   4790					;		     return 1;
   4791					;
   4792	1426  B8 0001			     mov     ax,1
   4793	1429			     @32@86:
   4794	1429  EB 1A			     jmp     short @32@142
   4795	142B			     @32@114:
   4796					;
   4797					;	     }
   4798					;	     semid = atoi(argv[1]);
   4799					;
   4800	142B  8B 5E 06			     mov     bx,word ptr [bp+6]
   4801	142E  FF 77 06			     push    word ptr [bx+6]
   4802	1431  FF 77 04			     push    word ptr [bx+4]
   4803	1434  E8 0000e			     call    near ptr _atoi
   4804	1437  59			     pop     cx
   4805	1438  59			     pop     cx
   4806	1439  89 46 FE			     mov     word ptr [bp-2],ax
   4807					;
   4808					;	     return semdestroy(semid);
   4809					;
   4810	143C  FF 76 FE			     push    word ptr [bp-2]
   4811	143F  E8 0000e			     call    near ptr _semdestroy
   4812	1442  59			     pop     cx
   4813	1443  EB E4			     jmp     short @32@86
   4814	1445			     @32@142:
   4815					;
   4816					;    }
   4817					;
   4818	1445  8B E5			     mov     sp,bp
   4819	1447  5D			     pop     bp
   4820	1448  C3			     ret
   4821	1449			     _cmd_semdestroy endp
   4822					;
   4823					;    int cmd_stop(int argc, char far *argv[]) {
   4824					;
   4825					     assume  cs:_TEXT
   4826	1449			     _cmd_stop	     proc    near
   4827	1449  55			     push    bp
   4828	144A  8B EC			     mov     bp,sp
   4829	144C  56			     push    si
   4830	144D  57			     push    di
   4831					;
   4832					;
   4833					;	     int t=0;
   4834					;
   4835	144E  33 F6			     xor     si,si
   4836					;
   4837					;	     pid_t pid=0;
   4838					;
   4839	1450  33 FF			     xor     di,di
   4840					;
   4841					;
   4842					;	     if	(argc <	2){
   4843					;
   4844	1452  83 7E 04 02		     cmp     word ptr [bp+4],2
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 86
command.ASM



   4845	1456  7D 0F			     jge     short @33@142
   4846					;
   4847					;		     putstr("stop: nenhum parametro foi	fornecido\n");
   4848					;
   4849	1458  1E			     push    ds
   4850	1459  B8 0B88r			     mov     ax,offset DGROUP:s@+2796
   4851	145C			     @33@86:
   4852	145C  50			     push    ax
   4853	145D  E8 0000e			     call    near ptr _putstr
   4854	1460  59			     pop     cx
   4855	1461  59			     pop     cx
   4856					;
   4857					;		     return 1;
   4858					;
   4859	1462  B8 0001			     mov     ax,1
   4860	1465			     @33@114:
   4861	1465  EB 26			     jmp     short @33@226
   4862	1467			     @33@142:
   4863					;
   4864					;	     }
   4865					;
   4866					;	     pid = atoi(argv[1]);
   4867					;
   4868	1467  8B 5E 06			     mov     bx,word ptr [bp+6]
   4869	146A  FF 77 06			     push    word ptr [bx+6]
   4870	146D  FF 77 04			     push    word ptr [bx+4]
   4871	1470  E8 0000e			     call    near ptr _atoi
   4872	1473  59			     pop     cx
   4873	1474  59			     pop     cx
   4874	1475  8B F8			     mov     di,ax
   4875					;
   4876					;	     t = stop(pid);
   4877					;
   4878	1477  57			     push    di
   4879	1478  E8 0000e			     call    near ptr _stop
   4880	147B  59			     pop     cx
   4881	147C  8B F0			     mov     si,ax
   4882					;
   4883					;	     if(t==miniSO_ERROR){
   4884					;
   4885	147E  83 FE FF			     cmp     si,-1
   4886	1481  75 06			     jne     short @33@198
   4887					;
   4888					;		     putstr("stop: impossivel suspender	a thread\n");
   4889					;
   4890	1483  1E			     push    ds
   4891	1484  B8 0BAEr			     mov     ax,offset DGROUP:s@+2834
   4892	1487  EB D3			     jmp     short @33@86
   4893	1489			     @33@198:
   4894					;
   4895					;		     return 1;
   4896					;	     }
   4897					;
   4898					;	     return 0;
   4899					;
   4900	1489  33 C0			     xor     ax,ax
   4901	148B  EB D8			     jmp     short @33@114
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 87
command.ASM



   4902	148D			     @33@226:
   4903					;
   4904					;    }
   4905					;
   4906	148D  5F			     pop     di
   4907	148E  5E			     pop     si
   4908	148F  5D			     pop     bp
   4909	1490  C3			     ret
   4910	1491			     _cmd_stop	     endp
   4911					;
   4912					;    int cmd_resume(int	argc, char far *argv[])	{
   4913					;
   4914					     assume  cs:_TEXT
   4915	1491			     _cmd_resume     proc    near
   4916	1491  55			     push    bp
   4917	1492  8B EC			     mov     bp,sp
   4918	1494  56			     push    si
   4919	1495  57			     push    di
   4920					;
   4921					;	     int t=0;
   4922					;
   4923	1496  33 F6			     xor     si,si
   4924					;
   4925					;	     pid_t pid=0;
   4926					;
   4927	1498  33 FF			     xor     di,di
   4928					;
   4929					;
   4930					;	     if	(argc <	2){
   4931					;
   4932	149A  83 7E 04 02		     cmp     word ptr [bp+4],2
   4933	149E  7D 0F			     jge     short @34@142
   4934					;
   4935					;		     putstr("stop: nenhum parametro foi	fornecido\n");
   4936					;
   4937	14A0  1E			     push    ds
   4938	14A1  B8 0BD3r			     mov     ax,offset DGROUP:s@+2871
   4939	14A4			     @34@86:
   4940	14A4  50			     push    ax
   4941	14A5  E8 0000e			     call    near ptr _putstr
   4942	14A8  59			     pop     cx
   4943	14A9  59			     pop     cx
   4944					;
   4945					;		     return 1;
   4946					;
   4947	14AA  B8 0001			     mov     ax,1
   4948	14AD			     @34@114:
   4949	14AD  EB 26			     jmp     short @34@226
   4950	14AF			     @34@142:
   4951					;
   4952					;	     }
   4953					;
   4954					;	     pid = atoi(argv[1]);
   4955					;
   4956	14AF  8B 5E 06			     mov     bx,word ptr [bp+6]
   4957	14B2  FF 77 06			     push    word ptr [bx+6]
   4958	14B5  FF 77 04			     push    word ptr [bx+4]
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 88
command.ASM



   4959	14B8  E8 0000e			     call    near ptr _atoi
   4960	14BB  59			     pop     cx
   4961	14BC  59			     pop     cx
   4962	14BD  8B F8			     mov     di,ax
   4963					;
   4964					;	     t = resume(pid);
   4965					;
   4966	14BF  57			     push    di
   4967	14C0  E8 0000e			     call    near ptr _resume
   4968	14C3  59			     pop     cx
   4969	14C4  8B F0			     mov     si,ax
   4970					;
   4971					;	     if(t==miniSO_ERROR){
   4972					;
   4973	14C6  83 FE FF			     cmp     si,-1
   4974	14C9  75 06			     jne     short @34@198
   4975					;
   4976					;		     putstr("resume: impossivel	reiniciar a thread\n");
   4977					;
   4978	14CB  1E			     push    ds
   4979	14CC  B8 0BF9r			     mov     ax,offset DGROUP:s@+2909
   4980	14CF  EB D3			     jmp     short @34@86
   4981	14D1			     @34@198:
   4982					;
   4983					;		     return 1;
   4984					;	     }
   4985					;
   4986					;	     return 0;
   4987					;
   4988	14D1  33 C0			     xor     ax,ax
   4989	14D3  EB D8			     jmp     short @34@114
   4990	14D5			     @34@226:
   4991					;
   4992					;    }
   4993					;
   4994	14D5  5F			     pop     di
   4995	14D6  5E			     pop     si
   4996	14D7  5D			     pop     bp
   4997	14D8  C3			     ret
   4998	14D9			     _cmd_resume     endp
   4999	14D9			     _TEXT   ends
   5000	0014			     _BSS    segment word public 'BSS'
   5001	0014			     _semid  label   word
   5002	0014  02*(??)			     db	     2 dup (?)
   5003	0016			     var     label   word
   5004	0016  01F4*(??)			     db	     500 dup (?)
   5005	020A			     history_pos     label   word
   5006	020A  02*(??)			     db	     2 dup (?)
   5007	020C			     history_nxt     label   word
   5008	020C  02*(??)			     db	     2 dup (?)
   5009	020E			     history_ini     label   word
   5010	020E  02*(??)			     db	     2 dup (?)
   5011	0210			     history_len     label   word
   5012	0210  02*(??)			     db	     2 dup (?)
   5013	0212			     history label   byte
   5014	0212  0136*(??)			     db	     310 dup (?)
   5015	0348			     argv    label   dword
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 89
command.ASM



   5016	0348  40*(??)			     db	     64	dup (?)
   5017	0388			     argline label   byte
   5018	0388  025F*(??)			     db	     607 dup (?)
   5019	05E7			     palavra label   byte
   5020	05E7  1F*(??)			     db	     31	dup (?)
   5021	0606			     cmdline label   byte
   5022	0606  1F*(??)			     db	     31	dup (?)
   5023	0625			     end_command     label   word
   5024	0625  02*(??)			     db	     2 dup (?)
   5025					     ?debug  C E9
   5026					     ?debug  C FA00000000
   5027	0627			     _BSS    ends
   5028	009C			     _DATA   segment word public 'DATA'
   5029	009C			     s@	     label   byte
   5030	009C  3F			     db	     '?'
   5031	009D  00			     db	     0
   5032	009E  20 20 20 20 20 20	20+	     db	     '			 exibe estas informacoes'
   5033	      20 20 20 20 20 20	20+
   5034	      20 20 20 20 20 65	78+
   5035	      69 62 65 20 65 73	74+
   5036	      61 73 20 69 6E 66	6F+
   5037	      72 6D 61 63 6F 65	73
   5038	00C8  00			     db	     0
   5039	00C9  68 65 6C 70		     db	     'help'
   5040	00CD  00			     db	     0
   5041	00CE  20 20 20 20 20 20	20+	     db	     '		      exibe estas informacoes'
   5042	      20 20 20 20 20 20	20+
   5043	      20 20 65 78 69 62	65+
   5044	      20 65 73 74 61 73	20+
   5045	      69 6E 66 6F 72 6D	61+
   5046	      63 6F 65 73
   5047	00F5  00			     db	     0
   5048	00F6  76 65 72			     db	     'ver'
   5049	00F9  00			     db	     0
   5050	00FA  20 20 20 20 20 20	20+	     db	     '		       mostra a	versao do MSO'
   5051	      20 20 20 20 20 20	20+
   5052	      20 20 20 6D 6F 73	74+
   5053	      72 61 20 61 20 76	65+
   5054	      72 73 61 6F 20 64	6F+
   5055	      20 4D 53 4F
   5056	0121  00			     db	     0
   5057	0122  64 61 74 65		     db	     'date'
   5058	0126  00			     db	     0
   5059	0127  20 20 20 20 20 20	20+	     db	     '		      mostra a data'
   5060	      20 20 20 20 20 20	20+
   5061	      20 20 6D 6F 73 74	72+
   5062	      61 20 61 20 64 61	74+
   5063	      61
   5064	0144  00			     db	     0
   5065	0145  74 69 6D 65		     db	     'time'
   5066	0149  00			     db	     0
   5067	014A  20 20 20 20 20 20	20+	     db	     '		      mostra a hora'
   5068	      20 20 20 20 20 20	20+
   5069	      20 20 6D 6F 73 74	72+
   5070	      61 20 61 20 68 6F	72+
   5071	      61
   5072	0167  00			     db	     0
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 90
command.ASM



   5073	0168  63 6C 73			     db	     'cls'
   5074	016B  00			     db	     0
   5075	016C  20 20 20 20 20 20	20+	     db	     '		       limpa a tela'
   5076	      20 20 20 20 20 20	20+
   5077	      20 20 20 6C 69 6D	70+
   5078	      61 20 61 20 74 65	6C+
   5079	      61
   5080	0189  00			     db	     0
   5081	018A  63 6C 65 61 72		     db	     'clear'
   5082	018F  00			     db	     0
   5083	0190  20 20 20 20 20 20	20+	     db	     '		     limpa a tela'
   5084	      20 20 20 20 20 20	20+
   5085	      20 6C 69 6D 70 61	20+
   5086	      61 20 74 65 6C 61
   5087	01AB  00			     db	     0
   5088	01AC  72 65 62 6F 6F 74		     db	     'reboot'
   5089	01B2  00			     db	     0
   5090	01B3  20 20 20 20 20 20	20+	     db	     '		    reinicializa o sistema'
   5091	      20 20 20 20 20 20	20+
   5092	      72 65 69 6E 69 63	69+
   5093	      61 6C 69 7A 61 20	6F+
   5094	      20 73 69 73 74 65	6D+
   5095	      61
   5096	01D7  00			     db	     0
   5097	01D8  65 78 69 74		     db	     'exit'
   5098	01DC  00			     db	     0
   5099	01DD  20 20 20 20 20 20	20+	     db	     '		      abandona o sistema'
   5100	      20 20 20 20 20 20	20+
   5101	      20 20 61 62 61 6E	64+
   5102	      6F 6E 61 20 6F 20	73+
   5103	      69 73 74 65 6D 61
   5104	01FF  00			     db	     0
   5105	0200  71 75 69 74		     db	     'quit'
   5106	0204  00			     db	     0
   5107	0205  20 20 20 20 20 20	20+	     db	     '		      abandona o sistema'
   5108	      20 20 20 20 20 20	20+
   5109	      20 20 61 62 61 6E	64+
   5110	      6F 6E 61 20 6F 20	73+
   5111	      69 73 74 65 6D 61
   5112	0227  00			     db	     0
   5113	0228  70 73			     db	     'ps'
   5114	022A  00			     db	     0
   5115	022B  20 20 20 20 20 20	20+	     db	     '			exibe processos/threads	em execucao'
   5116	      20 20 20 20 20 20	20+
   5117	      20 20 20 20 65 78	69+
   5118	      62 65 20 70 72 6F	63+
   5119	      65 73 73 6F 73 2F	74+
   5120	      68 72 65 61 64 73	20+
   5121	      65 6D 20 65 78 65	63+
   5122	      75 63 61 6F
   5123	0260  00			     db	     0
   5124	0261  6B 69 6C 6C		     db	     'kill'
   5125	0265  00			     db	     0
   5126	0266  20 3C 70 69 64 3E	20+	     db	     ' <pid>	      encerra um processo/thread'
   5127	      20 20 20 20 20 20	20+
   5128	      20 20 65 6E 63 65	72+
   5129	      72 61 20 75 6D 20	70+
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 91
command.ASM



   5130	      72 6F 63 65 73 73	6F+
   5131	      2F 74 68 72 65 61	64
   5132	0290  00			     db	     0
   5133	0291  64 65 6D 6F		     db	     'demo'
   5134	0295  00			     db	     0
   5135	0296  20 3C 65 78 69 74	63+	     db	     ' <exitcode>     inicia processos/threads de demonstracao'
   5136	      6F 64 65 3E 20 20	20+
   5137	      20 20 69 6E 69 63	69+
   5138	      61 20 70 72 6F 63	65+
   5139	      73 73 6F 73 2F 74	68+
   5140	      72 65 61 64 73 20	64+
   5141	      65 20 64 65 6D 6F	6E+
   5142	      73 74 72 61 63 61	6F
   5143	02CE  00			     db	     0
   5144	02CF  73 65 74			     db	     'set'
   5145	02D2  00			     db	     0
   5146	02D3  20 5B 3C 76 61 72	3E+	     db	     ' [<var> [<val>]] define o	valor da variavel ou exibe variavei'
   5147	      20 5B 3C 76 61 6C	3E+
   5148	      5D 5D 20 64 65 66	69+
   5149	      6E 65 20 6F 20 76	61+
   5150	      6C 6F 72 20 64 61	20+
   5151	      76 61 72 69 61 76	65+
   5152	      6C 20 6F 75 20 65	78+
   5153	      69 62 65 20 76 61	72+
   5154	      69 61 76 65 69
   5155	0310  73			     db	     's'
   5156	0311  00			     db	     0
   5157	0312  75 6E 73 65 74		     db	     'unset'
   5158	0317  00			     db	     0
   5159	0318  20 3C 76 61 72 3E	20+	     db	     ' <var>	     apaga a variavel'
   5160	      20 20 20 20 20 20	20+
   5161	      20 61 70 61 67 61	20+
   5162	      61 20 76 61 72 69	61+
   5163	      76 65 6C
   5164	0337  00			     db	     0
   5165	0338  65 63 68 6F		     db	     'echo'
   5166	033C  00			     db	     0
   5167	033D  20 5B 2D 6E 5D 20	3C+	     db	     ' [-n] <args>... imprime argumentos'
   5168	      61 72 67 73 3E 2E	2E+
   5169	      2E 20 69 6D 70 72	69+
   5170	      6D 65 20 61 72 67	75+
   5171	      6D 65 6E 74 6F 73
   5172	035F  00			     db	     0
   5173	0360  77 61 69 74 70 69	64	     db	     'waitpid'
   5174	0367  00			     db	     0
   5175	0368  20 3C 70 69 64 3E	20+	     db	     ' <pid>	   espera pelo processo-filho indicado'
   5176	      20 20 20 20 20 20	65+
   5177	      73 70 65 72 61 20	70+
   5178	      65 6C 6F 20 70 72	6F+
   5179	      63 65 73 73 6F 2D	66+
   5180	      69 6C 68 6F 20 69	6E+
   5181	      64 69 63 61 64 6F
   5182	0398  00			     db	     0
   5183	0399  77 61 69 74		     db	     'wait'
   5184	039D  00			     db	     0
   5185	039E  20 20 20 20 20 20	20+	     db	     '		      espera por um processo-filho'
   5186	      20 20 20 20 20 20	20+
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 92
command.ASM



   5187	      20 20 65 73 70 65	72+
   5188	      61 20 70 6F 72 20	75+
   5189	      6D 20 70 72 6F 63	65+
   5190	      73 73 6F 2D 66 69	6C+
   5191	      68 6F
   5192	03CA  00			     db	     0
   5193	03CB  73 65 6D 6C 73		     db	     'semls'
   5194	03D0  00			     db	     0
   5195	03D1  20 20 20 20 20 20	20+	     db	     '		     lista tabela de semaforos'
   5196	      20 20 20 20 20 20	20+
   5197	      20 6C 69 73 74 61	20+
   5198	      74 61 62 65 6C 61	20+
   5199	      64 65 20 73 65 6D	61+
   5200	      66 6F 72 6F 73
   5201	03F9  00			     db	     0
   5202	03FA  73 65 6D 63 72 65	61+	     db	     'semcreate'
   5203	      74 65
   5204	0403  00			     db	     0
   5205	0404  20 3C 76 61 6C 75	65+	     db	     ' <value>	 cria um semaforo'
   5206	      3E 20 20 20 63 72	69+
   5207	      61 20 75 6D 20 73	65+
   5208	      6D 61 66 6F 72 6F
   5209	041F  00			     db	     0
   5210	0420  73 65 6D 74 65 73	74	     db	     'semtest'
   5211	0427  00			     db	     0
   5212	0428  20 3C 73 65 6D 69	64+	     db	     ' <semid>	   aplicacao para teste	de semaforos'
   5213	      3E 20 20 20 20 20	61+
   5214	      70 6C 69 63 61 63	61+
   5215	      6F 20 70 61 72 61	20+
   5216	      74 65 73 74 65 20	64+
   5217	      65 20 73 65 6D 61	66+
   5218	      6F 72 6F 73
   5219	0456  00			     db	     0
   5220	0457  73 65 6D 75 70		     db	     'semup'
   5221	045C  00			     db	     0
   5222	045D  20 3C 73 65 6D 69	64+	     db	     ' <semid>	     incrementa	o valor	de um semaforo'
   5223	      3E 20 20 20 20 20	20+
   5224	      20 69 6E 63 72 65	6D+
   5225	      65 6E 74 61 20 6F	20+
   5226	      76 61 6C 6F 72 20	64+
   5227	      65 20 75 6D 20 73	65+
   5228	      6D 61 66 6F 72 6F
   5229	048D  00			     db	     0
   5230	048E  73 65 6D 64 65 73	74+	     db	     'semdestroy'
   5231	      72 6F 79
   5232	0498  00			     db	     0
   5233	0499  20 3C 73 65 6D 69	64+	     db	     ' <semid>	destroi	um semaforo'
   5234	      3E 20 20 64 65 73	74+
   5235	      72 6F 69 20 75 6D	20+
   5236	      73 65 6D 61 66 6F	72+
   5237	      6F
   5238	04B6  00			     db	     0
   5239	04B7  73 74 6F 70		     db	     'stop'
   5240	04BB  00			     db	     0
   5241	04BC  20 3C 70 69 64 3E	20+	     db	     ' <pid>	      suspende um processo/thread'
   5242	      20 20 20 20 20 20	20+
   5243	      20 20 73 75 73 70	65+
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 93
command.ASM



   5244	      6E 64 65 20 75 6D	20+
   5245	      70 72 6F 63 65 73	73+
   5246	      6F 2F 74 68 72 65	61+
   5247	      64
   5248	04E7  00			     db	     0
   5249	04E8  72 65 73 75 6D 65		     db	     'resume'
   5250	04EE  00			     db	     0
   5251	04EF  20 3C 70 69 64 3E	20+	     db	     ' <pid>	    reinicia um	processo/thread'
   5252	      20 20 20 20 20 20	20+
   5253	      72 65 69 6E 69 63	69+
   5254	      61 20 75 6D 20 70	72+
   5255	      6F 63 65 73 73 6F	2F+
   5256	      74 68 72 65 61 64
   5257	0518  00			     db	     0
   5258	0519  20 20 20 20 20 20	20+	     db	     '			'
   5259	      20 20 20 20 20 20	20+
   5260	      20 20 20 20
   5261	052B  DC			     db	     -36
   5262	052C  DC			     db	     -36
   5263	052D  DC			     db	     -36
   5264	052E  DC			     db	     -36
   5265	052F  DC			     db	     -36
   5266	0530  DC			     db	     -36
   5267	0531  DC			     db	     -36
   5268	0532  20 20			     db	     '	'
   5269	0534  DC			     db	     -36
   5270	0535  DC			     db	     -36
   5271	0536  DC			     db	     -36
   5272	0537  DC			     db	     -36
   5273	0538  DC			     db	     -36
   5274	0539  DC			     db	     -36
   5275	053A  0A			     db	     10
   5276	053B  00			     db	     0
   5277	053C  20			     db	     ' '
   5278	053D  DC			     db	     -36
   5279	053E  DC			     db	     -36
   5280	053F  DC			     db	     -36
   5281	0540  DC			     db	     -36
   5282	0541  DC			     db	     -36
   5283	0542  20 20			     db	     '	'
   5284	0544  DC			     db	     -36
   5285	0545  20 20			     db	     '	'
   5286	0547  DC			     db	     -36
   5287	0548  DC			     db	     -36
   5288	0549  DC			     db	     -36
   5289	054A  20 20			     db	     '	'
   5290	054C  DC			     db	     -36
   5291	054D  20			     db	     ' '
   5292	054E  DB			     db	     -37
   5293	054F  DB			     db	     -37
   5294	0550  20 20 20			     db	     '	 '
   5295	0553  DF			     db	     -33
   5296	0554  DF			     db	     -33
   5297	0555  20 20			     db	     '	'
   5298	0557  DB			     db	     -37
   5299	0558  DB			     db	     -37
   5300	0559  20 20			     db	     '	'
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 94
command.ASM



   5301	055B  DB			     db	     -37
   5302	055C  DB			     db	     -37
   5303	055D  20 20			     db	     '	'
   5304	055F  00			     db	     0
   5305	0560  4D 69 6E 69 73 53	69+	     db	     'MinisSistema Operacional'
   5306	      73 74 65 6D 61 20	4F+
   5307	      70 65 72 61 63 69	6F+
   5308	      6E 61 6C
   5309	0578  0A			     db	     10
   5310	0579  00			     db	     0
   5311	057A  DC			     db	     -36
   5312	057B  DB			     db	     -37
   5313	057C  20			     db	     ' '
   5314	057D  DB			     db	     -37
   5315	057E  20			     db	     ' '
   5316	057F  DB			     db	     -37
   5317	0580  20			     db	     ' '
   5318	0581  DC			     db	     -36
   5319	0582  DB			     db	     -37
   5320	0583  20			     db	     ' '
   5321	0584  DC			     db	     -36
   5322	0585  DB			     db	     -37
   5323	0586  20			     db	     ' '
   5324	0587  DB			     db	     -37
   5325	0588  20			     db	     ' '
   5326	0589  DC			     db	     -36
   5327	058A  DB			     db	     -37
   5328	058B  20			     db	     ' '
   5329	058C  DF			     db	     -33
   5330	058D  DF			     db	     -33
   5331	058E  DF			     db	     -33
   5332	058F  DF			     db	     -33
   5333	0590  DB			     db	     -37
   5334	0591  DB			     db	     -37
   5335	0592  DB			     db	     -37
   5336	0593  20			     db	     ' '
   5337	0594  DB			     db	     -37
   5338	0595  DB			     db	     -37
   5339	0596  DB			     db	     -37
   5340	0597  20 20			     db	     '	'
   5341	0599  DB			     db	     -37
   5342	059A  DB			     db	     -37
   5343	059B  20 20			     db	     '	'
   5344	059D  00			     db	     0
   5345	059E  56 73 20			     db	     'Vs '
   5346	05A1  00			     db	     0
   5347	05A2  32 30 31 32		     db	     '2012'
   5348	05A6  00			     db	     0
   5349	05A7  0A			     db	     10
   5350	05A8  00			     db	     0
   5351	05A9  DB			     db	     -37
   5352	05AA  DB			     db	     -37
   5353	05AB  20			     db	     ' '
   5354	05AC  DB			     db	     -37
   5355	05AD  20			     db	     ' '
   5356	05AE  DB			     db	     -37
   5357	05AF  20			     db	     ' '
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 95
command.ASM



   5358	05B0  DB			     db	     -37
   5359	05B1  DB			     db	     -37
   5360	05B2  20			     db	     ' '
   5361	05B3  DB			     db	     -37
   5362	05B4  DB			     db	     -37
   5363	05B5  20			     db	     ' '
   5364	05B6  DB			     db	     -37
   5365	05B7  20			     db	     ' '
   5366	05B8  DB			     db	     -37
   5367	05B9  DB			     db	     -37
   5368	05BA  20			     db	     ' '
   5369	05BB  DB			     db	     -37
   5370	05BC  DB			     db	     -37
   5371	05BD  DC			     db	     -36
   5372	05BE  DC			     db	     -36
   5373	05BF  DB			     db	     -37
   5374	05C0  DB			     db	     -37
   5375	05C1  DB			     db	     -37
   5376	05C2  20			     db	     ' '
   5377	05C3  DB			     db	     -37
   5378	05C4  DB			     db	     -37
   5379	05C5  DB			     db	     -37
   5380	05C6  DC			     db	     -36
   5381	05C7  DC			     db	     -36
   5382	05C8  DB			     db	     -37
   5383	05C9  DB			     db	     -37
   5384	05CA  20 20			     db	     '	'
   5385	05CC  00			     db	     0
   5386	05CD  70 6F 72 20 52 6F	6C+	     db	     'por Roland Teodorowitsch'
   5387	      61 6E 64 20 54 65	6F+
   5388	      64 6F 72 6F 77 69	74+
   5389	      73 63 68
   5390	05E5  0A			     db	     10
   5391	05E6  00			     db	     0
   5392	05E7  0A			     db	     10
   5393	05E8  44 69 67 69 74 65	20	     db	     'Digite '
   5394	05EF  27			     db	     39
   5395	05F0  68 65 6C 70		     db	     'help'
   5396	05F4  27			     db	     39
   5397	05F5  20 6F 75 20		     db	     ' ou '
   5398	05F9  27			     db	     39
   5399	05FA  3F			     db	     '?'
   5400	05FB  27			     db	     39
   5401	05FC  20 70 61 72 61 20	61+	     db	     ' para ajuda...'
   5402	      6A 75 64 61 2E 2E	2E
   5403	060A  0A			     db	     10
   5404	060B  0A			     db	     10
   5405	060C  00			     db	     0
   5406	060D  50 52 4F 4D 50 54		     db	     'PROMPT'
   5407	0613  00			     db	     0
   5408	0614  6D 69 6E 69 53 4F	3E	     db	     'miniSO>'
   5409	061B  00			     db	     0
   5410	061C  45 52 52 4F 52 4C	45+	     db	     'ERRORLEVEL'
   5411	      56 45 4C
   5412	0626  00			     db	     0
   5413	0627  30			     db	     '0'
   5414	0628  00			     db	     0
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 96
command.ASM



   5415	0629  45 52 52 4F 52 4C	45+	     db	     'ERRORLEVEL'
   5416	      56 45 4C
   5417	0633  00			     db	     0
   5418	0634  45 72 72 6F 3A 20	63+	     db	     'Erro: comando desconhecido!'
   5419	      6F 6D 61 6E 64 6F	20+
   5420	      64 65 73 63 6F 6E	68+
   5421	      65 63 69 64 6F 21
   5422	064F  0A			     db	     10
   5423	0650  00			     db	     0
   5424	0651  50 52 4F 4D 50 54		     db	     'PROMPT'
   5425	0657  00			     db	     0
   5426	0658  43 6F 6D 61 6E 64	6F+	     db	     'Comandos do minisSistema Operacional:'
   5427	      73 20 64 6F 20 6D	69+
   5428	      6E 69 73 53 69 73	74+
   5429	      65 6D 61 20 4F 70	65+
   5430	      72 61 63 69 6F 6E	61+
   5431	      6C 3A
   5432	067D  0A			     db	     10
   5433	067E  00			     db	     0
   5434	067F  6D 69 6E 69 73 53	69+	     db	     'minisSistema Operacional - Vs '
   5435	      73 74 65 6D 61 20	4F+
   5436	      70 65 72 61 63 69	6F+
   5437	      6E 61 6C 20 2D 20	56+
   5438	      73 20
   5439	069D  00			     db	     0
   5440	069E  32 30 31 32		     db	     '2012'
   5441	06A2  00			     db	     0
   5442	06A3  20 42 43 50 20 20	20+	     db	     ' BCP   PID   PPID	 STATUS	  ZLIST	 PREV	NEXT'
   5443	      50 49 44 20 20 20	50+
   5444	      50 49 44 20 20 53	54+
   5445	      41 54 55 53 20 20	20+
   5446	      5A 4C 49 53 54 20	20+
   5447	      50 52 45 56 20 20	20+
   5448	      4E 45 58 54
   5449	06D1  0A			     db	     10
   5450	06D2  00			     db	     0
   5451	06D3  20 20			     db	     '	'
   5452	06D5  00			     db	     0
   5453	06D6  20 20			     db	     '	'
   5454	06D8  00			     db	     0
   5455	06D9  20 20			     db	     '	'
   5456	06DB  00			     db	     0
   5457	06DC  46 52 45 45 20 20	20	     db	     'FREE   '
   5458	06E3  00			     db	     0
   5459	06E4  52 45 41 44 59 20	20	     db	     'READY  '
   5460	06EB  00			     db	     0
   5461	06EC  52 55 4E 4E 49 4E	47	     db	     'RUNNING'
   5462	06F3  00			     db	     0
   5463	06F4  5A 4F 4D 42 49 45	20	     db	     'ZOMBIE '
   5464	06FB  00			     db	     0
   5465	06FC  57 41 49 54 20 20	20	     db	     'WAIT   '
   5466	0703  00			     db	     0
   5467	0704  57 41 49 54 53 49	47	     db	     'WAITSIG'
   5468	070B  00			     db	     0
   5469	070C  57 41 49 54 53 45	4D	     db	     'WAITSEM'
   5470	0713  00			     db	     0
   5471	0714  53 54 4F 50 50 45	44	     db	     'STOPPED'
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 97
command.ASM



   5472	071B  00			     db	     0
   5473	071C  20 20			     db	     '	'
   5474	071E  00			     db	     0
   5475	071F  20			     db	     ' '
   5476	0720  00			     db	     0
   5477	0721  20 20			     db	     '	'
   5478	0723  00			     db	     0
   5479	0724  45 72 72 6F 20 65	6D+	     db	     'Erro em kill: parametro nao fornecido!'
   5480	      20 6B 69 6C 6C 3A	20+
   5481	      70 61 72 61 6D 65	74+
   5482	      72 6F 20 6E 61 6F	20+
   5483	      66 6F 72 6E 65 63	69+
   5484	      64 6F 21
   5485	074A  0A			     db	     10
   5486	074B  00			     db	     0
   5487	074C  6B 69 6C 6C 3A 20	69+	     db	     'kill: impossivel matar o processo/thread'
   5488	      6D 70 6F 73 73 69	76+
   5489	      65 6C 20 6D 61 74	61+
   5490	      72 20 6F 20 70 72	6F+
   5491	      63 65 73 73 6F 2F	74+
   5492	      68 72 65 61 64
   5493	0774  0A			     db	     10
   5494	0775  00			     db	     0
   5495	0776  00			     db	     0
   5496	0777  45 72 72 6F 20 65	6D+	     db	     'Erro em set: nao ha espaco para novas variaveis!'
   5497	      20 73 65 74 3A 20	6E+
   5498	      61 6F 20 68 61 20	65+
   5499	      73 70 61 63 6F 20	70+
   5500	      61 72 61 20 6E 6F	76+
   5501	      61 73 20 76 61 72	69+
   5502	      61 76 65 69 73 21
   5503	07A7  0A			     db	     10
   5504	07A8  00			     db	     0
   5505	07A9  45 72 72 6F 20 65	6D+	     db	     'Erro em set: o tamanho do	nome da	variavel e muito grande!'
   5506	      20 73 65 74 3A 20	6F+
   5507	      20 74 61 6D 61 6E	68+
   5508	      6F 20 64 6F 20 6E	6F+
   5509	      6D 65 20 64 61 20	76+
   5510	      61 72 69 61 76 65	6C+
   5511	      20 65 20 6D 75 69	74+
   5512	      6F 20 67 72 61 6E	64+
   5513	      65 21
   5514	07E3  0A			     db	     10
   5515	07E4  00			     db	     0
   5516	07E5  45 72 72 6F 20 65	6D+	     db	     'Erro em set: o tamanho do	conteudo da variavel e muito grande'
   5517	      20 73 65 74 3A 20	6F+
   5518	      20 74 61 6D 61 6E	68+
   5519	      6F 20 64 6F 20 63	6F+
   5520	      6E 74 65 75 64 6F	20+
   5521	      64 61 20 76 61 72	69+
   5522	      61 76 65 6C 20 65	20+
   5523	      6D 75 69 74 6F 20	67+
   5524	      72 61 6E 64 65
   5525	0822  21			     db	     '!'
   5526	0823  0A			     db	     10
   5527	0824  00			     db	     0
   5528	0825  45 72 72 6F 20 65	6D+	     db	     'Erro em set: argumentos demais na	linha de comando!'
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 98
command.ASM



   5529	      20 73 65 74 3A 20	61+
   5530	      72 67 75 6D 65 6E	74+
   5531	      6F 73 20 64 65 6D	61+
   5532	      69 73 20 6E 61 20	6C+
   5533	      69 6E 68 61 20 64	65+
   5534	      20 63 6F 6D 61 6E	64+
   5535	      6F 21
   5536	0858  0A			     db	     10
   5537	0859  00			     db	     0
   5538	085A  45 72 72 6F 20 65	6D+	     db	     'Erro em unset: numero invalido de	argumentos!'
   5539	      20 75 6E 73 65 74	3A+
   5540	      20 6E 75 6D 65 72	6F+
   5541	      20 69 6E 76 61 6C	69+
   5542	      64 6F 20 64 65 20	61+
   5543	      72 67 75 6D 65 6E	74+
   5544	      6F 73 21
   5545	0887  0A			     db	     10
   5546	0888  00			     db	     0
   5547	0889  45 72 72 6F 20 65	6D+	     db	     'Erro em unset: variavel inexistente!'
   5548	      20 75 6E 73 65 74	3A+
   5549	      20 76 61 72 69 61	76+
   5550	      65 6C 20 69 6E 65	78+
   5551	      69 73 74 65 6E 74	65+
   5552	      21
   5553	08AD  0A			     db	     10
   5554	08AE  00			     db	     0
   5555	08AF  2D 6E			     db	     '-n'
   5556	08B1  00			     db	     0
   5557	08B2  DA			     db	     -38
   5558	08B3  C4			     db	     -60
   5559	08B4  C4			     db	     -60
   5560	08B5  20 54 68 72 65 61	64+	     db	     ' Thread '
   5561	      20
   5562	08BD  C4			     db	     -60
   5563	08BE  C4			     db	     -60
   5564	08BF  C4			     db	     -60
   5565	08C0  C4			     db	     -60
   5566	08C1  BF			     db	     -65
   5567	08C2  00			     db	     0
   5568	08C3  B3			     db	     -77
   5569	08C4  20 50 49 44 20 20	3D+	     db	     ' PID  =	    '
   5570	      20 20 20 20 20 20	20
   5571	08D2  B3			     db	     -77
   5572	08D3  00			     db	     0
   5573	08D4  B3			     db	     -77
   5574	08D5  20 45 78 65 63 75	63+	     db	     ' Execucao:    '
   5575	      61 6F 3A 20 20 20	20
   5576	08E3  B3			     db	     -77
   5577	08E4  00			     db	     0
   5578	08E5  B3			     db	     -77
   5579	08E6  20 20 20 20 20 20	20+	     db	     '		    '
   5580	      20 20 20 20 20 20	20
   5581	08F4  B3			     db	     -77
   5582	08F5  00			     db	     0
   5583	08F6  C0			     db	     -64
   5584	08F7  C4			     db	     -60
   5585	08F8  C4			     db	     -60
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 99
command.ASM



   5586	08F9  C4			     db	     -60
   5587	08FA  C4			     db	     -60
   5588	08FB  C4			     db	     -60
   5589	08FC  C4			     db	     -60
   5590	08FD  C4			     db	     -60
   5591	08FE  C4			     db	     -60
   5592	08FF  C4			     db	     -60
   5593	0900  C4			     db	     -60
   5594	0901  C4			     db	     -60
   5595	0902  C4			     db	     -60
   5596	0903  C4			     db	     -60
   5597	0904  C4			     db	     -60
   5598	0905  D9			     db	     -39
   5599	0906  00			     db	     0
   5600	0907  45 72 72 6F 20 65	6D+	     db	     'Erro em demo: numero invalido de argumentos!'
   5601	      20 64 65 6D 6F 3A	20+
   5602	      6E 75 6D 65 72 6F	20+
   5603	      69 6E 76 61 6C 69	64+
   5604	      6F 20 64 65 20 61	72+
   5605	      67 75 6D 65 6E 74	6F+
   5606	      73 21
   5607	0933  0A			     db	     10
   5608	0934  00			     db	     0
   5609	0935  45 72 72 6F 20 65	6D+	     db	     'Erro em demo: fork() nao conseguiu criar thread!'
   5610	      20 64 65 6D 6F 3A	20+
   5611	      66 6F 72 6B 28 29	20+
   5612	      6E 61 6F 20 63 6F	6E+
   5613	      73 65 67 75 69 75	20+
   5614	      63 72 69 61 72 20	74+
   5615	      68 72 65 61 64 21
   5616	0965  0A			     db	     10
   5617	0966  00			     db	     0
   5618	0967  45 72 72 6F 20 65	6D+	     db	     'Erro em waitpid: numero invalido de argumentos!'
   5619	      20 77 61 69 74 70	69+
   5620	      64 3A 20 6E 75 6D	65+
   5621	      72 6F 20 69 6E 76	61+
   5622	      6C 69 64 6F 20 64	65+
   5623	      20 61 72 67 75 6D	65+
   5624	      6E 74 6F 73 21
   5625	0996  0A			     db	     10
   5626	0997  00			     db	     0
   5627	0998  50 72 6F 63 65 73	73+	     db	     'Processo '
   5628	      6F 20
   5629	09A1  00			     db	     0
   5630	09A2  20 65 6E 63 65 72	72+	     db	     ' encerrado com codigo de fim '
   5631	      61 64 6F 20 63 6F	6D+
   5632	      20 63 6F 64 69 67	6F+
   5633	      20 64 65 20 66 69	6D+
   5634	      20
   5635	09BF  00			     db	     0
   5636	09C0  21			     db	     '!'
   5637	09C1  0A			     db	     10
   5638	09C2  00			     db	     0
   5639	09C3  50 72 6F 63 65 73	73+	     db	     'Processo '
   5640	      6F 20
   5641	09CC  00			     db	     0
   5642	09CD  20 65 6E 63 65 72	72+	     db	     ' encerrado com codigo de fim '
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 100
command.ASM



   5643	      61 64 6F 20 63 6F	6D+
   5644	      20 63 6F 64 69 67	6F+
   5645	      20 64 65 20 66 69	6D+
   5646	      20
   5647	09EA  00			     db	     0
   5648	09EB  21			     db	     '!'
   5649	09EC  0A			     db	     10
   5650	09ED  00			     db	     0
   5651	09EE  53 65 6D 61 70 68	6F+	     db	     'Semaphores:'
   5652	      72 65 73 3A
   5653	09F9  0A			     db	     10
   5654	09FA  00			     db	     0
   5655	09FB  2D 20 69 64 3D		     db	     '-	id='
   5656	0A00  00			     db	     0
   5657	0A01  20 76 61 6C 75 65	3D	     db	     ' value='
   5658	0A08  00			     db	     0
   5659	0A09  20 71 75 65 75 65	3D	     db	     ' queue='
   5660	0A10  00			     db	     0
   5661	0A11  54 4F 54 41 4C 3D		     db	     'TOTAL='
   5662	0A17  00			     db	     0
   5663	0A18  0A			     db	     10
   5664	0A19  0A			     db	     10
   5665	0A1A  00			     db	     0
   5666	0A1B  45 72 72 6F 20 65	6D+	     db	     'Erro em semcreate: numero	invalido de argumentos!'
   5667	      20 73 65 6D 63 72	65+
   5668	      61 74 65 3A 20 6E	75+
   5669	      6D 65 72 6F 20 69	6E+
   5670	      76 61 6C 69 64 6F	20+
   5671	      64 65 20 61 72 67	75+
   5672	      6D 65 6E 74 6F 73	21
   5673	0A4C  0A			     db	     10
   5674	0A4D  00			     db	     0
   5675	0A4E  53 65 6D 61 66 6F	72+	     db	     'Semaforo id='
   5676	      6F 20 69 64 3D
   5677	0A5A  00			     db	     0
   5678	0A5B  20 63 72 69 61 64	6F+	     db	     ' criado (value='
   5679	      20 28 76 61 6C 75	65+
   5680	      3D
   5681	0A6A  00			     db	     0
   5682	0A6B  29			     db	     ')'
   5683	0A6C  0A			     db	     10
   5684	0A6D  00			     db	     0
   5685	0A6E  DA			     db	     -38
   5686	0A6F  C4			     db	     -60
   5687	0A70  C4			     db	     -60
   5688	0A71  20 54 68 72 65 61	64+	     db	     ' Thread '
   5689	      20
   5690	0A79  C4			     db	     -60
   5691	0A7A  C4			     db	     -60
   5692	0A7B  C4			     db	     -60
   5693	0A7C  C4			     db	     -60
   5694	0A7D  BF			     db	     -65
   5695	0A7E  00			     db	     0
   5696	0A7F  B3			     db	     -77
   5697	0A80  20 50 49 44 20 20	3D+	     db	     ' PID  =	    '
   5698	      20 20 20 20 20 20	20
   5699	0A8E  B3			     db	     -77
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 101
command.ASM



   5700	0A8F  00			     db	     0
   5701	0A90  B3			     db	     -77
   5702	0A91  20 45 78 65 63 75	63+	     db	     ' Execucao:    '
   5703	      61 6F 3A 20 20 20	20
   5704	0A9F  B3			     db	     -77
   5705	0AA0  00			     db	     0
   5706	0AA1  B3			     db	     -77
   5707	0AA2  20 20 20 20 20 20	20+	     db	     '		    '
   5708	      20 20 20 20 20 20	20
   5709	0AB0  B3			     db	     -77
   5710	0AB1  00			     db	     0
   5711	0AB2  C0			     db	     -64
   5712	0AB3  C4			     db	     -60
   5713	0AB4  C4			     db	     -60
   5714	0AB5  C4			     db	     -60
   5715	0AB6  C4			     db	     -60
   5716	0AB7  C4			     db	     -60
   5717	0AB8  C4			     db	     -60
   5718	0AB9  C4			     db	     -60
   5719	0ABA  C4			     db	     -60
   5720	0ABB  C4			     db	     -60
   5721	0ABC  C4			     db	     -60
   5722	0ABD  C4			     db	     -60
   5723	0ABE  C4			     db	     -60
   5724	0ABF  C4			     db	     -60
   5725	0AC0  C4			     db	     -60
   5726	0AC1  D9			     db	     -39
   5727	0AC2  00			     db	     0
   5728	0AC3  45 72 72 6F 20 65	6D+	     db	     'Erro em semtest: numero invalido de argumentos!'
   5729	      20 73 65 6D 74 65	73+
   5730	      74 3A 20 6E 75 6D	65+
   5731	      72 6F 20 69 6E 76	61+
   5732	      6C 69 64 6F 20 64	65+
   5733	      20 61 72 67 75 6D	65+
   5734	      6E 74 6F 73 21
   5735	0AF2  0A			     db	     10
   5736	0AF3  00			     db	     0
   5737	0AF4  45 72 72 6F 20 65	6D+	     db	     'Erro em demo: fork() nao conseguiu criar thread!'
   5738	      20 64 65 6D 6F 3A	20+
   5739	      66 6F 72 6B 28 29	20+
   5740	      6E 61 6F 20 63 6F	6E+
   5741	      73 65 67 75 69 75	20+
   5742	      63 72 69 61 72 20	74+
   5743	      68 72 65 61 64 21
   5744	0B24  0A			     db	     10
   5745	0B25  00			     db	     0
   5746	0B26  45 72 72 6F 20 65	6D+	     db	     'Erro em semtest: numero invalido de argumentos!'
   5747	      20 73 65 6D 74 65	73+
   5748	      74 3A 20 6E 75 6D	65+
   5749	      72 6F 20 69 6E 76	61+
   5750	      6C 69 64 6F 20 64	65+
   5751	      20 61 72 67 75 6D	65+
   5752	      6E 74 6F 73 21
   5753	0B55  0A			     db	     10
   5754	0B56  00			     db	     0
   5755	0B57  45 72 72 6F 20 65	6D+	     db	     'Erro em semtest: numero invalido de argumentos!'
   5756	      20 73 65 6D 74 65	73+
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 102
command.ASM



   5757	      74 3A 20 6E 75 6D	65+
   5758	      72 6F 20 69 6E 76	61+
   5759	      6C 69 64 6F 20 64	65+
   5760	      20 61 72 67 75 6D	65+
   5761	      6E 74 6F 73 21
   5762	0B86  0A			     db	     10
   5763	0B87  00			     db	     0
   5764	0B88  73 74 6F 70 3A 20	6E+	     db	     'stop: nenhum parametro foi fornecido'
   5765	      65 6E 68 75 6D 20	70+
   5766	      61 72 61 6D 65 74	72+
   5767	      6F 20 66 6F 69 20	66+
   5768	      6F 72 6E 65 63 69	64+
   5769	      6F
   5770	0BAC  0A			     db	     10
   5771	0BAD  00			     db	     0
   5772	0BAE  73 74 6F 70 3A 20	69+	     db	     'stop: impossivel suspender a thread'
   5773	      6D 70 6F 73 73 69	76+
   5774	      65 6C 20 73 75 73	70+
   5775	      65 6E 64 65 72 20	61+
   5776	      20 74 68 72 65 61	64
   5777	0BD1  0A			     db	     10
   5778	0BD2  00			     db	     0
   5779	0BD3  73 74 6F 70 3A 20	6E+	     db	     'stop: nenhum parametro foi fornecido'
   5780	      65 6E 68 75 6D 20	70+
   5781	      61 72 61 6D 65 74	72+
   5782	      6F 20 66 6F 69 20	66+
   5783	      6F 72 6E 65 63 69	64+
   5784	      6F
   5785	0BF7  0A			     db	     10
   5786	0BF8  00			     db	     0
   5787	0BF9  72 65 73 75 6D 65	3A+	     db	     'resume: impossivel reiniciar a thread'
   5788	      20 69 6D 70 6F 73	73+
   5789	      69 76 65 6C 20 72	65+
   5790	      69 6E 69 63 69 61	72+
   5791	      20 61 20 74 68 72	65+
   5792	      61 64
   5793	0C1E  0A			     db	     10
   5794	0C1F  00			     db	     0
   5795	0C20			     _DATA   ends
   5796	14D9			     _TEXT   segment byte public 'CODE'
   5797	14D9			     _TEXT   ends
   5798					     public  _sem_aplic
   5799					     public  _semid
   5800					     extrn   _miniSO_sem:word
   5801				     _exitcode	     equ     exitcode
   5802				     _demo_linha     equ     demo_linha
   5803				     _demo   equ     demo
   5804					     extrn   _miniSO_thread:word
   5805				     _commands	     equ     commands
   5806				     _var    equ     var
   5807				     _num_var	     equ     num_var
   5808				     _history_pos    equ     history_pos
   5809				     _history_nxt    equ     history_nxt
   5810				     _history_ini    equ     history_ini
   5811				     _history_len    equ     history_len
   5812				     _history	     equ     history
   5813				     _argv   equ     argv
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 103
command.ASM



   5814				     _argline	     equ     argline
   5815				     _palavra	     equ     palavra
   5816				     _cmdline	     equ     cmdline
   5817				     _end_command    equ     end_command
   5818					     extrn   _resume:near
   5819					     extrn   _stop:near
   5820					     extrn   _semdestroy:near
   5821					     extrn   _semdown:near
   5822					     extrn   _semup:near
   5823					     extrn   _semcreate:near
   5824					     extrn   _getpid:near
   5825					     extrn   _exit:near
   5826					     extrn   _waitpid:near
   5827					     extrn   _wait:near
   5828					     extrn   _kill:near
   5829					     extrn   _fork:near
   5830					     extrn   _reboot:near
   5831					     extrn   _inttostr:near
   5832					     extrn   _unsignedtostr:near
   5833					     extrn   _atoi:near
   5834					     extrn   _strlen:near
   5835					     extrn   _strcmp:near
   5836					     extrn   _strcpy:near
   5837					     extrn   _gettime:near
   5838					     extrn   _getdate:near
   5839					     extrn   _gotoxy:near
   5840					     extrn   _wherey:near
   5841					     extrn   _wherex:near
   5842					     extrn   _setcolor:near
   5843					     extrn   _getcolor:near
   5844					     extrn   _putstrxy:near
   5845					     extrn   _putstr:near
   5846					     extrn   _clrscr:near
   5847					     extrn   _getch:near
   5848					     extrn   _putch:near
   5849					     public  _cmd_resume
   5850					     public  _cmd_stop
   5851					     public  _cmd_semdestroy
   5852					     public  _cmd_semup
   5853					     public  _cmd_semtest
   5854					     public  _cmd_semcreate
   5855					     public  _cmd_semls
   5856					     public  _cmd_waitpid
   5857					     public  _cmd_wait
   5858					     public  _cmd_echo
   5859					     public  _cmd_unset
   5860					     public  _cmd_set
   5861					     public  _cmd_demo
   5862					     public  _cmd_kill
   5863					     public  _cmd_ps
   5864					     public  _cmd_ver
   5865					     public  _cmd_cls
   5866					     public  _cmd_time
   5867					     public  _cmd_date
   5868					     public  _cmd_help
   5869					     public  _cmd_reboot
   5870					     public  _cmd_exit
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 104
command.ASM



   5871				     _command_var_set	     equ     command_var_set
   5872				     _command_var_value	     equ     command_var_value
   5873				     _command_var_unset	     equ     command_var_unset
   5874				     _command_var_search     equ     command_var_search
   5875				     _command_var_list	     equ     command_var_list
   5876				     _command_var_nextfree   equ     command_var_nextfree
   5877				     _command_var_init	     equ     command_var_init
   5878				     _command_showprompt     equ     command_showprompt
   5879				     _command_backspace	     equ     command_backspace
   5880					     public  _command
   5881				     _s@     equ     s@
   5882					     end
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 105
Symbol Table




Symbol Name		Type   Value			   Cref	(defined at #)

??DATE			Text   "11/25/15"
??FILENAME		Text   "command	"
??TIME			Text   "20:16:31"
??VERSION		Number 030A
@10@114			Near   _TEXT:0755		   1819	 #1826
@10@170			Near   _TEXT:076A		   1836	 #1842
@10@254			Near   _TEXT:078B		   1866	 #1872
@10@282			Near   _TEXT:07A3		   1856	 #1886
@10@310			Near   _TEXT:07BF		   1825	 #1906
@10@86			Near   _TEXT:0753		   #1824  1841	1871  1905
@11@58			Near   _TEXT:07D4		   1940	 #1941
@12@58			Near   _TEXT:07EB		   1974	 #1975
@13@114			Near   _TEXT:0838		   2016	 #2050
@13@170			Near   _TEXT:0841		   2058	 #2059
@13@58			Near   _TEXT:0809		   #2017  2052
@14@58			Near   _TEXT:08DA		   2197	 #2198
@15@58			Near   _TEXT:097A		   2338	 #2339
@16@58			Near   _TEXT:0992		   2375	 #2376
@17@58			Near   _TEXT:09C1		   2432	 #2433
@18@1010		Near   _TEXT:0C01		   2484	 #2916
@18@1066		Near   _TEXT:0C0D		   2927	 #2928
@18@114			Near   _TEXT:0A12		   #2517  2530
@18@142			Near   _TEXT:0A1A		   2516	 #2526
@18@198			Near   _TEXT:0A5C		   #2573  2586
@18@226			Near   _TEXT:0A64		   2572	 #2582
@18@282			Near   _TEXT:0AA6		   #2629  2642
@18@310			Near   _TEXT:0AAE		   2628	 #2638
@18@450			Near   _TEXT:0AE4		   #2674  2938
@18@478			Near   _TEXT:0AE8		   #2680  2692	2699  2706  2713  2720	2727  2734
@18@506			Near   _TEXT:0AF0		   #2686  2939
@18@534			Near   _TEXT:0AF6		   #2693  2940
@18@562			Near   _TEXT:0AFC		   #2700  2941
@18@58			Near   _TEXT:09E5		   #2485  2919
@18@590			Near   _TEXT:0B02		   #2707  2942
@18@618			Near   _TEXT:0B08		   #2714  2943
@18@646			Near   _TEXT:0B0E		   #2721  2944
@18@674			Near   _TEXT:0B14		   #2728  2945
@18@702			Near   _TEXT:0B1A		   2671	 2685  #2735
@18@730			Near   _TEXT:0B4A		   #2770  2783
@18@758			Near   _TEXT:0B52		   2769	 #2779
@18@814			Near   _TEXT:0B94		   #2827  2840
@18@842			Near   _TEXT:0B9C		   2826	 #2836
@18@898			Near   _TEXT:0BDE		   #2884  2897
@18@926			Near   _TEXT:0BE6		   2883	 #2893
@18@982			Near   _TEXT:0C00		   2495	 #2914
@18@C1170		Word   _TEXT:0C11		   2673	 #2937
@19@114			Near   _TEXT:0C3D		   #2985  3024
@19@142			Near   _TEXT:0C3F		   2970	 #2987
@19@198			Near   _TEXT:0C61		   3010	 #3017
@19@226			Near   _TEXT:0C65		   2986	 #3025
@19@86			Near   _TEXT:0C34		   #2976  3016
@1@1094			Near   _TEXT:01D6		   507	#522
@1@1150			Near   _TEXT:01E6		   521	528  #537
@1@1178			Near   _TEXT:01E8		   502	#544
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 106
Symbol Table



@1@1262			Near   _TEXT:0203		   561	#566
@1@1290			Near   _TEXT:020A		   550	#575
@1@1374			Near   _TEXT:0227		   592	#598
@1@142			Near   _TEXT:00FD		   #309	 314
@1@1430			Near   _TEXT:0234		   604	#610
@1@1458			Near   _TEXT:023A		   543	574  582  597  609  #616
@1@1514			Near   _TEXT:0242		   #627	 640
@1@1542			Near   _TEXT:0246		   626	#638
@1@1598			Near   _TEXT:0278		   492	625  #675
@1@1626			Near   _TEXT:027B		   #682	 1265
@1@1766			Near   _TEXT:02A6		   706	#712
@1@1794			Near   _TEXT:02AC		   711	#718
@1@1822			Near   _TEXT:02AE		   699	#723
@1@1878			Near   _TEXT:02BF		   733	#738
@1@1934			Near   _TEXT:02CE		   722	744  #749
@1@1962			Near   _TEXT:02D0		   #751	 765
@1@1990			Near   _TEXT:02D4		   750	#763
@1@2074			Near   _TEXT:030D		   689	693  771  #805
@1@2102			Near   _TEXT:030F		   388	463  484  681  811  #812
@1@2130			Near   _TEXT:0312		   #818	 1280
@1@2158			Near   _TEXT:0337		   #849	 1014
@1@2186			Near   _TEXT:0339		   #851	 864  867
@1@2214			Near   _TEXT:033C		   850	#858
@1@226			Near   _TEXT:010D		   312	#316
@1@2298			Near   _TEXT:0357		   861	#868
@1@2354			Near   _TEXT:0363		   874	#879
@1@2382			Near   _TEXT:0367		   #885	 907
@1@2410			Near   _TEXT:0375		   884	#898
@1@2494			Near   _TEXT:0390		   901	904  #908
@1@254			Near   _TEXT:0111		   #318	 1279
@1@2578			Near   _TEXT:03D3		   935	#960
@1@2606			Near   _TEXT:03D5		   918	959  #966
@1@2662			Near   _TEXT:0411		   1003	 #1008
@1@2690			Near   _TEXT:0414		   965	#1013
@1@2718			Near   _TEXT:0417		   878	1007  #1015
@1@2774			Near   _TEXT:0423		   1022	 #1031
@1@282			Near   _TEXT:0114		   #324	 1278
@1@2830			Near   _TEXT:0448		   1052	 #1058
@1@2886			Near   _TEXT:0457		   1064	 #1070
@1@2914			Near   _TEXT:045B		   1057	 1069  #1076
@1@2970			Near   _TEXT:046A		   1082	 #1088
@1@2998			Near   _TEXT:046E		   1087	 #1094
@1@3026			Near   _TEXT:0477		   #1105  1133
@1@3082			Near   _TEXT:049E		   1120	 #1129
@1@3110			Near   _TEXT:049F		   1104	 #1131
@1@3138			Near   _TEXT:04A4		   1128	 #1134
@1@3194			Near   _TEXT:04E3		   1143	 #1182
@1@3222			Near   _TEXT:04ED		   1181	 #1193
@1@3278			Near   _TEXT:04F7		   1199	 #1204
@1@3306			Near   _TEXT:04FB		   315	#1214
@1@3362			Near   _TEXT:0511		   292	323  344  366  817  1030  1213	1220  #1235
@1@338			Near   _TEXT:011C		   330	#339
@1@366			Near   _TEXT:011F		   #345	 1281
@1@394			Near   _TEXT:0121		   #347	 361
@1@422			Near   _TEXT:0125		   346	#359
@1@478			Near   _TEXT:012C		   #367	 1277
@1@562			Near   _TEXT:013F		   #382	 387
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 107
Symbol Table



@1@58			Near   _TEXT:00EA		   #293	 1238
@1@646			Near   _TEXT:014F		   385	#389
@1@674			Near   _TEXT:0153		   #391	 1262
@1@702			Near   _TEXT:015B		   #398	 411
@1@730			Near   _TEXT:015F		   397	#409
@1@786			Near   _TEXT:016F		   #426	 454
@1@842			Near   _TEXT:0194		   425	#452
@1@898			Near   _TEXT:01A0		   #464	 1264
@1@954			Near   _TEXT:01A8		   470	#479
@1@982			Near   _TEXT:01AB		   #485	 1263
@1@C3234		Word   _TEXT:0531		   308	#1266
@1@C3330		Word   _TEXT:0521		   381	#1253
@20@114			Near   _TEXT:0C81		   #3063  3161
@20@142			Near   _TEXT:0C83		   3053	 #3065
@20@198			Near   _TEXT:0C9E		   3071	 #3084
@20@254			Near   _TEXT:0CBA		   3089	 #3101
@20@282			Near   _TEXT:0CBF		   3083	 3100  #3107
@20@366			Near   _TEXT:0CD1		   #3117  3180
@20@394			Near   _TEXT:0CD7		   #3125  3179
@20@422			Near   _TEXT:0CDD		   #3134  3178
@20@450			Near   _TEXT:0CE3		   #3144  3177
@20@478			Near   _TEXT:0CE7		   3124	 3133  3143  #3152
@20@506			Near   _TEXT:0CF2		   3114	 #3162
@20@534			Near   _TEXT:0CF4		   3064	 #3164
@20@86			Near   _TEXT:0C7F		   #3061  3163
@20@C482		Word   _TEXT:0CFA		   3116	 #3176
@21@114			Near   _TEXT:0D1B		   #3211  3243
@21@142			Near   _TEXT:0D1D		   3196	 #3213
@21@198			Near   _TEXT:0D3A		   3229	 #3236
@21@226			Near   _TEXT:0D3E		   3212	 #3244
@21@86			Near   _TEXT:0D12		   #3202  3235
@22@114			Near   _TEXT:0D74		   3285	 #3291
@22@142			Near   _TEXT:0D7F		   3290	 #3301
@22@170			Near   _TEXT:0D84		   #3307  3338
@22@226			Near   _TEXT:0D8F		   3312	 #3315
@22@254			Near   _TEXT:0D97		   3314	 #3323
@22@310			Near   _TEXT:0DA8		   3306	 #3336
@22@338			Near   _TEXT:0DAD		   3273	 #3339
@22@394			Near   _TEXT:0DBB		   3346	 #3354
@22@422			Near   _TEXT:0DBF		   3359	 #3360
@23@114			Near   _TEXT:0E88		   3497	 #3526
@23@170			Near   _TEXT:0E92		   #3535  3565
@23@226			Near   _TEXT:0EBB		   3534	 #3563
@23@282			Near   _TEXT:0EC5		   #3572  3602
@23@338			Near   _TEXT:0EEE		   3571	 #3600
@23@394			Near   _TEXT:0EF8		   #3609  3639
@23@450			Near   _TEXT:0F21		   3608	 #3637
@23@506			Near   _TEXT:0F2B		   #3646  3676
@23@562			Near   _TEXT:0F54		   3645	 #3674
@23@58			Near   _TEXT:0E5F		   #3498  3528
@23@618			Near   _TEXT:0F5E		   #3683  3713
@23@674			Near   _TEXT:0F87		   3682	 #3711
@24@114			Near   _TEXT:0FB0		   #3759  3809
@24@142			Near   _TEXT:0FB2		   3744	 #3761
@24@198			Near   _TEXT:0FC4		   3771	 #3776
@24@254			Near   _TEXT:0FE8		   3795	 #3802
@24@282			Near   _TEXT:0FEC		   3760	 #3810
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 108
Symbol Table



@24@86			Near   _TEXT:0FA7		   #3750  3801
@25@114			Near   _TEXT:100A		   3835	 #3851
@25@142			Near   _TEXT:1078		   3850	 #3941
@25@86			Near   _TEXT:1008		   #3849  3940
@26@58			Near   _TEXT:10EF		   4053	 #4054
@27@114			Near   _TEXT:11AE		   4115	 #4218
@27@142			Near   _TEXT:11AF		   4105	 #4220
@27@198			Near   _TEXT:11E5		   4266	 #4267
@27@58			Near   _TEXT:111A		   #4106  4223
@28@114			Near   _TEXT:1206		   #4311  4407
@28@142			Near   _TEXT:1208		   4296	 #4313
@28@198			Near   _TEXT:1226		   4336	 #4338
@28@226			Near   _TEXT:1274		   4312	 #4408
@28@86			Near   _TEXT:1203		   #4309  4337
@29@114			Near   _TEXT:1337		   4529	 #4558
@29@170			Near   _TEXT:1347		   #4569  4600
@29@226			Near   _TEXT:1370		   4568	 #4598
@29@58			Near   _TEXT:130E		   #4530  4560
@30@114			Near   _TEXT:1399		   #4648  4698
@30@142			Near   _TEXT:139B		   4633	 #4650
@30@198			Near   _TEXT:13BE		   4670	 #4675
@30@254			Near   _TEXT:13D1		   4684	 #4691
@30@282			Near   _TEXT:13D5		   4649	 #4699
@30@86			Near   _TEXT:1390		   #4639  4690
@31@114			Near   _TEXT:13F2		   4721	 #4737
@31@142			Near   _TEXT:140C		   4736	 #4756
@31@86			Near   _TEXT:13F0		   #4735  4755
@32@114			Near   _TEXT:142B		   4779	 #4795
@32@142			Near   _TEXT:1445		   4794	 #4814
@32@86			Near   _TEXT:1429		   #4793  4813
@33@114			Near   _TEXT:1465		   #4860  4901
@33@142			Near   _TEXT:1467		   4845	 #4862
@33@198			Near   _TEXT:1489		   4886	 #4893
@33@226			Near   _TEXT:148D		   4861	 #4902
@33@86			Near   _TEXT:145C		   #4851  4892
@34@114			Near   _TEXT:14AD		   #4948  4989
@34@142			Near   _TEXT:14AF		   4933	 #4950
@34@198			Near   _TEXT:14D1		   4974	 #4981
@34@226			Near   _TEXT:14D5		   4949	 #4990
@34@86			Near   _TEXT:14A4		   #4939  4980
@3@86			Near   _TEXT:05AF		   1367	 #1396
@4@114			Near   _TEXT:05DF		   1426	 #1445
@4@58			Near   _TEXT:05C2		   #1427  1447
@5@114			Near   _TEXT:05FB		   1473	 #1481
@5@142			Near   _TEXT:05FF		   #1487  1506
@5@198			Near   _TEXT:0613		   1496	 #1502
@5@226			Near   _TEXT:0614		   1486	 #1504
@5@282			Near   _TEXT:061B		   1480	 #1508
@5@58			Near   _TEXT:05F6		   #1474  1507
@5@86			Near   _TEXT:05F9		   #1479  1501
@6@114			Near   _TEXT:0681		   1548	 #1602
@6@142			Near   _TEXT:0682		   1538	 #1604
@6@58			Near   _TEXT:062E		   #1539  1606
@7@114			Near   _TEXT:069E		   1633	 #1641
@7@142			Near   _TEXT:06A2		   #1647  1672
@7@198			Near   _TEXT:06C2		   1662	 #1668
@7@226			Near   _TEXT:06C3		   1646	 #1670
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 109
Symbol Table



@7@282			Near   _TEXT:06CA		   1640	 #1674
@7@58			Near   _TEXT:0699		   #1634  1673
@7@86			Near   _TEXT:069C		   #1639  1667
@8@114			Near   _TEXT:06E8		   1708	 #1715
@8@142			Near   _TEXT:070C		   1714	 #1741
@8@86			Near   _TEXT:06E6		   #1713  1740
@9@114			Near   _TEXT:072B		   1773	 #1781
@9@142			Near   _TEXT:0739		   1780	 #1791
@9@86			Near   _TEXT:0729		   #1779  1790
@@0			Near   _TEXT:01B5		   491	#493
@@1			Near   _TEXT:0285		   688	#690
@@2			Near   _TEXT:028F		   692	#694
@@3			Near   _TEXT:051B		   1237	 #1239
@@4			Near   _TEXT:09F8		   2494	 #2496
@@5			Near   _TEXT:0C09		   2918	 #2920
@@6			Near   _TEXT:112A		   4114	 #4116
@@7			Near   _TEXT:11B7		   4222	 #4224
@CPU			Text   0101H
@CURSEG			Text   _TEXT			   #10	#14  #18  #22  #103  #2443  #2446  #3371  #3379	 #5000	#5028	  +
							   #5796
@FILENAME		Text   COMMAND
@WORDSIZE		Text   2			   #10	#14  #18  #22  #103  #2443  #2446  #3371  #3379	 #5000	#5028	  +
							   #5796
ARGLINE			Byte   _BSS:0388		   977	985  #5017
ARGV			Dword  _BSS:0348		   989	990  1115  1116	 1147  #5015
B@			Byte   _BSS:0000		   #19
B@W			Word   _BSS:0000		   #20	2502  2510  2535  2558	2566  2591  2614  2622	2647  2755  2763  +
							   2788	 2812  2820  2845  2869	 2877  2902
CMDLINE			Byte   _BSS:0606		   652	660  669  782  790  799	 834  840  1038	 1233  #5021
COMMANDS		Word   _DATA:0002		   #26	1114  1154  2026  2038
COMMAND_BACKSPACE	Near   _TEXT:0545		   338	358  408  478  637  762	 #1286
COMMAND_SHOWPROMPT	Near   _TEXT:056F		   291	459  1026  1203	 #1343
COMMAND_VAR_INIT	Near   _TEXT:05BB		   264	#1416
COMMAND_VAR_LIST	Near   _TEXT:061D		   #1520  3057
COMMAND_VAR_NEXTFREE	Near   _TEXT:05EC		   #1463  1860
COMMAND_VAR_SEARCH	Near   _TEXT:068C		   #1621  1700	1765  1848
COMMAND_VAR_SET		Near   _TEXT:073C		   274	285  1176  #1803  3080	3097
COMMAND_VAR_UNSET	Near   _TEXT:06CD		   #1688  3221
COMMAND_VAR_VALUE	Near   _TEXT:070F		   925	1357  #1753
D@			Byte   _DATA:0000		   #15
D@W			Word   _DATA:0000		   #16
DEMO			Near   _TEXT:0DC5		   #3384  3790
DEMO_LINHA		Word   _DATA:0098		   #3372  3397	3766  3770  3775  4435	4665  4669  4674
END_COMMAND		Word   _BSS:0625		   129	1198  1236  1969  #5023
EXITCODE		Word   _DATA:009A		   #3375  3402	3786
HISTORY			Byte   _BSS:0212		   439	649  779  1044	#5013
HISTORY_INI		Word   _BSS:020E		   133	431  581  591  1063  1068  1075	 #5009
HISTORY_LEN		Word   _BSS:0210		   453	490  501  687  698  703	 1051  1056  #5011
HISTORY_NXT		Word   _BSS:020C		   137	511  554  743  1041  1081  1086	 1093  #5007
HISTORY_POS		Word   _BSS:020A		   141	396  506  513  527  532	 549  556  560	565  580  590  596  603	  +
							   608	615  646  691  705  710	 717  728  732	737  742  748  770  776	  +
							   823	#5005
NUM_VAR			Word   _DATA:0000		   #23	1452  1472  1735
PALAVRA			Byte   _BSS:05E7		   892	913  917  923  942  950	 973  #5019
S@			Byte   _DATA:009C		   27  28  30  31  33  34  36  37  39  40  42  43  45  46  48  49  51  52 +
							   54  55  57  58  60  61  63  64  66  67  69  70  72  73  75  76  78  79 +
							   81  82  84  85  87  88  90  91  93  94  96  97  99  100  165	 175  185 +
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 110
Symbol Table



							   199	209  215  221  235  245	 255  269  272	280  283  1174	1188  1355+
							   2007	 2407  2416  2475  2544	 2600  2656  2679  2691	 2698  2705  2712 +
							   2719	 2726  2733  2741  2798	 2855  2975  3015  3076	 3123  3132  3142 +
							   3151	 3201  3234  3278  3409	 3420  3433  3446  3459	 3749  3800  3840 +
							   3877	 3904  3931  3990  4017	 4044  4096  4121  4151	 4181  4230  4257 +
							   4301	 4344  4371  4398  4442	 4453  4466  4479  4492	 4638  4689  4726 +
							   4784	 4850  4891  4938  4979	 #5029
VAR			Word   _BSS:0016		   1435	 1443  1495  1547  1556	 1582  1655  1723  1731	 1788  1882  1897 +
							   #5003
_ARGLINE		Alias  ARGLINE			   #5814
_ARGV			Alias  ARGV			   #5813
_ATOI			Near   ----:---- Extern		   2995	 3783  3859  4321  4658	 4745  4803  4871  4959	 #5833
_CLRSCR			Near   ----:---- Extern		   153	2370  #5846
_CMDLINE		Alias  CMDLINE			   #5816
_CMD_CLS		Near   _TEXT:0980		   44  47  #2353  5865
_CMD_DATE		Near   _TEXT:0845		   38  #2072  5867
_CMD_DEMO		Near   _TEXT:0F9A		   65  #3734  5861
_CMD_ECHO		Near   _TEXT:0D42		   74  #3256  5858
_CMD_EXIT		Near   _TEXT:07D8		   53  56  #1954  5870
_CMD_HELP		Near   _TEXT:07ED		   29  32  #1986  5868
_CMD_KILL		Near   _TEXT:0C21		   62  #2950  5862
_CMD_PS			Near   _TEXT:09C5		   59  #2451  5863
_CMD_REBOOT		Near   _TEXT:07C2		   50  #1918  5869
_CMD_RESUME		Near   _TEXT:1491		   101	#4915  5849
_CMD_SEMCREATE		Near   _TEXT:11EB		   86  #4281  5854
_CMD_SEMDESTROY		Near   _TEXT:1410		   95  #4768  5851
_CMD_SEMLS		Near   _TEXT:10F5		   83  #4068  5855
_CMD_SEMTEST		Near   _TEXT:1383		   89  #4622  5853
_CMD_SEMUP		Near   _TEXT:13D7		   92  #4710  5852
_CMD_SET		Near   _TEXT:0C69		   68  #3038  5860
_CMD_STOP		Near   _TEXT:1449		   98  #4826  5850
_CMD_TIME		Near   _TEXT:08E0		   41  #2212  5866
_CMD_UNSET		Near   _TEXT:0D02		   71  #3185  5859
_CMD_VER		Near   _TEXT:0996		   35  #2389  5864
_CMD_WAIT		Near   _TEXT:107D		   80  #3954  5857
_CMD_WAITPID		Near   _TEXT:0FEE		   77  #3821  5856
_COMMAND		Near   _TEXT:0000		   #108	 5880
_COMMANDS		Alias  COMMANDS			   #5805
_COMMAND_BACKSPACE	Alias  COMMAND_BACKSPACE	   #5879
_COMMAND_SHOWPROMPT	Alias  COMMAND_SHOWPROMPT	   #5878
_COMMAND_VAR_INIT	Alias  COMMAND_VAR_INIT		   #5877
_COMMAND_VAR_LIST	Alias  COMMAND_VAR_LIST		   #5875
_COMMAND_VAR_NEXTFREE	Alias  COMMAND_VAR_NEXTFREE	   #5876
_COMMAND_VAR_SEARCH	Alias  COMMAND_VAR_SEARCH	   #5874
_COMMAND_VAR_SET	Alias  COMMAND_VAR_SET		   #5871
_COMMAND_VAR_UNSET	Alias  COMMAND_VAR_UNSET	   #5873
_COMMAND_VAR_VALUE	Alias  COMMAND_VAR_VALUE	   #5872
_DEMO			Alias  DEMO			   #5803
_DEMO_LINHA		Alias  DEMO_LINHA		   #5802
_END_COMMAND		Alias  END_COMMAND		   #5817
_EXIT			Near   ----:---- Extern		   3719	 4607  #5825
_EXITCODE		Alias  EXITCODE			   #5801
_FORK			Near   ----:---- Extern		   3792	 4681  #5829
_GETCH			Near   ----:---- Extern		   299	372  #5847
_GETCOLOR		Near   ----:---- Extern		   1371	 1532  #5843
_GETDATE		Near   ----:---- Extern		   2099	 #5838
_GETPID			Near   ----:---- Extern		   3472	 4505  #5824
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 111
Symbol Table



_GETTIME		Near   ----:---- Extern		   2236	 #5837
_GOTOXY			Near   ----:---- Extern		   1313	 1328  #5839
_HISTORY		Alias  HISTORY			   #5812
_HISTORY_INI		Alias  HISTORY_INI		   #5810
_HISTORY_LEN		Alias  HISTORY_LEN		   #5811
_HISTORY_NXT		Alias  HISTORY_NXT		   #5809
_HISTORY_POS		Alias  HISTORY_POS		   #5808
_INTTOSTR		Near   ----:---- Extern		   1165	 2504  2560  2616  2757	 2814  2871  3477  3889	 3916  4002  4029 +
							   4136	 4166  4196  4242  4356	 4383  4510  #5831
_KILL			Near   ----:---- Extern		   3003	 #5828
_MINISO_SEM		Word   ----:---- Extern		   4113	 4132  4162  4192  #5800
_MINISO_THREAD		Word   ----:---- Extern		   2493	 2556  2612  2668  2753	 2810  2867  #5804
_NUM_VAR		Alias  NUM_VAR			   #5807
_PALAVRA		Alias  PALAVRA			   #5815
_PUTCH			Near   ----:---- Extern		   418	449  829  1227	1321  1403  1566  1600	2047  2131  2162  2191	  +
							   2268	 2301  2332  2426  2524	 2580  2636  2777  2834	 2891  2912  3321 +
							   3352	 4212  #5848
_PUTSTR			Near   ----:---- Extern		   167	177  187  201  211  217	 223  237  247	257  441  662  792  1190  +
							   1385	 1558  1584  2009  2027	 2039  2123  2154  2183	 2260  2293  2324 +
							   2409	 2418  2477  2537  2546	 2593  2602  2649  2658	 2682  2743  2790 +
							   2800	 2847  2857  2904  2978	 3154  3204  3298  3332	 3752  3842  3879 +
							   3897	 3906  3924  3933  3992	 4010  4019  4037  4046	 4098  4123  4144 +
							   4153	 4174  4183  4204  4232	 4250  4259  4303  4346	 4364  4373  4391 +
							   4400	 4641  4728  4786  4853	 4941  #5845
_PUTSTRXY		Near   ----:---- Extern		   3414	 3427  3440  3453  3466	 3490  3523  3560  3597	 3634  3671  3708 +
							   4447	 4460  4473  4486  4499	 4523  4555  4595  #5844
_REBOOT			Near   ----:---- Extern		   1935	 #5830
_RESUME			Near   ----:---- Extern		   4967	 #5818
_S@			Alias  S@			   #5881
_SEMCREATE		Near   ----:---- Extern		   4329	 #5823
_SEMDESTROY		Near   ----:---- Extern		   4811	 #5820
_SEMDOWN		Near   ----:---- Extern		   4566	 #5821
_SEMID			Word   _BSS:0014		   4565	 4661  #5001  5799
_SEMUP			Near   ----:---- Extern		   4753	 #5822
_SEM_APLIC		Near   _TEXT:127A		   #4422  4679	5798
_SETCOLOR		Near   ----:---- Extern		   148	159  182  192  206  228	 242  1378  1394  1573	1593  #5842
_STOP			Near   ----:---- Extern		   4879	 #5819
_STRCMP			Near   ----:---- Extern		   1117	 1659  3282  #5835
_STRCPY			Near   ----:---- Extern		   654	784  944  979  1046  1884  1899	 #5836
_STRLEN			Near   ----:---- Extern		   671	801  952  1815	1832  2512  2568  2624	2765  2822  2879  #5834
_UNSIGNEDTOSTR		Near   ----:---- Extern		   2115	 2146  2175  2252  2285	 2316  3510  3547  3584	 3621  3658  3695 +
							   4542	 4582  #5832
_VAR			Alias  VAR			   #5806
_WAIT			Near   ----:---- Extern		   3982	 #5827
_WAITPID		Near   ----:---- Extern		   3870	 #5826
_WHEREX			Near   ----:---- Extern		   1297	 #5841
_WHEREY			Near   ----:---- Extern		   1302	 #5840

Macro Name						   Cref	(defined at #)

$COMM							   #1

Groups & Segments	Bit Size Align	Combine	Class	   Cref	(defined at #)

DGROUP			Group				   #12	13  27	28  30	31  33	34  36	37  39	40  42	43  45	46  48	49+
							   51  52  54  55  57  58  60  61  63  64  66  67  69  70  72  73  75  76 +
							   78  79  81  82  84  85  87  88  90  91  93  94  96  97  99  100  129	  +
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 112
Symbol Table



							   133	137  141  165  175  185	 199  209  215	221  235  245  255  269	  +
							   272	280  283  396  431  439	 453  490  501	506  511  513  527  532	  +
							   549	554  556  560  565  580	 581  590  591	596  603  608  615  646	  +
							   649	652  660  669  687  691	 698  703  705	710  717  728  732  737	  +
							   742	743  748  770  776  779	 782  790  799	823  834  840  892  913	  +
							   917	923  942  950  973  977	 985  989  990	1038  1041  1044  1051	  +
							   1056	 1063  1068  1075  1081	 1086  1093  1114  1115	 1116  1147  1154 +
							   1174	 1188  1198  1233  1236	 1355  1435  1443  1452	 1472  1495  1547 +
							   1556	 1582  1655  1723  1731	 1735  1788  1882  1897	 1969  2007  2026 +
							   2038	 2407  2416  2475  2493	 2502  2510  2535  2544	 2556  2558  2566 +
							   2591	 2600  2612  2614  2622	 2647  2656  2668  2679	 2691  2698  2705 +
							   2712	 2719  2726  2733
  _BSS			16  0627 Word	Public	BSS	   12  #18  #2443  #5000
  _DATA			16  0C20 Word	Public	DATA	   12  #14  #22	 #3371	#5028
_TEXT			16  14D9 Byte	Public	CODE	   #10	13  #103  107  1285  1342  1415	 1462  1519  1620  1687	 1752	  +
							   1802	 1917  1953  1985  2071	 2211  2352  2388  #2446  2450	2949  3037+
							   3184	 3255  #3379  3383  3733  3820	3953  4067  4280  4421	4621  4709+
							   4767	 4825  4914  #5796
Turbo Assembler	 Version 3.1	    11/25/15 20:16:32	    Page 113
Error Summary



*Warning* command.ASM(3382) Reserved word used as symbol: EXITCODE
